@ arm-none-eabi-as equates file for STM32F103xx
@ SVD2GAS Equates Generator, Copyright Terry Porter 2017 "terry@tjporter.com.au" for arm-none-eabi-as 
@ Matthias Koch Complimentary Edition 2017
@ Takes a CMSIS-SVD file plus a hand edited config.xml file as input 
@ Licensed under the GPL, see http://www.gnu.org/licenses/


@=========================== FSMC ===========================@
.equ FSMC_BASE, 0xA0000000 @ (Flexible static memory controller) 
    .equ FSMC_BCR1, FSMC_BASE + 0x0 @ (SRAM/NOR-Flash chip-select control register  1) 
        .equ FSMC_CBURSTRW_Shift, 19   @ bitWidth 1 (CBURSTRW)  
        .equ FSMC_ASYNCWAIT_Shift, 15   @ bitWidth 1 (ASYNCWAIT)  
        .equ FSMC_EXTMOD_Shift, 14   @ bitWidth 1 (EXTMOD)  
        .equ FSMC_WAITEN_Shift, 13   @ bitWidth 1 (WAITEN)  
        .equ FSMC_WREN_Shift, 12   @ bitWidth 1 (WREN)  
        .equ FSMC_WAITCFG_Shift, 11   @ bitWidth 1 (WAITCFG)  
        .equ FSMC_WAITPOL_Shift, 9   @ bitWidth 1 (WAITPOL)  
        .equ FSMC_BURSTEN_Shift, 8   @ bitWidth 1 (BURSTEN)  
        .equ FSMC_FACCEN_Shift, 6   @ bitWidth 1 (FACCEN)  
        .equ FSMC_MWID_Shift, 4   @ bitWidth 2 (MWID)  
        .equ FSMC_MTYP_Shift, 2   @ bitWidth 2 (MTYP)  
        .equ FSMC_MUXEN_Shift, 1   @ bitWidth 1 (MUXEN)  
        .equ FSMC_MBKEN_Shift, 0   @ bitWidth 1 (MBKEN)  
 
    .equ FSMC_BTR1, FSMC_BASE + 0x4 @ (SRAM/NOR-Flash chip-select timing register  1) 
        .equ FSMC_ACCMOD_Shift, 28   @ bitWidth 2 (ACCMOD)  
        .equ FSMC_DATLAT_Shift, 24   @ bitWidth 4 (DATLAT)  
        .equ FSMC_CLKDIV_Shift, 20   @ bitWidth 4 (CLKDIV)  
        .equ FSMC_BUSTURN_Shift, 16   @ bitWidth 4 (BUSTURN)  
        .equ FSMC_DATAST_Shift, 8   @ bitWidth 8 (DATAST)  
        .equ FSMC_ADDHLD_Shift, 4   @ bitWidth 4 (ADDHLD)  
        .equ FSMC_ADDSET_Shift, 0   @ bitWidth 4 (ADDSET)  
 
    .equ FSMC_BCR2, FSMC_BASE + 0x8 @ (SRAM/NOR-Flash chip-select control register  2) 
        .equ FSMC_CBURSTRW_Shift, 19   @ bitWidth 1 (CBURSTRW)  
        .equ FSMC_ASYNCWAIT_Shift, 15   @ bitWidth 1 (ASYNCWAIT)  
        .equ FSMC_EXTMOD_Shift, 14   @ bitWidth 1 (EXTMOD)  
        .equ FSMC_WAITEN_Shift, 13   @ bitWidth 1 (WAITEN)  
        .equ FSMC_WREN_Shift, 12   @ bitWidth 1 (WREN)  
        .equ FSMC_WAITCFG_Shift, 11   @ bitWidth 1 (WAITCFG)  
        .equ FSMC_WRAPMOD_Shift, 10   @ bitWidth 1 (WRAPMOD)  
        .equ FSMC_WAITPOL_Shift, 9   @ bitWidth 1 (WAITPOL)  
        .equ FSMC_BURSTEN_Shift, 8   @ bitWidth 1 (BURSTEN)  
        .equ FSMC_FACCEN_Shift, 6   @ bitWidth 1 (FACCEN)  
        .equ FSMC_MWID_Shift, 4   @ bitWidth 2 (MWID)  
        .equ FSMC_MTYP_Shift, 2   @ bitWidth 2 (MTYP)  
        .equ FSMC_MUXEN_Shift, 1   @ bitWidth 1 (MUXEN)  
        .equ FSMC_MBKEN_Shift, 0   @ bitWidth 1 (MBKEN)  
 
    .equ FSMC_BTR2, FSMC_BASE + 0xC @ (SRAM/NOR-Flash chip-select timing register  2) 
        .equ FSMC_ACCMOD_Shift, 28   @ bitWidth 2 (ACCMOD)  
        .equ FSMC_DATLAT_Shift, 24   @ bitWidth 4 (DATLAT)  
        .equ FSMC_CLKDIV_Shift, 20   @ bitWidth 4 (CLKDIV)  
        .equ FSMC_BUSTURN_Shift, 16   @ bitWidth 4 (BUSTURN)  
        .equ FSMC_DATAST_Shift, 8   @ bitWidth 8 (DATAST)  
        .equ FSMC_ADDHLD_Shift, 4   @ bitWidth 4 (ADDHLD)  
        .equ FSMC_ADDSET_Shift, 0   @ bitWidth 4 (ADDSET)  
 
    .equ FSMC_BCR3, FSMC_BASE + 0x10 @ (SRAM/NOR-Flash chip-select control register  3) 
        .equ FSMC_CBURSTRW_Shift, 19   @ bitWidth 1 (CBURSTRW)  
        .equ FSMC_ASYNCWAIT_Shift, 15   @ bitWidth 1 (ASYNCWAIT)  
        .equ FSMC_EXTMOD_Shift, 14   @ bitWidth 1 (EXTMOD)  
        .equ FSMC_WAITEN_Shift, 13   @ bitWidth 1 (WAITEN)  
        .equ FSMC_WREN_Shift, 12   @ bitWidth 1 (WREN)  
        .equ FSMC_WAITCFG_Shift, 11   @ bitWidth 1 (WAITCFG)  
        .equ FSMC_WRAPMOD_Shift, 10   @ bitWidth 1 (WRAPMOD)  
        .equ FSMC_WAITPOL_Shift, 9   @ bitWidth 1 (WAITPOL)  
        .equ FSMC_BURSTEN_Shift, 8   @ bitWidth 1 (BURSTEN)  
        .equ FSMC_FACCEN_Shift, 6   @ bitWidth 1 (FACCEN)  
        .equ FSMC_MWID_Shift, 4   @ bitWidth 2 (MWID)  
        .equ FSMC_MTYP_Shift, 2   @ bitWidth 2 (MTYP)  
        .equ FSMC_MUXEN_Shift, 1   @ bitWidth 1 (MUXEN)  
        .equ FSMC_MBKEN_Shift, 0   @ bitWidth 1 (MBKEN)  
 
    .equ FSMC_BTR3, FSMC_BASE + 0x14 @ (SRAM/NOR-Flash chip-select timing register  3) 
        .equ FSMC_ACCMOD_Shift, 28   @ bitWidth 2 (ACCMOD)  
        .equ FSMC_DATLAT_Shift, 24   @ bitWidth 4 (DATLAT)  
        .equ FSMC_CLKDIV_Shift, 20   @ bitWidth 4 (CLKDIV)  
        .equ FSMC_BUSTURN_Shift, 16   @ bitWidth 4 (BUSTURN)  
        .equ FSMC_DATAST_Shift, 8   @ bitWidth 8 (DATAST)  
        .equ FSMC_ADDHLD_Shift, 4   @ bitWidth 4 (ADDHLD)  
        .equ FSMC_ADDSET_Shift, 0   @ bitWidth 4 (ADDSET)  
 
    .equ FSMC_BCR4, FSMC_BASE + 0x18 @ (SRAM/NOR-Flash chip-select control register  4) 
        .equ FSMC_CBURSTRW_Shift, 19   @ bitWidth 1 (CBURSTRW)  
        .equ FSMC_ASYNCWAIT_Shift, 15   @ bitWidth 1 (ASYNCWAIT)  
        .equ FSMC_EXTMOD_Shift, 14   @ bitWidth 1 (EXTMOD)  
        .equ FSMC_WAITEN_Shift, 13   @ bitWidth 1 (WAITEN)  
        .equ FSMC_WREN_Shift, 12   @ bitWidth 1 (WREN)  
        .equ FSMC_WAITCFG_Shift, 11   @ bitWidth 1 (WAITCFG)  
        .equ FSMC_WRAPMOD_Shift, 10   @ bitWidth 1 (WRAPMOD)  
        .equ FSMC_WAITPOL_Shift, 9   @ bitWidth 1 (WAITPOL)  
        .equ FSMC_BURSTEN_Shift, 8   @ bitWidth 1 (BURSTEN)  
        .equ FSMC_FACCEN_Shift, 6   @ bitWidth 1 (FACCEN)  
        .equ FSMC_MWID_Shift, 4   @ bitWidth 2 (MWID)  
        .equ FSMC_MTYP_Shift, 2   @ bitWidth 2 (MTYP)  
        .equ FSMC_MUXEN_Shift, 1   @ bitWidth 1 (MUXEN)  
        .equ FSMC_MBKEN_Shift, 0   @ bitWidth 1 (MBKEN)  
 
    .equ FSMC_BTR4, FSMC_BASE + 0x1C @ (SRAM/NOR-Flash chip-select timing register  4) 
        .equ FSMC_ACCMOD_Shift, 28   @ bitWidth 2 (ACCMOD)  
        .equ FSMC_DATLAT_Shift, 24   @ bitWidth 4 (DATLAT)  
        .equ FSMC_CLKDIV_Shift, 20   @ bitWidth 4 (CLKDIV)  
        .equ FSMC_BUSTURN_Shift, 16   @ bitWidth 4 (BUSTURN)  
        .equ FSMC_DATAST_Shift, 8   @ bitWidth 8 (DATAST)  
        .equ FSMC_ADDHLD_Shift, 4   @ bitWidth 4 (ADDHLD)  
        .equ FSMC_ADDSET_Shift, 0   @ bitWidth 4 (ADDSET)  
 
    .equ FSMC_PCR2, FSMC_BASE + 0x60 @ (PC Card/NAND Flash control register  2) 
        .equ FSMC_ECCPS_Shift, 17   @ bitWidth 3 (ECCPS)  
        .equ FSMC_TAR_Shift, 13   @ bitWidth 4 (TAR)  
        .equ FSMC_TCLR_Shift, 9   @ bitWidth 4 (TCLR)  
        .equ FSMC_ECCEN_Shift, 6   @ bitWidth 1 (ECCEN)  
        .equ FSMC_PWID_Shift, 4   @ bitWidth 2 (PWID)  
        .equ FSMC_PTYP_Shift, 3   @ bitWidth 1 (PTYP)  
        .equ FSMC_PBKEN_Shift, 2   @ bitWidth 1 (PBKEN)  
        .equ FSMC_PWAITEN_Shift, 1   @ bitWidth 1 (PWAITEN)  
 
    .equ FSMC_SR2, FSMC_BASE + 0x64 @ (FIFO status and interrupt register  2) 
        .equ FSMC_FEMPT_Shift, 6   @ bitWidth 1 (FEMPT)  
        .equ FSMC_IFEN_Shift, 5   @ bitWidth 1 (IFEN)  
        .equ FSMC_ILEN_Shift, 4   @ bitWidth 1 (ILEN)  
        .equ FSMC_IREN_Shift, 3   @ bitWidth 1 (IREN)  
        .equ FSMC_IFS_Shift, 2   @ bitWidth 1 (IFS)  
        .equ FSMC_ILS_Shift, 1   @ bitWidth 1 (ILS)  
        .equ FSMC_IRS_Shift, 0   @ bitWidth 1 (IRS)  
 
    .equ FSMC_PMEM2, FSMC_BASE + 0x68 @ (Common memory space timing register  2) 
        .equ FSMC_MEMHIZx_Shift, 24   @ bitWidth 8 (MEMHIZx)  
        .equ FSMC_MEMHOLDx_Shift, 16   @ bitWidth 8 (MEMHOLDx)  
        .equ FSMC_MEMWAITx_Shift, 8   @ bitWidth 8 (MEMWAITx)  
        .equ FSMC_MEMSETx_Shift, 0   @ bitWidth 8 (MEMSETx)  
 
    .equ FSMC_PATT2, FSMC_BASE + 0x6C @ (Attribute memory space timing register  2) 
        .equ FSMC_ATTHIZx_Shift, 24   @ bitWidth 8 (Attribute memory x databus HiZ  time)  
        .equ FSMC_ATTHOLDx_Shift, 16   @ bitWidth 8 (Attribute memory x hold  time)  
        .equ FSMC_ATTWAITx_Shift, 8   @ bitWidth 8 (Attribute memory x wait  time)  
        .equ FSMC_ATTSETx_Shift, 0   @ bitWidth 8 (Attribute memory x setup  time)  
 
    .equ FSMC_ECCR2, FSMC_BASE + 0x74 @ (ECC result register 2) 
        .equ FSMC_ECCx_Shift, 0   @ bitWidth 32 (ECC result)  
 
    .equ FSMC_PCR3, FSMC_BASE + 0x80 @ (PC Card/NAND Flash control register  3) 
        .equ FSMC_ECCPS_Shift, 17   @ bitWidth 3 (ECCPS)  
        .equ FSMC_TAR_Shift, 13   @ bitWidth 4 (TAR)  
        .equ FSMC_TCLR_Shift, 9   @ bitWidth 4 (TCLR)  
        .equ FSMC_ECCEN_Shift, 6   @ bitWidth 1 (ECCEN)  
        .equ FSMC_PWID_Shift, 4   @ bitWidth 2 (PWID)  
        .equ FSMC_PTYP_Shift, 3   @ bitWidth 1 (PTYP)  
        .equ FSMC_PBKEN_Shift, 2   @ bitWidth 1 (PBKEN)  
        .equ FSMC_PWAITEN_Shift, 1   @ bitWidth 1 (PWAITEN)  
 
    .equ FSMC_SR3, FSMC_BASE + 0x84 @ (FIFO status and interrupt register  3) 
        .equ FSMC_FEMPT_Shift, 6   @ bitWidth 1 (FEMPT)  
        .equ FSMC_IFEN_Shift, 5   @ bitWidth 1 (IFEN)  
        .equ FSMC_ILEN_Shift, 4   @ bitWidth 1 (ILEN)  
        .equ FSMC_IREN_Shift, 3   @ bitWidth 1 (IREN)  
        .equ FSMC_IFS_Shift, 2   @ bitWidth 1 (IFS)  
        .equ FSMC_ILS_Shift, 1   @ bitWidth 1 (ILS)  
        .equ FSMC_IRS_Shift, 0   @ bitWidth 1 (IRS)  
 
    .equ FSMC_PMEM3, FSMC_BASE + 0x88 @ (Common memory space timing register  3) 
        .equ FSMC_MEMHIZx_Shift, 24   @ bitWidth 8 (MEMHIZx)  
        .equ FSMC_MEMHOLDx_Shift, 16   @ bitWidth 8 (MEMHOLDx)  
        .equ FSMC_MEMWAITx_Shift, 8   @ bitWidth 8 (MEMWAITx)  
        .equ FSMC_MEMSETx_Shift, 0   @ bitWidth 8 (MEMSETx)  
 
    .equ FSMC_PATT3, FSMC_BASE + 0x8C @ (Attribute memory space timing register  3) 
        .equ FSMC_ATTHIZx_Shift, 24   @ bitWidth 8 (ATTHIZx)  
        .equ FSMC_ATTHOLDx_Shift, 16   @ bitWidth 8 (ATTHOLDx)  
        .equ FSMC_ATTWAITx_Shift, 8   @ bitWidth 8 (ATTWAITx)  
        .equ FSMC_ATTSETx_Shift, 0   @ bitWidth 8 (ATTSETx)  
 
    .equ FSMC_ECCR3, FSMC_BASE + 0x94 @ (ECC result register 3) 
        .equ FSMC_ECCx_Shift, 0   @ bitWidth 32 (ECCx)  
 
    .equ FSMC_PCR4, FSMC_BASE + 0xA0 @ (PC Card/NAND Flash control register  4) 
        .equ FSMC_ECCPS_Shift, 17   @ bitWidth 3 (ECCPS)  
        .equ FSMC_TAR_Shift, 13   @ bitWidth 4 (TAR)  
        .equ FSMC_TCLR_Shift, 9   @ bitWidth 4 (TCLR)  
        .equ FSMC_ECCEN_Shift, 6   @ bitWidth 1 (ECCEN)  
        .equ FSMC_PWID_Shift, 4   @ bitWidth 2 (PWID)  
        .equ FSMC_PTYP_Shift, 3   @ bitWidth 1 (PTYP)  
        .equ FSMC_PBKEN_Shift, 2   @ bitWidth 1 (PBKEN)  
        .equ FSMC_PWAITEN_Shift, 1   @ bitWidth 1 (PWAITEN)  
 
    .equ FSMC_SR4, FSMC_BASE + 0xA4 @ (FIFO status and interrupt register  4) 
        .equ FSMC_FEMPT_Shift, 6   @ bitWidth 1 (FEMPT)  
        .equ FSMC_IFEN_Shift, 5   @ bitWidth 1 (IFEN)  
        .equ FSMC_ILEN_Shift, 4   @ bitWidth 1 (ILEN)  
        .equ FSMC_IREN_Shift, 3   @ bitWidth 1 (IREN)  
        .equ FSMC_IFS_Shift, 2   @ bitWidth 1 (IFS)  
        .equ FSMC_ILS_Shift, 1   @ bitWidth 1 (ILS)  
        .equ FSMC_IRS_Shift, 0   @ bitWidth 1 (IRS)  
 
    .equ FSMC_PMEM4, FSMC_BASE + 0xA8 @ (Common memory space timing register  4) 
        .equ FSMC_MEMHIZx_Shift, 24   @ bitWidth 8 (MEMHIZx)  
        .equ FSMC_MEMHOLDx_Shift, 16   @ bitWidth 8 (MEMHOLDx)  
        .equ FSMC_MEMWAITx_Shift, 8   @ bitWidth 8 (MEMWAITx)  
        .equ FSMC_MEMSETx_Shift, 0   @ bitWidth 8 (MEMSETx)  
 
    .equ FSMC_PATT4, FSMC_BASE + 0xAC @ (Attribute memory space timing register  4) 
        .equ FSMC_ATTHIZx_Shift, 24   @ bitWidth 8 (ATTHIZx)  
        .equ FSMC_ATTHOLDx_Shift, 16   @ bitWidth 8 (ATTHOLDx)  
        .equ FSMC_ATTWAITx_Shift, 8   @ bitWidth 8 (ATTWAITx)  
        .equ FSMC_ATTSETx_Shift, 0   @ bitWidth 8 (ATTSETx)  
 
    .equ FSMC_PIO4, FSMC_BASE + 0xB0 @ (I/O space timing register 4) 
        .equ FSMC_IOHIZx_Shift, 24   @ bitWidth 8 (IOHIZx)  
        .equ FSMC_IOHOLDx_Shift, 16   @ bitWidth 8 (IOHOLDx)  
        .equ FSMC_IOWAITx_Shift, 8   @ bitWidth 8 (IOWAITx)  
        .equ FSMC_IOSETx_Shift, 0   @ bitWidth 8 (IOSETx)  
 
    .equ FSMC_BWTR1, FSMC_BASE + 0x104 @ (SRAM/NOR-Flash write timing registers  1) 
        .equ FSMC_ACCMOD_Shift, 28   @ bitWidth 2 (ACCMOD)  
        .equ FSMC_DATLAT_Shift, 24   @ bitWidth 4 (DATLAT)  
        .equ FSMC_CLKDIV_Shift, 20   @ bitWidth 4 (CLKDIV)  
        .equ FSMC_DATAST_Shift, 8   @ bitWidth 8 (DATAST)  
        .equ FSMC_ADDHLD_Shift, 4   @ bitWidth 4 (ADDHLD)  
        .equ FSMC_ADDSET_Shift, 0   @ bitWidth 4 (ADDSET)  
 
    .equ FSMC_BWTR2, FSMC_BASE + 0x10C @ (SRAM/NOR-Flash write timing registers  2) 
        .equ FSMC_ACCMOD_Shift, 28   @ bitWidth 2 (ACCMOD)  
        .equ FSMC_DATLAT_Shift, 24   @ bitWidth 4 (DATLAT)  
        .equ FSMC_CLKDIV_Shift, 20   @ bitWidth 4 (CLKDIV)  
        .equ FSMC_DATAST_Shift, 8   @ bitWidth 8 (DATAST)  
        .equ FSMC_ADDHLD_Shift, 4   @ bitWidth 4 (ADDHLD)  
        .equ FSMC_ADDSET_Shift, 0   @ bitWidth 4 (ADDSET)  
 
    .equ FSMC_BWTR3, FSMC_BASE + 0x114 @ (SRAM/NOR-Flash write timing registers  3) 
        .equ FSMC_ACCMOD_Shift, 28   @ bitWidth 2 (ACCMOD)  
        .equ FSMC_DATLAT_Shift, 24   @ bitWidth 4 (DATLAT)  
        .equ FSMC_CLKDIV_Shift, 20   @ bitWidth 4 (CLKDIV)  
        .equ FSMC_DATAST_Shift, 8   @ bitWidth 8 (DATAST)  
        .equ FSMC_ADDHLD_Shift, 4   @ bitWidth 4 (ADDHLD)  
        .equ FSMC_ADDSET_Shift, 0   @ bitWidth 4 (ADDSET)  
 
    .equ FSMC_BWTR4, FSMC_BASE + 0x11C @ (SRAM/NOR-Flash write timing registers  4) 
        .equ FSMC_ACCMOD_Shift, 28   @ bitWidth 2 (ACCMOD)  
        .equ FSMC_DATLAT_Shift, 24   @ bitWidth 4 (DATLAT)  
        .equ FSMC_CLKDIV_Shift, 20   @ bitWidth 4 (CLKDIV)  
        .equ FSMC_DATAST_Shift, 8   @ bitWidth 8 (DATAST)  
        .equ FSMC_ADDHLD_Shift, 4   @ bitWidth 4 (ADDHLD)  
        .equ FSMC_ADDSET_Shift, 0   @ bitWidth 4 (ADDSET)  
 

@=========================== PWR ===========================@
.equ PWR_BASE, 0x40007000 @ (Power control) 
    .equ PWR_CR, PWR_BASE + 0x0 @ (Power control register  PWR_CR) 
        .equ PWR_LPDS_Shift, 0   @ bitWidth 1 (Low Power Deep Sleep)  
        .equ PWR_PDDS_Shift, 1   @ bitWidth 1 (Power Down Deep Sleep)  
        .equ PWR_CWUF_Shift, 2   @ bitWidth 1 (Clear Wake-up Flag)  
        .equ PWR_CSBF_Shift, 3   @ bitWidth 1 (Clear STANDBY Flag)  
        .equ PWR_PVDE_Shift, 4   @ bitWidth 1 (Power Voltage Detector  Enable)  
        .equ PWR_PLS_Shift, 5   @ bitWidth 3 (PVD Level Selection)  
        .equ PWR_DBP_Shift, 8   @ bitWidth 1 (Disable Backup Domain write  protection)  
 
    .equ PWR_CSR, PWR_BASE + 0x4 @ (Power control register  PWR_CR) 
        .equ PWR_WUF_Shift, 0   @ bitWidth 1 (Wake-Up Flag)  
        .equ PWR_SBF_Shift, 1   @ bitWidth 1 (STANDBY Flag)  
        .equ PWR_PVDO_Shift, 2   @ bitWidth 1 (PVD Output)  
        .equ PWR_EWUP_Shift, 8   @ bitWidth 1 (Enable WKUP pin)  
 

@=========================== RCC ===========================@
.equ RCC_BASE, 0x40021000 @ (Reset and clock control) 
    .equ RCC_CR, RCC_BASE + 0x0 @ (Clock control register) 
        .equ RCC_HSION_Shift, 0   @ bitWidth 1 (Internal High Speed clock  enable)  
        .equ RCC_HSIRDY_Shift, 1   @ bitWidth 1 (Internal High Speed clock ready  flag)  
        .equ RCC_HSITRIM_Shift, 3   @ bitWidth 5 (Internal High Speed clock  trimming)  
        .equ RCC_HSICAL_Shift, 8   @ bitWidth 8 (Internal High Speed clock  Calibration)  
        .equ RCC_HSEON_Shift, 16   @ bitWidth 1 (External High Speed clock  enable)  
        .equ RCC_HSERDY_Shift, 17   @ bitWidth 1 (External High Speed clock ready  flag)  
        .equ RCC_HSEBYP_Shift, 18   @ bitWidth 1 (External High Speed clock  Bypass)  
        .equ RCC_CSSON_Shift, 19   @ bitWidth 1 (Clock Security System  enable)  
        .equ RCC_PLLON_Shift, 24   @ bitWidth 1 (PLL enable)  
        .equ RCC_PLLRDY_Shift, 25   @ bitWidth 1 (PLL clock ready flag)  
 
    .equ RCC_CFGR, RCC_BASE + 0x4 @ (Clock configuration register  RCC_CFGR) 
        .equ RCC_SW_Shift, 0   @ bitWidth 2 (System clock Switch)  
        .equ RCC_SWS_Shift, 2   @ bitWidth 2 (System Clock Switch Status)  
        .equ RCC_HPRE_Shift, 4   @ bitWidth 4 (AHB prescaler)  
        .equ RCC_PPRE1_Shift, 8   @ bitWidth 3 (APB Low speed prescaler  APB1)  
        .equ RCC_PPRE2_Shift, 11   @ bitWidth 3 (APB High speed prescaler  APB2)  
        .equ RCC_ADCPRE_Shift, 14   @ bitWidth 2 (ADC prescaler)  
        .equ RCC_PLLSRC_Shift, 16   @ bitWidth 1 (PLL entry clock source)  
        .equ RCC_PLLXTPRE_Shift, 17   @ bitWidth 1 (HSE divider for PLL entry)  
        .equ RCC_PLLMUL_Shift, 18   @ bitWidth 4 (PLL Multiplication Factor)  
        .equ RCC_OTGFSPRE_Shift, 22   @ bitWidth 1 (USB OTG FS prescaler)  
        .equ RCC_MCO_Shift, 24   @ bitWidth 3 (Microcontroller clock  output)  
 
    .equ RCC_CIR, RCC_BASE + 0x8 @ (Clock interrupt register  RCC_CIR) 
        .equ RCC_LSIRDYF_Shift, 0   @ bitWidth 1 (LSI Ready Interrupt flag)  
        .equ RCC_LSERDYF_Shift, 1   @ bitWidth 1 (LSE Ready Interrupt flag)  
        .equ RCC_HSIRDYF_Shift, 2   @ bitWidth 1 (HSI Ready Interrupt flag)  
        .equ RCC_HSERDYF_Shift, 3   @ bitWidth 1 (HSE Ready Interrupt flag)  
        .equ RCC_PLLRDYF_Shift, 4   @ bitWidth 1 (PLL Ready Interrupt flag)  
        .equ RCC_CSSF_Shift, 7   @ bitWidth 1 (Clock Security System Interrupt  flag)  
        .equ RCC_LSIRDYIE_Shift, 8   @ bitWidth 1 (LSI Ready Interrupt Enable)  
        .equ RCC_LSERDYIE_Shift, 9   @ bitWidth 1 (LSE Ready Interrupt Enable)  
        .equ RCC_HSIRDYIE_Shift, 10   @ bitWidth 1 (HSI Ready Interrupt Enable)  
        .equ RCC_HSERDYIE_Shift, 11   @ bitWidth 1 (HSE Ready Interrupt Enable)  
        .equ RCC_PLLRDYIE_Shift, 12   @ bitWidth 1 (PLL Ready Interrupt Enable)  
        .equ RCC_LSIRDYC_Shift, 16   @ bitWidth 1 (LSI Ready Interrupt Clear)  
        .equ RCC_LSERDYC_Shift, 17   @ bitWidth 1 (LSE Ready Interrupt Clear)  
        .equ RCC_HSIRDYC_Shift, 18   @ bitWidth 1 (HSI Ready Interrupt Clear)  
        .equ RCC_HSERDYC_Shift, 19   @ bitWidth 1 (HSE Ready Interrupt Clear)  
        .equ RCC_PLLRDYC_Shift, 20   @ bitWidth 1 (PLL Ready Interrupt Clear)  
        .equ RCC_CSSC_Shift, 23   @ bitWidth 1 (Clock security system interrupt  clear)  
 
    .equ RCC_APB2RSTR, RCC_BASE + 0xC @ (APB2 peripheral reset register  RCC_APB2RSTR) 
        .equ RCC_AFIORST_Shift, 0   @ bitWidth 1 (Alternate function I/O  reset)  
        .equ RCC_IOPARST_Shift, 2   @ bitWidth 1 (IO port A reset)  
        .equ RCC_IOPBRST_Shift, 3   @ bitWidth 1 (IO port B reset)  
        .equ RCC_IOPCRST_Shift, 4   @ bitWidth 1 (IO port C reset)  
        .equ RCC_IOPDRST_Shift, 5   @ bitWidth 1 (IO port D reset)  
        .equ RCC_IOPERST_Shift, 6   @ bitWidth 1 (IO port E reset)  
        .equ RCC_IOPFRST_Shift, 7   @ bitWidth 1 (IO port F reset)  
        .equ RCC_IOPGRST_Shift, 8   @ bitWidth 1 (IO port G reset)  
        .equ RCC_ADC1RST_Shift, 9   @ bitWidth 1 (ADC 1 interface reset)  
        .equ RCC_ADC2RST_Shift, 10   @ bitWidth 1 (ADC 2 interface reset)  
        .equ RCC_TIM1RST_Shift, 11   @ bitWidth 1 (TIM1 timer reset)  
        .equ RCC_SPI1RST_Shift, 12   @ bitWidth 1 (SPI 1 reset)  
        .equ RCC_TIM8RST_Shift, 13   @ bitWidth 1 (TIM8 timer reset)  
        .equ RCC_USART1RST_Shift, 14   @ bitWidth 1 (USART1 reset)  
        .equ RCC_ADC3RST_Shift, 15   @ bitWidth 1 (ADC 3 interface reset)  
        .equ RCC_TIM9RST_Shift, 19   @ bitWidth 1 (TIM9 timer reset)  
        .equ RCC_TIM10RST_Shift, 20   @ bitWidth 1 (TIM10 timer reset)  
        .equ RCC_TIM11RST_Shift, 21   @ bitWidth 1 (TIM11 timer reset)  
 
    .equ RCC_APB1RSTR, RCC_BASE + 0x10 @ (APB1 peripheral reset register  RCC_APB1RSTR) 
        .equ RCC_TIM2RST_Shift, 0   @ bitWidth 1 (Timer 2 reset)  
        .equ RCC_TIM3RST_Shift, 1   @ bitWidth 1 (Timer 3 reset)  
        .equ RCC_TIM4RST_Shift, 2   @ bitWidth 1 (Timer 4 reset)  
        .equ RCC_TIM5RST_Shift, 3   @ bitWidth 1 (Timer 5 reset)  
        .equ RCC_TIM6RST_Shift, 4   @ bitWidth 1 (Timer 6 reset)  
        .equ RCC_TIM7RST_Shift, 5   @ bitWidth 1 (Timer 7 reset)  
        .equ RCC_TIM12RST_Shift, 6   @ bitWidth 1 (Timer 12 reset)  
        .equ RCC_TIM13RST_Shift, 7   @ bitWidth 1 (Timer 13 reset)  
        .equ RCC_TIM14RST_Shift, 8   @ bitWidth 1 (Timer 14 reset)  
        .equ RCC_WWDGRST_Shift, 11   @ bitWidth 1 (Window watchdog reset)  
        .equ RCC_SPI2RST_Shift, 14   @ bitWidth 1 (SPI2 reset)  
        .equ RCC_SPI3RST_Shift, 15   @ bitWidth 1 (SPI3 reset)  
        .equ RCC_USART2RST_Shift, 17   @ bitWidth 1 (USART 2 reset)  
        .equ RCC_USART3RST_Shift, 18   @ bitWidth 1 (USART 3 reset)  
        .equ RCC_UART4RST_Shift, 19   @ bitWidth 1 (UART 4 reset)  
        .equ RCC_UART5RST_Shift, 20   @ bitWidth 1 (UART 5 reset)  
        .equ RCC_I2C1RST_Shift, 21   @ bitWidth 1 (I2C1 reset)  
        .equ RCC_I2C2RST_Shift, 22   @ bitWidth 1 (I2C2 reset)  
        .equ RCC_USBRST_Shift, 23   @ bitWidth 1 (USB reset)  
        .equ RCC_CANRST_Shift, 25   @ bitWidth 1 (CAN reset)  
        .equ RCC_BKPRST_Shift, 27   @ bitWidth 1 (Backup interface reset)  
        .equ RCC_PWRRST_Shift, 28   @ bitWidth 1 (Power interface reset)  
        .equ RCC_DACRST_Shift, 29   @ bitWidth 1 (DAC interface reset)  
 
    .equ RCC_AHBENR, RCC_BASE + 0x14 @ (AHB Peripheral Clock enable register  RCC_AHBENR) 
        .equ RCC_DMA1EN_Shift, 0   @ bitWidth 1 (DMA1 clock enable)  
        .equ RCC_DMA2EN_Shift, 1   @ bitWidth 1 (DMA2 clock enable)  
        .equ RCC_SRAMEN_Shift, 2   @ bitWidth 1 (SRAM interface clock  enable)  
        .equ RCC_FLITFEN_Shift, 4   @ bitWidth 1 (FLITF clock enable)  
        .equ RCC_CRCEN_Shift, 6   @ bitWidth 1 (CRC clock enable)  
        .equ RCC_FSMCEN_Shift, 8   @ bitWidth 1 (FSMC clock enable)  
        .equ RCC_SDIOEN_Shift, 10   @ bitWidth 1 (SDIO clock enable)  
 
    .equ RCC_APB2ENR, RCC_BASE + 0x18 @ (APB2 peripheral clock enable register  RCC_APB2ENR) 
        .equ RCC_AFIOEN_Shift, 0   @ bitWidth 1 (Alternate function I/O clock  enable)  
        .equ RCC_IOPAEN_Shift, 2   @ bitWidth 1 (I/O port A clock enable)  
        .equ RCC_IOPBEN_Shift, 3   @ bitWidth 1 (I/O port B clock enable)  
        .equ RCC_IOPCEN_Shift, 4   @ bitWidth 1 (I/O port C clock enable)  
        .equ RCC_IOPDEN_Shift, 5   @ bitWidth 1 (I/O port D clock enable)  
        .equ RCC_IOPEEN_Shift, 6   @ bitWidth 1 (I/O port E clock enable)  
        .equ RCC_IOPFEN_Shift, 7   @ bitWidth 1 (I/O port F clock enable)  
        .equ RCC_IOPGEN_Shift, 8   @ bitWidth 1 (I/O port G clock enable)  
        .equ RCC_ADC1EN_Shift, 9   @ bitWidth 1 (ADC 1 interface clock  enable)  
        .equ RCC_ADC2EN_Shift, 10   @ bitWidth 1 (ADC 2 interface clock  enable)  
        .equ RCC_TIM1EN_Shift, 11   @ bitWidth 1 (TIM1 Timer clock enable)  
        .equ RCC_SPI1EN_Shift, 12   @ bitWidth 1 (SPI 1 clock enable)  
        .equ RCC_TIM8EN_Shift, 13   @ bitWidth 1 (TIM8 Timer clock enable)  
        .equ RCC_USART1EN_Shift, 14   @ bitWidth 1 (USART1 clock enable)  
        .equ RCC_ADC3EN_Shift, 15   @ bitWidth 1 (ADC3 interface clock  enable)  
        .equ RCC_TIM9EN_Shift, 19   @ bitWidth 1 (TIM9 Timer clock enable)  
        .equ RCC_TIM10EN_Shift, 20   @ bitWidth 1 (TIM10 Timer clock enable)  
        .equ RCC_TIM11EN_Shift, 21   @ bitWidth 1 (TIM11 Timer clock enable)  
 
    .equ RCC_APB1ENR, RCC_BASE + 0x1C @ (APB1 peripheral clock enable register  RCC_APB1ENR) 
        .equ RCC_TIM2EN_Shift, 0   @ bitWidth 1 (Timer 2 clock enable)  
        .equ RCC_TIM3EN_Shift, 1   @ bitWidth 1 (Timer 3 clock enable)  
        .equ RCC_TIM4EN_Shift, 2   @ bitWidth 1 (Timer 4 clock enable)  
        .equ RCC_TIM5EN_Shift, 3   @ bitWidth 1 (Timer 5 clock enable)  
        .equ RCC_TIM6EN_Shift, 4   @ bitWidth 1 (Timer 6 clock enable)  
        .equ RCC_TIM7EN_Shift, 5   @ bitWidth 1 (Timer 7 clock enable)  
        .equ RCC_TIM12EN_Shift, 6   @ bitWidth 1 (Timer 12 clock enable)  
        .equ RCC_TIM13EN_Shift, 7   @ bitWidth 1 (Timer 13 clock enable)  
        .equ RCC_TIM14EN_Shift, 8   @ bitWidth 1 (Timer 14 clock enable)  
        .equ RCC_WWDGEN_Shift, 11   @ bitWidth 1 (Window watchdog clock  enable)  
        .equ RCC_SPI2EN_Shift, 14   @ bitWidth 1 (SPI 2 clock enable)  
        .equ RCC_SPI3EN_Shift, 15   @ bitWidth 1 (SPI 3 clock enable)  
        .equ RCC_USART2EN_Shift, 17   @ bitWidth 1 (USART 2 clock enable)  
        .equ RCC_USART3EN_Shift, 18   @ bitWidth 1 (USART 3 clock enable)  
        .equ RCC_UART4EN_Shift, 19   @ bitWidth 1 (UART 4 clock enable)  
        .equ RCC_UART5EN_Shift, 20   @ bitWidth 1 (UART 5 clock enable)  
        .equ RCC_I2C1EN_Shift, 21   @ bitWidth 1 (I2C 1 clock enable)  
        .equ RCC_I2C2EN_Shift, 22   @ bitWidth 1 (I2C 2 clock enable)  
        .equ RCC_USBEN_Shift, 23   @ bitWidth 1 (USB clock enable)  
        .equ RCC_CANEN_Shift, 25   @ bitWidth 1 (CAN clock enable)  
        .equ RCC_BKPEN_Shift, 27   @ bitWidth 1 (Backup interface clock  enable)  
        .equ RCC_PWREN_Shift, 28   @ bitWidth 1 (Power interface clock  enable)  
        .equ RCC_DACEN_Shift, 29   @ bitWidth 1 (DAC interface clock enable)  
 
    .equ RCC_BDCR, RCC_BASE + 0x20 @ (Backup domain control register  RCC_BDCR) 
        .equ RCC_LSEON_Shift, 0   @ bitWidth 1 (External Low Speed oscillator  enable)  
        .equ RCC_LSERDY_Shift, 1   @ bitWidth 1 (External Low Speed oscillator  ready)  
        .equ RCC_LSEBYP_Shift, 2   @ bitWidth 1 (External Low Speed oscillator  bypass)  
        .equ RCC_RTCSEL_Shift, 8   @ bitWidth 2 (RTC clock source selection)  
        .equ RCC_RTCEN_Shift, 15   @ bitWidth 1 (RTC clock enable)  
        .equ RCC_BDRST_Shift, 16   @ bitWidth 1 (Backup domain software  reset)  
 
    .equ RCC_CSR, RCC_BASE + 0x24 @ (Control/status register  RCC_CSR) 
        .equ RCC_LSION_Shift, 0   @ bitWidth 1 (Internal low speed oscillator  enable)  
        .equ RCC_LSIRDY_Shift, 1   @ bitWidth 1 (Internal low speed oscillator  ready)  
        .equ RCC_RMVF_Shift, 24   @ bitWidth 1 (Remove reset flag)  
        .equ RCC_PINRSTF_Shift, 26   @ bitWidth 1 (PIN reset flag)  
        .equ RCC_PORRSTF_Shift, 27   @ bitWidth 1 (POR/PDR reset flag)  
        .equ RCC_SFTRSTF_Shift, 28   @ bitWidth 1 (Software reset flag)  
        .equ RCC_IWDGRSTF_Shift, 29   @ bitWidth 1 (Independent watchdog reset  flag)  
        .equ RCC_WWDGRSTF_Shift, 30   @ bitWidth 1 (Window watchdog reset flag)  
        .equ RCC_LPWRRSTF_Shift, 31   @ bitWidth 1 (Low-power reset flag)  
 

@=========================== GPIOA ===========================@
.equ GPIOA_BASE, 0x40010800 @ (General purpose I/O) 
    .equ GPIOA_CRL, GPIOA_BASE + 0x0 @ (Port configuration register low  GPIOn_CRL) 
        .equ GPIOA_MODE0_Shift, 0   @ bitWidth 2 (Port n.0 mode bits)  
        .equ GPIOA_CNF0_Shift, 2   @ bitWidth 2 (Port n.0 configuration  bits)  
        .equ GPIOA_MODE1_Shift, 4   @ bitWidth 2 (Port n.1 mode bits)  
        .equ GPIOA_CNF1_Shift, 6   @ bitWidth 2 (Port n.1 configuration  bits)  
        .equ GPIOA_MODE2_Shift, 8   @ bitWidth 2 (Port n.2 mode bits)  
        .equ GPIOA_CNF2_Shift, 10   @ bitWidth 2 (Port n.2 configuration  bits)  
        .equ GPIOA_MODE3_Shift, 12   @ bitWidth 2 (Port n.3 mode bits)  
        .equ GPIOA_CNF3_Shift, 14   @ bitWidth 2 (Port n.3 configuration  bits)  
        .equ GPIOA_MODE4_Shift, 16   @ bitWidth 2 (Port n.4 mode bits)  
        .equ GPIOA_CNF4_Shift, 18   @ bitWidth 2 (Port n.4 configuration  bits)  
        .equ GPIOA_MODE5_Shift, 20   @ bitWidth 2 (Port n.5 mode bits)  
        .equ GPIOA_CNF5_Shift, 22   @ bitWidth 2 (Port n.5 configuration  bits)  
        .equ GPIOA_MODE6_Shift, 24   @ bitWidth 2 (Port n.6 mode bits)  
        .equ GPIOA_CNF6_Shift, 26   @ bitWidth 2 (Port n.6 configuration  bits)  
        .equ GPIOA_MODE7_Shift, 28   @ bitWidth 2 (Port n.7 mode bits)  
        .equ GPIOA_CNF7_Shift, 30   @ bitWidth 2 (Port n.7 configuration  bits)  
 
    .equ GPIOA_CRH, GPIOA_BASE + 0x4 @ (Port configuration register high  GPIOn_CRL) 
        .equ GPIOA_MODE8_Shift, 0   @ bitWidth 2 (Port n.8 mode bits)  
        .equ GPIOA_CNF8_Shift, 2   @ bitWidth 2 (Port n.8 configuration  bits)  
        .equ GPIOA_MODE9_Shift, 4   @ bitWidth 2 (Port n.9 mode bits)  
        .equ GPIOA_CNF9_Shift, 6   @ bitWidth 2 (Port n.9 configuration  bits)  
        .equ GPIOA_MODE10_Shift, 8   @ bitWidth 2 (Port n.10 mode bits)  
        .equ GPIOA_CNF10_Shift, 10   @ bitWidth 2 (Port n.10 configuration  bits)  
        .equ GPIOA_MODE11_Shift, 12   @ bitWidth 2 (Port n.11 mode bits)  
        .equ GPIOA_CNF11_Shift, 14   @ bitWidth 2 (Port n.11 configuration  bits)  
        .equ GPIOA_MODE12_Shift, 16   @ bitWidth 2 (Port n.12 mode bits)  
        .equ GPIOA_CNF12_Shift, 18   @ bitWidth 2 (Port n.12 configuration  bits)  
        .equ GPIOA_MODE13_Shift, 20   @ bitWidth 2 (Port n.13 mode bits)  
        .equ GPIOA_CNF13_Shift, 22   @ bitWidth 2 (Port n.13 configuration  bits)  
        .equ GPIOA_MODE14_Shift, 24   @ bitWidth 2 (Port n.14 mode bits)  
        .equ GPIOA_CNF14_Shift, 26   @ bitWidth 2 (Port n.14 configuration  bits)  
        .equ GPIOA_MODE15_Shift, 28   @ bitWidth 2 (Port n.15 mode bits)  
        .equ GPIOA_CNF15_Shift, 30   @ bitWidth 2 (Port n.15 configuration  bits)  
 
    .equ GPIOA_IDR, GPIOA_BASE + 0x8 @ (Port input data register  GPIOn_IDR) 
        .equ GPIOA_IDR0_Shift, 0   @ bitWidth 1 (Port input data)  
        .equ GPIOA_IDR1_Shift, 1   @ bitWidth 1 (Port input data)  
        .equ GPIOA_IDR2_Shift, 2   @ bitWidth 1 (Port input data)  
        .equ GPIOA_IDR3_Shift, 3   @ bitWidth 1 (Port input data)  
        .equ GPIOA_IDR4_Shift, 4   @ bitWidth 1 (Port input data)  
        .equ GPIOA_IDR5_Shift, 5   @ bitWidth 1 (Port input data)  
        .equ GPIOA_IDR6_Shift, 6   @ bitWidth 1 (Port input data)  
        .equ GPIOA_IDR7_Shift, 7   @ bitWidth 1 (Port input data)  
        .equ GPIOA_IDR8_Shift, 8   @ bitWidth 1 (Port input data)  
        .equ GPIOA_IDR9_Shift, 9   @ bitWidth 1 (Port input data)  
        .equ GPIOA_IDR10_Shift, 10   @ bitWidth 1 (Port input data)  
        .equ GPIOA_IDR11_Shift, 11   @ bitWidth 1 (Port input data)  
        .equ GPIOA_IDR12_Shift, 12   @ bitWidth 1 (Port input data)  
        .equ GPIOA_IDR13_Shift, 13   @ bitWidth 1 (Port input data)  
        .equ GPIOA_IDR14_Shift, 14   @ bitWidth 1 (Port input data)  
        .equ GPIOA_IDR15_Shift, 15   @ bitWidth 1 (Port input data)  
 
    .equ GPIOA_ODR, GPIOA_BASE + 0xC @ (Port output data register  GPIOn_ODR) 
        .equ GPIOA_ODR0_Shift, 0   @ bitWidth 1 (Port output data)  
        .equ GPIOA_ODR1_Shift, 1   @ bitWidth 1 (Port output data)  
        .equ GPIOA_ODR2_Shift, 2   @ bitWidth 1 (Port output data)  
        .equ GPIOA_ODR3_Shift, 3   @ bitWidth 1 (Port output data)  
        .equ GPIOA_ODR4_Shift, 4   @ bitWidth 1 (Port output data)  
        .equ GPIOA_ODR5_Shift, 5   @ bitWidth 1 (Port output data)  
        .equ GPIOA_ODR6_Shift, 6   @ bitWidth 1 (Port output data)  
        .equ GPIOA_ODR7_Shift, 7   @ bitWidth 1 (Port output data)  
        .equ GPIOA_ODR8_Shift, 8   @ bitWidth 1 (Port output data)  
        .equ GPIOA_ODR9_Shift, 9   @ bitWidth 1 (Port output data)  
        .equ GPIOA_ODR10_Shift, 10   @ bitWidth 1 (Port output data)  
        .equ GPIOA_ODR11_Shift, 11   @ bitWidth 1 (Port output data)  
        .equ GPIOA_ODR12_Shift, 12   @ bitWidth 1 (Port output data)  
        .equ GPIOA_ODR13_Shift, 13   @ bitWidth 1 (Port output data)  
        .equ GPIOA_ODR14_Shift, 14   @ bitWidth 1 (Port output data)  
        .equ GPIOA_ODR15_Shift, 15   @ bitWidth 1 (Port output data)  
 
    .equ GPIOA_BSRR, GPIOA_BASE + 0x10 @ (Port bit set/reset register  GPIOn_BSRR) 
        .equ GPIOA_BS0_Shift, 0   @ bitWidth 1 (Set bit 0)  
        .equ GPIOA_BS1_Shift, 1   @ bitWidth 1 (Set bit 1)  
        .equ GPIOA_BS2_Shift, 2   @ bitWidth 1 (Set bit 1)  
        .equ GPIOA_BS3_Shift, 3   @ bitWidth 1 (Set bit 3)  
        .equ GPIOA_BS4_Shift, 4   @ bitWidth 1 (Set bit 4)  
        .equ GPIOA_BS5_Shift, 5   @ bitWidth 1 (Set bit 5)  
        .equ GPIOA_BS6_Shift, 6   @ bitWidth 1 (Set bit 6)  
        .equ GPIOA_BS7_Shift, 7   @ bitWidth 1 (Set bit 7)  
        .equ GPIOA_BS8_Shift, 8   @ bitWidth 1 (Set bit 8)  
        .equ GPIOA_BS9_Shift, 9   @ bitWidth 1 (Set bit 9)  
        .equ GPIOA_BS10_Shift, 10   @ bitWidth 1 (Set bit 10)  
        .equ GPIOA_BS11_Shift, 11   @ bitWidth 1 (Set bit 11)  
        .equ GPIOA_BS12_Shift, 12   @ bitWidth 1 (Set bit 12)  
        .equ GPIOA_BS13_Shift, 13   @ bitWidth 1 (Set bit 13)  
        .equ GPIOA_BS14_Shift, 14   @ bitWidth 1 (Set bit 14)  
        .equ GPIOA_BS15_Shift, 15   @ bitWidth 1 (Set bit 15)  
        .equ GPIOA_BR0_Shift, 16   @ bitWidth 1 (Reset bit 0)  
        .equ GPIOA_BR1_Shift, 17   @ bitWidth 1 (Reset bit 1)  
        .equ GPIOA_BR2_Shift, 18   @ bitWidth 1 (Reset bit 2)  
        .equ GPIOA_BR3_Shift, 19   @ bitWidth 1 (Reset bit 3)  
        .equ GPIOA_BR4_Shift, 20   @ bitWidth 1 (Reset bit 4)  
        .equ GPIOA_BR5_Shift, 21   @ bitWidth 1 (Reset bit 5)  
        .equ GPIOA_BR6_Shift, 22   @ bitWidth 1 (Reset bit 6)  
        .equ GPIOA_BR7_Shift, 23   @ bitWidth 1 (Reset bit 7)  
        .equ GPIOA_BR8_Shift, 24   @ bitWidth 1 (Reset bit 8)  
        .equ GPIOA_BR9_Shift, 25   @ bitWidth 1 (Reset bit 9)  
        .equ GPIOA_BR10_Shift, 26   @ bitWidth 1 (Reset bit 10)  
        .equ GPIOA_BR11_Shift, 27   @ bitWidth 1 (Reset bit 11)  
        .equ GPIOA_BR12_Shift, 28   @ bitWidth 1 (Reset bit 12)  
        .equ GPIOA_BR13_Shift, 29   @ bitWidth 1 (Reset bit 13)  
        .equ GPIOA_BR14_Shift, 30   @ bitWidth 1 (Reset bit 14)  
        .equ GPIOA_BR15_Shift, 31   @ bitWidth 1 (Reset bit 15)  
 
    .equ GPIOA_BRR, GPIOA_BASE + 0x14 @ (Port bit reset register  GPIOn_BRR) 
        .equ GPIOA_BR0_Shift, 0   @ bitWidth 1 (Reset bit 0)  
        .equ GPIOA_BR1_Shift, 1   @ bitWidth 1 (Reset bit 1)  
        .equ GPIOA_BR2_Shift, 2   @ bitWidth 1 (Reset bit 1)  
        .equ GPIOA_BR3_Shift, 3   @ bitWidth 1 (Reset bit 3)  
        .equ GPIOA_BR4_Shift, 4   @ bitWidth 1 (Reset bit 4)  
        .equ GPIOA_BR5_Shift, 5   @ bitWidth 1 (Reset bit 5)  
        .equ GPIOA_BR6_Shift, 6   @ bitWidth 1 (Reset bit 6)  
        .equ GPIOA_BR7_Shift, 7   @ bitWidth 1 (Reset bit 7)  
        .equ GPIOA_BR8_Shift, 8   @ bitWidth 1 (Reset bit 8)  
        .equ GPIOA_BR9_Shift, 9   @ bitWidth 1 (Reset bit 9)  
        .equ GPIOA_BR10_Shift, 10   @ bitWidth 1 (Reset bit 10)  
        .equ GPIOA_BR11_Shift, 11   @ bitWidth 1 (Reset bit 11)  
        .equ GPIOA_BR12_Shift, 12   @ bitWidth 1 (Reset bit 12)  
        .equ GPIOA_BR13_Shift, 13   @ bitWidth 1 (Reset bit 13)  
        .equ GPIOA_BR14_Shift, 14   @ bitWidth 1 (Reset bit 14)  
        .equ GPIOA_BR15_Shift, 15   @ bitWidth 1 (Reset bit 15)  
 
    .equ GPIOA_LCKR, GPIOA_BASE + 0x18 @ (Port configuration lock  register) 
        .equ GPIOA_LCK0_Shift, 0   @ bitWidth 1 (Port A Lock bit 0)  
        .equ GPIOA_LCK1_Shift, 1   @ bitWidth 1 (Port A Lock bit 1)  
        .equ GPIOA_LCK2_Shift, 2   @ bitWidth 1 (Port A Lock bit 2)  
        .equ GPIOA_LCK3_Shift, 3   @ bitWidth 1 (Port A Lock bit 3)  
        .equ GPIOA_LCK4_Shift, 4   @ bitWidth 1 (Port A Lock bit 4)  
        .equ GPIOA_LCK5_Shift, 5   @ bitWidth 1 (Port A Lock bit 5)  
        .equ GPIOA_LCK6_Shift, 6   @ bitWidth 1 (Port A Lock bit 6)  
        .equ GPIOA_LCK7_Shift, 7   @ bitWidth 1 (Port A Lock bit 7)  
        .equ GPIOA_LCK8_Shift, 8   @ bitWidth 1 (Port A Lock bit 8)  
        .equ GPIOA_LCK9_Shift, 9   @ bitWidth 1 (Port A Lock bit 9)  
        .equ GPIOA_LCK10_Shift, 10   @ bitWidth 1 (Port A Lock bit 10)  
        .equ GPIOA_LCK11_Shift, 11   @ bitWidth 1 (Port A Lock bit 11)  
        .equ GPIOA_LCK12_Shift, 12   @ bitWidth 1 (Port A Lock bit 12)  
        .equ GPIOA_LCK13_Shift, 13   @ bitWidth 1 (Port A Lock bit 13)  
        .equ GPIOA_LCK14_Shift, 14   @ bitWidth 1 (Port A Lock bit 14)  
        .equ GPIOA_LCK15_Shift, 15   @ bitWidth 1 (Port A Lock bit 15)  
        .equ GPIOA_LCKK_Shift, 16   @ bitWidth 1 (Lock key)  
 

@=========================== GPIOB ===========================@
.equ GPIOB_BASE, 0x40010C00 @ (General purpose I/O) 
    .equ GPIOB_CRL, GPIOB_BASE + 0x0 @ (Port configuration register low  GPIOn_CRL) 
        .equ GPIOB_MODE0_Shift, 0   @ bitWidth 2 (Port n.0 mode bits)  
        .equ GPIOB_CNF0_Shift, 2   @ bitWidth 2 (Port n.0 configuration  bits)  
        .equ GPIOB_MODE1_Shift, 4   @ bitWidth 2 (Port n.1 mode bits)  
        .equ GPIOB_CNF1_Shift, 6   @ bitWidth 2 (Port n.1 configuration  bits)  
        .equ GPIOB_MODE2_Shift, 8   @ bitWidth 2 (Port n.2 mode bits)  
        .equ GPIOB_CNF2_Shift, 10   @ bitWidth 2 (Port n.2 configuration  bits)  
        .equ GPIOB_MODE3_Shift, 12   @ bitWidth 2 (Port n.3 mode bits)  
        .equ GPIOB_CNF3_Shift, 14   @ bitWidth 2 (Port n.3 configuration  bits)  
        .equ GPIOB_MODE4_Shift, 16   @ bitWidth 2 (Port n.4 mode bits)  
        .equ GPIOB_CNF4_Shift, 18   @ bitWidth 2 (Port n.4 configuration  bits)  
        .equ GPIOB_MODE5_Shift, 20   @ bitWidth 2 (Port n.5 mode bits)  
        .equ GPIOB_CNF5_Shift, 22   @ bitWidth 2 (Port n.5 configuration  bits)  
        .equ GPIOB_MODE6_Shift, 24   @ bitWidth 2 (Port n.6 mode bits)  
        .equ GPIOB_CNF6_Shift, 26   @ bitWidth 2 (Port n.6 configuration  bits)  
        .equ GPIOB_MODE7_Shift, 28   @ bitWidth 2 (Port n.7 mode bits)  
        .equ GPIOB_CNF7_Shift, 30   @ bitWidth 2 (Port n.7 configuration  bits)  
 
    .equ GPIOB_CRH, GPIOB_BASE + 0x4 @ (Port configuration register high  GPIOn_CRL) 
        .equ GPIOB_MODE8_Shift, 0   @ bitWidth 2 (Port n.8 mode bits)  
        .equ GPIOB_CNF8_Shift, 2   @ bitWidth 2 (Port n.8 configuration  bits)  
        .equ GPIOB_MODE9_Shift, 4   @ bitWidth 2 (Port n.9 mode bits)  
        .equ GPIOB_CNF9_Shift, 6   @ bitWidth 2 (Port n.9 configuration  bits)  
        .equ GPIOB_MODE10_Shift, 8   @ bitWidth 2 (Port n.10 mode bits)  
        .equ GPIOB_CNF10_Shift, 10   @ bitWidth 2 (Port n.10 configuration  bits)  
        .equ GPIOB_MODE11_Shift, 12   @ bitWidth 2 (Port n.11 mode bits)  
        .equ GPIOB_CNF11_Shift, 14   @ bitWidth 2 (Port n.11 configuration  bits)  
        .equ GPIOB_MODE12_Shift, 16   @ bitWidth 2 (Port n.12 mode bits)  
        .equ GPIOB_CNF12_Shift, 18   @ bitWidth 2 (Port n.12 configuration  bits)  
        .equ GPIOB_MODE13_Shift, 20   @ bitWidth 2 (Port n.13 mode bits)  
        .equ GPIOB_CNF13_Shift, 22   @ bitWidth 2 (Port n.13 configuration  bits)  
        .equ GPIOB_MODE14_Shift, 24   @ bitWidth 2 (Port n.14 mode bits)  
        .equ GPIOB_CNF14_Shift, 26   @ bitWidth 2 (Port n.14 configuration  bits)  
        .equ GPIOB_MODE15_Shift, 28   @ bitWidth 2 (Port n.15 mode bits)  
        .equ GPIOB_CNF15_Shift, 30   @ bitWidth 2 (Port n.15 configuration  bits)  
 
    .equ GPIOB_IDR, GPIOB_BASE + 0x8 @ (Port input data register  GPIOn_IDR) 
        .equ GPIOB_IDR0_Shift, 0   @ bitWidth 1 (Port input data)  
        .equ GPIOB_IDR1_Shift, 1   @ bitWidth 1 (Port input data)  
        .equ GPIOB_IDR2_Shift, 2   @ bitWidth 1 (Port input data)  
        .equ GPIOB_IDR3_Shift, 3   @ bitWidth 1 (Port input data)  
        .equ GPIOB_IDR4_Shift, 4   @ bitWidth 1 (Port input data)  
        .equ GPIOB_IDR5_Shift, 5   @ bitWidth 1 (Port input data)  
        .equ GPIOB_IDR6_Shift, 6   @ bitWidth 1 (Port input data)  
        .equ GPIOB_IDR7_Shift, 7   @ bitWidth 1 (Port input data)  
        .equ GPIOB_IDR8_Shift, 8   @ bitWidth 1 (Port input data)  
        .equ GPIOB_IDR9_Shift, 9   @ bitWidth 1 (Port input data)  
        .equ GPIOB_IDR10_Shift, 10   @ bitWidth 1 (Port input data)  
        .equ GPIOB_IDR11_Shift, 11   @ bitWidth 1 (Port input data)  
        .equ GPIOB_IDR12_Shift, 12   @ bitWidth 1 (Port input data)  
        .equ GPIOB_IDR13_Shift, 13   @ bitWidth 1 (Port input data)  
        .equ GPIOB_IDR14_Shift, 14   @ bitWidth 1 (Port input data)  
        .equ GPIOB_IDR15_Shift, 15   @ bitWidth 1 (Port input data)  
 
    .equ GPIOB_ODR, GPIOB_BASE + 0xC @ (Port output data register  GPIOn_ODR) 
        .equ GPIOB_ODR0_Shift, 0   @ bitWidth 1 (Port output data)  
        .equ GPIOB_ODR1_Shift, 1   @ bitWidth 1 (Port output data)  
        .equ GPIOB_ODR2_Shift, 2   @ bitWidth 1 (Port output data)  
        .equ GPIOB_ODR3_Shift, 3   @ bitWidth 1 (Port output data)  
        .equ GPIOB_ODR4_Shift, 4   @ bitWidth 1 (Port output data)  
        .equ GPIOB_ODR5_Shift, 5   @ bitWidth 1 (Port output data)  
        .equ GPIOB_ODR6_Shift, 6   @ bitWidth 1 (Port output data)  
        .equ GPIOB_ODR7_Shift, 7   @ bitWidth 1 (Port output data)  
        .equ GPIOB_ODR8_Shift, 8   @ bitWidth 1 (Port output data)  
        .equ GPIOB_ODR9_Shift, 9   @ bitWidth 1 (Port output data)  
        .equ GPIOB_ODR10_Shift, 10   @ bitWidth 1 (Port output data)  
        .equ GPIOB_ODR11_Shift, 11   @ bitWidth 1 (Port output data)  
        .equ GPIOB_ODR12_Shift, 12   @ bitWidth 1 (Port output data)  
        .equ GPIOB_ODR13_Shift, 13   @ bitWidth 1 (Port output data)  
        .equ GPIOB_ODR14_Shift, 14   @ bitWidth 1 (Port output data)  
        .equ GPIOB_ODR15_Shift, 15   @ bitWidth 1 (Port output data)  
 
    .equ GPIOB_BSRR, GPIOB_BASE + 0x10 @ (Port bit set/reset register  GPIOn_BSRR) 
        .equ GPIOB_BS0_Shift, 0   @ bitWidth 1 (Set bit 0)  
        .equ GPIOB_BS1_Shift, 1   @ bitWidth 1 (Set bit 1)  
        .equ GPIOB_BS2_Shift, 2   @ bitWidth 1 (Set bit 1)  
        .equ GPIOB_BS3_Shift, 3   @ bitWidth 1 (Set bit 3)  
        .equ GPIOB_BS4_Shift, 4   @ bitWidth 1 (Set bit 4)  
        .equ GPIOB_BS5_Shift, 5   @ bitWidth 1 (Set bit 5)  
        .equ GPIOB_BS6_Shift, 6   @ bitWidth 1 (Set bit 6)  
        .equ GPIOB_BS7_Shift, 7   @ bitWidth 1 (Set bit 7)  
        .equ GPIOB_BS8_Shift, 8   @ bitWidth 1 (Set bit 8)  
        .equ GPIOB_BS9_Shift, 9   @ bitWidth 1 (Set bit 9)  
        .equ GPIOB_BS10_Shift, 10   @ bitWidth 1 (Set bit 10)  
        .equ GPIOB_BS11_Shift, 11   @ bitWidth 1 (Set bit 11)  
        .equ GPIOB_BS12_Shift, 12   @ bitWidth 1 (Set bit 12)  
        .equ GPIOB_BS13_Shift, 13   @ bitWidth 1 (Set bit 13)  
        .equ GPIOB_BS14_Shift, 14   @ bitWidth 1 (Set bit 14)  
        .equ GPIOB_BS15_Shift, 15   @ bitWidth 1 (Set bit 15)  
        .equ GPIOB_BR0_Shift, 16   @ bitWidth 1 (Reset bit 0)  
        .equ GPIOB_BR1_Shift, 17   @ bitWidth 1 (Reset bit 1)  
        .equ GPIOB_BR2_Shift, 18   @ bitWidth 1 (Reset bit 2)  
        .equ GPIOB_BR3_Shift, 19   @ bitWidth 1 (Reset bit 3)  
        .equ GPIOB_BR4_Shift, 20   @ bitWidth 1 (Reset bit 4)  
        .equ GPIOB_BR5_Shift, 21   @ bitWidth 1 (Reset bit 5)  
        .equ GPIOB_BR6_Shift, 22   @ bitWidth 1 (Reset bit 6)  
        .equ GPIOB_BR7_Shift, 23   @ bitWidth 1 (Reset bit 7)  
        .equ GPIOB_BR8_Shift, 24   @ bitWidth 1 (Reset bit 8)  
        .equ GPIOB_BR9_Shift, 25   @ bitWidth 1 (Reset bit 9)  
        .equ GPIOB_BR10_Shift, 26   @ bitWidth 1 (Reset bit 10)  
        .equ GPIOB_BR11_Shift, 27   @ bitWidth 1 (Reset bit 11)  
        .equ GPIOB_BR12_Shift, 28   @ bitWidth 1 (Reset bit 12)  
        .equ GPIOB_BR13_Shift, 29   @ bitWidth 1 (Reset bit 13)  
        .equ GPIOB_BR14_Shift, 30   @ bitWidth 1 (Reset bit 14)  
        .equ GPIOB_BR15_Shift, 31   @ bitWidth 1 (Reset bit 15)  
 
    .equ GPIOB_BRR, GPIOB_BASE + 0x14 @ (Port bit reset register  GPIOn_BRR) 
        .equ GPIOB_BR0_Shift, 0   @ bitWidth 1 (Reset bit 0)  
        .equ GPIOB_BR1_Shift, 1   @ bitWidth 1 (Reset bit 1)  
        .equ GPIOB_BR2_Shift, 2   @ bitWidth 1 (Reset bit 1)  
        .equ GPIOB_BR3_Shift, 3   @ bitWidth 1 (Reset bit 3)  
        .equ GPIOB_BR4_Shift, 4   @ bitWidth 1 (Reset bit 4)  
        .equ GPIOB_BR5_Shift, 5   @ bitWidth 1 (Reset bit 5)  
        .equ GPIOB_BR6_Shift, 6   @ bitWidth 1 (Reset bit 6)  
        .equ GPIOB_BR7_Shift, 7   @ bitWidth 1 (Reset bit 7)  
        .equ GPIOB_BR8_Shift, 8   @ bitWidth 1 (Reset bit 8)  
        .equ GPIOB_BR9_Shift, 9   @ bitWidth 1 (Reset bit 9)  
        .equ GPIOB_BR10_Shift, 10   @ bitWidth 1 (Reset bit 10)  
        .equ GPIOB_BR11_Shift, 11   @ bitWidth 1 (Reset bit 11)  
        .equ GPIOB_BR12_Shift, 12   @ bitWidth 1 (Reset bit 12)  
        .equ GPIOB_BR13_Shift, 13   @ bitWidth 1 (Reset bit 13)  
        .equ GPIOB_BR14_Shift, 14   @ bitWidth 1 (Reset bit 14)  
        .equ GPIOB_BR15_Shift, 15   @ bitWidth 1 (Reset bit 15)  
 
    .equ GPIOB_LCKR, GPIOB_BASE + 0x18 @ (Port configuration lock  register) 
        .equ GPIOB_LCK0_Shift, 0   @ bitWidth 1 (Port A Lock bit 0)  
        .equ GPIOB_LCK1_Shift, 1   @ bitWidth 1 (Port A Lock bit 1)  
        .equ GPIOB_LCK2_Shift, 2   @ bitWidth 1 (Port A Lock bit 2)  
        .equ GPIOB_LCK3_Shift, 3   @ bitWidth 1 (Port A Lock bit 3)  
        .equ GPIOB_LCK4_Shift, 4   @ bitWidth 1 (Port A Lock bit 4)  
        .equ GPIOB_LCK5_Shift, 5   @ bitWidth 1 (Port A Lock bit 5)  
        .equ GPIOB_LCK6_Shift, 6   @ bitWidth 1 (Port A Lock bit 6)  
        .equ GPIOB_LCK7_Shift, 7   @ bitWidth 1 (Port A Lock bit 7)  
        .equ GPIOB_LCK8_Shift, 8   @ bitWidth 1 (Port A Lock bit 8)  
        .equ GPIOB_LCK9_Shift, 9   @ bitWidth 1 (Port A Lock bit 9)  
        .equ GPIOB_LCK10_Shift, 10   @ bitWidth 1 (Port A Lock bit 10)  
        .equ GPIOB_LCK11_Shift, 11   @ bitWidth 1 (Port A Lock bit 11)  
        .equ GPIOB_LCK12_Shift, 12   @ bitWidth 1 (Port A Lock bit 12)  
        .equ GPIOB_LCK13_Shift, 13   @ bitWidth 1 (Port A Lock bit 13)  
        .equ GPIOB_LCK14_Shift, 14   @ bitWidth 1 (Port A Lock bit 14)  
        .equ GPIOB_LCK15_Shift, 15   @ bitWidth 1 (Port A Lock bit 15)  
        .equ GPIOB_LCKK_Shift, 16   @ bitWidth 1 (Lock key)  
 

@=========================== GPIOC ===========================@
.equ GPIOC_BASE, 0x40011000 @ (General purpose I/O) 
    .equ GPIOC_CRL, GPIOC_BASE + 0x0 @ (Port configuration register low  GPIOn_CRL) 
        .equ GPIOC_MODE0_Shift, 0   @ bitWidth 2 (Port n.0 mode bits)  
        .equ GPIOC_CNF0_Shift, 2   @ bitWidth 2 (Port n.0 configuration  bits)  
        .equ GPIOC_MODE1_Shift, 4   @ bitWidth 2 (Port n.1 mode bits)  
        .equ GPIOC_CNF1_Shift, 6   @ bitWidth 2 (Port n.1 configuration  bits)  
        .equ GPIOC_MODE2_Shift, 8   @ bitWidth 2 (Port n.2 mode bits)  
        .equ GPIOC_CNF2_Shift, 10   @ bitWidth 2 (Port n.2 configuration  bits)  
        .equ GPIOC_MODE3_Shift, 12   @ bitWidth 2 (Port n.3 mode bits)  
        .equ GPIOC_CNF3_Shift, 14   @ bitWidth 2 (Port n.3 configuration  bits)  
        .equ GPIOC_MODE4_Shift, 16   @ bitWidth 2 (Port n.4 mode bits)  
        .equ GPIOC_CNF4_Shift, 18   @ bitWidth 2 (Port n.4 configuration  bits)  
        .equ GPIOC_MODE5_Shift, 20   @ bitWidth 2 (Port n.5 mode bits)  
        .equ GPIOC_CNF5_Shift, 22   @ bitWidth 2 (Port n.5 configuration  bits)  
        .equ GPIOC_MODE6_Shift, 24   @ bitWidth 2 (Port n.6 mode bits)  
        .equ GPIOC_CNF6_Shift, 26   @ bitWidth 2 (Port n.6 configuration  bits)  
        .equ GPIOC_MODE7_Shift, 28   @ bitWidth 2 (Port n.7 mode bits)  
        .equ GPIOC_CNF7_Shift, 30   @ bitWidth 2 (Port n.7 configuration  bits)  
 
    .equ GPIOC_CRH, GPIOC_BASE + 0x4 @ (Port configuration register high  GPIOn_CRL) 
        .equ GPIOC_MODE8_Shift, 0   @ bitWidth 2 (Port n.8 mode bits)  
        .equ GPIOC_CNF8_Shift, 2   @ bitWidth 2 (Port n.8 configuration  bits)  
        .equ GPIOC_MODE9_Shift, 4   @ bitWidth 2 (Port n.9 mode bits)  
        .equ GPIOC_CNF9_Shift, 6   @ bitWidth 2 (Port n.9 configuration  bits)  
        .equ GPIOC_MODE10_Shift, 8   @ bitWidth 2 (Port n.10 mode bits)  
        .equ GPIOC_CNF10_Shift, 10   @ bitWidth 2 (Port n.10 configuration  bits)  
        .equ GPIOC_MODE11_Shift, 12   @ bitWidth 2 (Port n.11 mode bits)  
        .equ GPIOC_CNF11_Shift, 14   @ bitWidth 2 (Port n.11 configuration  bits)  
        .equ GPIOC_MODE12_Shift, 16   @ bitWidth 2 (Port n.12 mode bits)  
        .equ GPIOC_CNF12_Shift, 18   @ bitWidth 2 (Port n.12 configuration  bits)  
        .equ GPIOC_MODE13_Shift, 20   @ bitWidth 2 (Port n.13 mode bits)  
        .equ GPIOC_CNF13_Shift, 22   @ bitWidth 2 (Port n.13 configuration  bits)  
        .equ GPIOC_MODE14_Shift, 24   @ bitWidth 2 (Port n.14 mode bits)  
        .equ GPIOC_CNF14_Shift, 26   @ bitWidth 2 (Port n.14 configuration  bits)  
        .equ GPIOC_MODE15_Shift, 28   @ bitWidth 2 (Port n.15 mode bits)  
        .equ GPIOC_CNF15_Shift, 30   @ bitWidth 2 (Port n.15 configuration  bits)  
 
    .equ GPIOC_IDR, GPIOC_BASE + 0x8 @ (Port input data register  GPIOn_IDR) 
        .equ GPIOC_IDR0_Shift, 0   @ bitWidth 1 (Port input data)  
        .equ GPIOC_IDR1_Shift, 1   @ bitWidth 1 (Port input data)  
        .equ GPIOC_IDR2_Shift, 2   @ bitWidth 1 (Port input data)  
        .equ GPIOC_IDR3_Shift, 3   @ bitWidth 1 (Port input data)  
        .equ GPIOC_IDR4_Shift, 4   @ bitWidth 1 (Port input data)  
        .equ GPIOC_IDR5_Shift, 5   @ bitWidth 1 (Port input data)  
        .equ GPIOC_IDR6_Shift, 6   @ bitWidth 1 (Port input data)  
        .equ GPIOC_IDR7_Shift, 7   @ bitWidth 1 (Port input data)  
        .equ GPIOC_IDR8_Shift, 8   @ bitWidth 1 (Port input data)  
        .equ GPIOC_IDR9_Shift, 9   @ bitWidth 1 (Port input data)  
        .equ GPIOC_IDR10_Shift, 10   @ bitWidth 1 (Port input data)  
        .equ GPIOC_IDR11_Shift, 11   @ bitWidth 1 (Port input data)  
        .equ GPIOC_IDR12_Shift, 12   @ bitWidth 1 (Port input data)  
        .equ GPIOC_IDR13_Shift, 13   @ bitWidth 1 (Port input data)  
        .equ GPIOC_IDR14_Shift, 14   @ bitWidth 1 (Port input data)  
        .equ GPIOC_IDR15_Shift, 15   @ bitWidth 1 (Port input data)  
 
    .equ GPIOC_ODR, GPIOC_BASE + 0xC @ (Port output data register  GPIOn_ODR) 
        .equ GPIOC_ODR0_Shift, 0   @ bitWidth 1 (Port output data)  
        .equ GPIOC_ODR1_Shift, 1   @ bitWidth 1 (Port output data)  
        .equ GPIOC_ODR2_Shift, 2   @ bitWidth 1 (Port output data)  
        .equ GPIOC_ODR3_Shift, 3   @ bitWidth 1 (Port output data)  
        .equ GPIOC_ODR4_Shift, 4   @ bitWidth 1 (Port output data)  
        .equ GPIOC_ODR5_Shift, 5   @ bitWidth 1 (Port output data)  
        .equ GPIOC_ODR6_Shift, 6   @ bitWidth 1 (Port output data)  
        .equ GPIOC_ODR7_Shift, 7   @ bitWidth 1 (Port output data)  
        .equ GPIOC_ODR8_Shift, 8   @ bitWidth 1 (Port output data)  
        .equ GPIOC_ODR9_Shift, 9   @ bitWidth 1 (Port output data)  
        .equ GPIOC_ODR10_Shift, 10   @ bitWidth 1 (Port output data)  
        .equ GPIOC_ODR11_Shift, 11   @ bitWidth 1 (Port output data)  
        .equ GPIOC_ODR12_Shift, 12   @ bitWidth 1 (Port output data)  
        .equ GPIOC_ODR13_Shift, 13   @ bitWidth 1 (Port output data)  
        .equ GPIOC_ODR14_Shift, 14   @ bitWidth 1 (Port output data)  
        .equ GPIOC_ODR15_Shift, 15   @ bitWidth 1 (Port output data)  
 
    .equ GPIOC_BSRR, GPIOC_BASE + 0x10 @ (Port bit set/reset register  GPIOn_BSRR) 
        .equ GPIOC_BS0_Shift, 0   @ bitWidth 1 (Set bit 0)  
        .equ GPIOC_BS1_Shift, 1   @ bitWidth 1 (Set bit 1)  
        .equ GPIOC_BS2_Shift, 2   @ bitWidth 1 (Set bit 1)  
        .equ GPIOC_BS3_Shift, 3   @ bitWidth 1 (Set bit 3)  
        .equ GPIOC_BS4_Shift, 4   @ bitWidth 1 (Set bit 4)  
        .equ GPIOC_BS5_Shift, 5   @ bitWidth 1 (Set bit 5)  
        .equ GPIOC_BS6_Shift, 6   @ bitWidth 1 (Set bit 6)  
        .equ GPIOC_BS7_Shift, 7   @ bitWidth 1 (Set bit 7)  
        .equ GPIOC_BS8_Shift, 8   @ bitWidth 1 (Set bit 8)  
        .equ GPIOC_BS9_Shift, 9   @ bitWidth 1 (Set bit 9)  
        .equ GPIOC_BS10_Shift, 10   @ bitWidth 1 (Set bit 10)  
        .equ GPIOC_BS11_Shift, 11   @ bitWidth 1 (Set bit 11)  
        .equ GPIOC_BS12_Shift, 12   @ bitWidth 1 (Set bit 12)  
        .equ GPIOC_BS13_Shift, 13   @ bitWidth 1 (Set bit 13)  
        .equ GPIOC_BS14_Shift, 14   @ bitWidth 1 (Set bit 14)  
        .equ GPIOC_BS15_Shift, 15   @ bitWidth 1 (Set bit 15)  
        .equ GPIOC_BR0_Shift, 16   @ bitWidth 1 (Reset bit 0)  
        .equ GPIOC_BR1_Shift, 17   @ bitWidth 1 (Reset bit 1)  
        .equ GPIOC_BR2_Shift, 18   @ bitWidth 1 (Reset bit 2)  
        .equ GPIOC_BR3_Shift, 19   @ bitWidth 1 (Reset bit 3)  
        .equ GPIOC_BR4_Shift, 20   @ bitWidth 1 (Reset bit 4)  
        .equ GPIOC_BR5_Shift, 21   @ bitWidth 1 (Reset bit 5)  
        .equ GPIOC_BR6_Shift, 22   @ bitWidth 1 (Reset bit 6)  
        .equ GPIOC_BR7_Shift, 23   @ bitWidth 1 (Reset bit 7)  
        .equ GPIOC_BR8_Shift, 24   @ bitWidth 1 (Reset bit 8)  
        .equ GPIOC_BR9_Shift, 25   @ bitWidth 1 (Reset bit 9)  
        .equ GPIOC_BR10_Shift, 26   @ bitWidth 1 (Reset bit 10)  
        .equ GPIOC_BR11_Shift, 27   @ bitWidth 1 (Reset bit 11)  
        .equ GPIOC_BR12_Shift, 28   @ bitWidth 1 (Reset bit 12)  
        .equ GPIOC_BR13_Shift, 29   @ bitWidth 1 (Reset bit 13)  
        .equ GPIOC_BR14_Shift, 30   @ bitWidth 1 (Reset bit 14)  
        .equ GPIOC_BR15_Shift, 31   @ bitWidth 1 (Reset bit 15)  
 
    .equ GPIOC_BRR, GPIOC_BASE + 0x14 @ (Port bit reset register  GPIOn_BRR) 
        .equ GPIOC_BR0_Shift, 0   @ bitWidth 1 (Reset bit 0)  
        .equ GPIOC_BR1_Shift, 1   @ bitWidth 1 (Reset bit 1)  
        .equ GPIOC_BR2_Shift, 2   @ bitWidth 1 (Reset bit 1)  
        .equ GPIOC_BR3_Shift, 3   @ bitWidth 1 (Reset bit 3)  
        .equ GPIOC_BR4_Shift, 4   @ bitWidth 1 (Reset bit 4)  
        .equ GPIOC_BR5_Shift, 5   @ bitWidth 1 (Reset bit 5)  
        .equ GPIOC_BR6_Shift, 6   @ bitWidth 1 (Reset bit 6)  
        .equ GPIOC_BR7_Shift, 7   @ bitWidth 1 (Reset bit 7)  
        .equ GPIOC_BR8_Shift, 8   @ bitWidth 1 (Reset bit 8)  
        .equ GPIOC_BR9_Shift, 9   @ bitWidth 1 (Reset bit 9)  
        .equ GPIOC_BR10_Shift, 10   @ bitWidth 1 (Reset bit 10)  
        .equ GPIOC_BR11_Shift, 11   @ bitWidth 1 (Reset bit 11)  
        .equ GPIOC_BR12_Shift, 12   @ bitWidth 1 (Reset bit 12)  
        .equ GPIOC_BR13_Shift, 13   @ bitWidth 1 (Reset bit 13)  
        .equ GPIOC_BR14_Shift, 14   @ bitWidth 1 (Reset bit 14)  
        .equ GPIOC_BR15_Shift, 15   @ bitWidth 1 (Reset bit 15)  
 
    .equ GPIOC_LCKR, GPIOC_BASE + 0x18 @ (Port configuration lock  register) 
        .equ GPIOC_LCK0_Shift, 0   @ bitWidth 1 (Port A Lock bit 0)  
        .equ GPIOC_LCK1_Shift, 1   @ bitWidth 1 (Port A Lock bit 1)  
        .equ GPIOC_LCK2_Shift, 2   @ bitWidth 1 (Port A Lock bit 2)  
        .equ GPIOC_LCK3_Shift, 3   @ bitWidth 1 (Port A Lock bit 3)  
        .equ GPIOC_LCK4_Shift, 4   @ bitWidth 1 (Port A Lock bit 4)  
        .equ GPIOC_LCK5_Shift, 5   @ bitWidth 1 (Port A Lock bit 5)  
        .equ GPIOC_LCK6_Shift, 6   @ bitWidth 1 (Port A Lock bit 6)  
        .equ GPIOC_LCK7_Shift, 7   @ bitWidth 1 (Port A Lock bit 7)  
        .equ GPIOC_LCK8_Shift, 8   @ bitWidth 1 (Port A Lock bit 8)  
        .equ GPIOC_LCK9_Shift, 9   @ bitWidth 1 (Port A Lock bit 9)  
        .equ GPIOC_LCK10_Shift, 10   @ bitWidth 1 (Port A Lock bit 10)  
        .equ GPIOC_LCK11_Shift, 11   @ bitWidth 1 (Port A Lock bit 11)  
        .equ GPIOC_LCK12_Shift, 12   @ bitWidth 1 (Port A Lock bit 12)  
        .equ GPIOC_LCK13_Shift, 13   @ bitWidth 1 (Port A Lock bit 13)  
        .equ GPIOC_LCK14_Shift, 14   @ bitWidth 1 (Port A Lock bit 14)  
        .equ GPIOC_LCK15_Shift, 15   @ bitWidth 1 (Port A Lock bit 15)  
        .equ GPIOC_LCKK_Shift, 16   @ bitWidth 1 (Lock key)  
 

@=========================== GPIOD ===========================@
.equ GPIOD_BASE, 0x40011400 @ (General purpose I/O) 
    .equ GPIOD_CRL, GPIOD_BASE + 0x0 @ (Port configuration register low  GPIOn_CRL) 
        .equ GPIOD_MODE0_Shift, 0   @ bitWidth 2 (Port n.0 mode bits)  
        .equ GPIOD_CNF0_Shift, 2   @ bitWidth 2 (Port n.0 configuration  bits)  
        .equ GPIOD_MODE1_Shift, 4   @ bitWidth 2 (Port n.1 mode bits)  
        .equ GPIOD_CNF1_Shift, 6   @ bitWidth 2 (Port n.1 configuration  bits)  
        .equ GPIOD_MODE2_Shift, 8   @ bitWidth 2 (Port n.2 mode bits)  
        .equ GPIOD_CNF2_Shift, 10   @ bitWidth 2 (Port n.2 configuration  bits)  
        .equ GPIOD_MODE3_Shift, 12   @ bitWidth 2 (Port n.3 mode bits)  
        .equ GPIOD_CNF3_Shift, 14   @ bitWidth 2 (Port n.3 configuration  bits)  
        .equ GPIOD_MODE4_Shift, 16   @ bitWidth 2 (Port n.4 mode bits)  
        .equ GPIOD_CNF4_Shift, 18   @ bitWidth 2 (Port n.4 configuration  bits)  
        .equ GPIOD_MODE5_Shift, 20   @ bitWidth 2 (Port n.5 mode bits)  
        .equ GPIOD_CNF5_Shift, 22   @ bitWidth 2 (Port n.5 configuration  bits)  
        .equ GPIOD_MODE6_Shift, 24   @ bitWidth 2 (Port n.6 mode bits)  
        .equ GPIOD_CNF6_Shift, 26   @ bitWidth 2 (Port n.6 configuration  bits)  
        .equ GPIOD_MODE7_Shift, 28   @ bitWidth 2 (Port n.7 mode bits)  
        .equ GPIOD_CNF7_Shift, 30   @ bitWidth 2 (Port n.7 configuration  bits)  
 
    .equ GPIOD_CRH, GPIOD_BASE + 0x4 @ (Port configuration register high  GPIOn_CRL) 
        .equ GPIOD_MODE8_Shift, 0   @ bitWidth 2 (Port n.8 mode bits)  
        .equ GPIOD_CNF8_Shift, 2   @ bitWidth 2 (Port n.8 configuration  bits)  
        .equ GPIOD_MODE9_Shift, 4   @ bitWidth 2 (Port n.9 mode bits)  
        .equ GPIOD_CNF9_Shift, 6   @ bitWidth 2 (Port n.9 configuration  bits)  
        .equ GPIOD_MODE10_Shift, 8   @ bitWidth 2 (Port n.10 mode bits)  
        .equ GPIOD_CNF10_Shift, 10   @ bitWidth 2 (Port n.10 configuration  bits)  
        .equ GPIOD_MODE11_Shift, 12   @ bitWidth 2 (Port n.11 mode bits)  
        .equ GPIOD_CNF11_Shift, 14   @ bitWidth 2 (Port n.11 configuration  bits)  
        .equ GPIOD_MODE12_Shift, 16   @ bitWidth 2 (Port n.12 mode bits)  
        .equ GPIOD_CNF12_Shift, 18   @ bitWidth 2 (Port n.12 configuration  bits)  
        .equ GPIOD_MODE13_Shift, 20   @ bitWidth 2 (Port n.13 mode bits)  
        .equ GPIOD_CNF13_Shift, 22   @ bitWidth 2 (Port n.13 configuration  bits)  
        .equ GPIOD_MODE14_Shift, 24   @ bitWidth 2 (Port n.14 mode bits)  
        .equ GPIOD_CNF14_Shift, 26   @ bitWidth 2 (Port n.14 configuration  bits)  
        .equ GPIOD_MODE15_Shift, 28   @ bitWidth 2 (Port n.15 mode bits)  
        .equ GPIOD_CNF15_Shift, 30   @ bitWidth 2 (Port n.15 configuration  bits)  
 
    .equ GPIOD_IDR, GPIOD_BASE + 0x8 @ (Port input data register  GPIOn_IDR) 
        .equ GPIOD_IDR0_Shift, 0   @ bitWidth 1 (Port input data)  
        .equ GPIOD_IDR1_Shift, 1   @ bitWidth 1 (Port input data)  
        .equ GPIOD_IDR2_Shift, 2   @ bitWidth 1 (Port input data)  
        .equ GPIOD_IDR3_Shift, 3   @ bitWidth 1 (Port input data)  
        .equ GPIOD_IDR4_Shift, 4   @ bitWidth 1 (Port input data)  
        .equ GPIOD_IDR5_Shift, 5   @ bitWidth 1 (Port input data)  
        .equ GPIOD_IDR6_Shift, 6   @ bitWidth 1 (Port input data)  
        .equ GPIOD_IDR7_Shift, 7   @ bitWidth 1 (Port input data)  
        .equ GPIOD_IDR8_Shift, 8   @ bitWidth 1 (Port input data)  
        .equ GPIOD_IDR9_Shift, 9   @ bitWidth 1 (Port input data)  
        .equ GPIOD_IDR10_Shift, 10   @ bitWidth 1 (Port input data)  
        .equ GPIOD_IDR11_Shift, 11   @ bitWidth 1 (Port input data)  
        .equ GPIOD_IDR12_Shift, 12   @ bitWidth 1 (Port input data)  
        .equ GPIOD_IDR13_Shift, 13   @ bitWidth 1 (Port input data)  
        .equ GPIOD_IDR14_Shift, 14   @ bitWidth 1 (Port input data)  
        .equ GPIOD_IDR15_Shift, 15   @ bitWidth 1 (Port input data)  
 
    .equ GPIOD_ODR, GPIOD_BASE + 0xC @ (Port output data register  GPIOn_ODR) 
        .equ GPIOD_ODR0_Shift, 0   @ bitWidth 1 (Port output data)  
        .equ GPIOD_ODR1_Shift, 1   @ bitWidth 1 (Port output data)  
        .equ GPIOD_ODR2_Shift, 2   @ bitWidth 1 (Port output data)  
        .equ GPIOD_ODR3_Shift, 3   @ bitWidth 1 (Port output data)  
        .equ GPIOD_ODR4_Shift, 4   @ bitWidth 1 (Port output data)  
        .equ GPIOD_ODR5_Shift, 5   @ bitWidth 1 (Port output data)  
        .equ GPIOD_ODR6_Shift, 6   @ bitWidth 1 (Port output data)  
        .equ GPIOD_ODR7_Shift, 7   @ bitWidth 1 (Port output data)  
        .equ GPIOD_ODR8_Shift, 8   @ bitWidth 1 (Port output data)  
        .equ GPIOD_ODR9_Shift, 9   @ bitWidth 1 (Port output data)  
        .equ GPIOD_ODR10_Shift, 10   @ bitWidth 1 (Port output data)  
        .equ GPIOD_ODR11_Shift, 11   @ bitWidth 1 (Port output data)  
        .equ GPIOD_ODR12_Shift, 12   @ bitWidth 1 (Port output data)  
        .equ GPIOD_ODR13_Shift, 13   @ bitWidth 1 (Port output data)  
        .equ GPIOD_ODR14_Shift, 14   @ bitWidth 1 (Port output data)  
        .equ GPIOD_ODR15_Shift, 15   @ bitWidth 1 (Port output data)  
 
    .equ GPIOD_BSRR, GPIOD_BASE + 0x10 @ (Port bit set/reset register  GPIOn_BSRR) 
        .equ GPIOD_BS0_Shift, 0   @ bitWidth 1 (Set bit 0)  
        .equ GPIOD_BS1_Shift, 1   @ bitWidth 1 (Set bit 1)  
        .equ GPIOD_BS2_Shift, 2   @ bitWidth 1 (Set bit 1)  
        .equ GPIOD_BS3_Shift, 3   @ bitWidth 1 (Set bit 3)  
        .equ GPIOD_BS4_Shift, 4   @ bitWidth 1 (Set bit 4)  
        .equ GPIOD_BS5_Shift, 5   @ bitWidth 1 (Set bit 5)  
        .equ GPIOD_BS6_Shift, 6   @ bitWidth 1 (Set bit 6)  
        .equ GPIOD_BS7_Shift, 7   @ bitWidth 1 (Set bit 7)  
        .equ GPIOD_BS8_Shift, 8   @ bitWidth 1 (Set bit 8)  
        .equ GPIOD_BS9_Shift, 9   @ bitWidth 1 (Set bit 9)  
        .equ GPIOD_BS10_Shift, 10   @ bitWidth 1 (Set bit 10)  
        .equ GPIOD_BS11_Shift, 11   @ bitWidth 1 (Set bit 11)  
        .equ GPIOD_BS12_Shift, 12   @ bitWidth 1 (Set bit 12)  
        .equ GPIOD_BS13_Shift, 13   @ bitWidth 1 (Set bit 13)  
        .equ GPIOD_BS14_Shift, 14   @ bitWidth 1 (Set bit 14)  
        .equ GPIOD_BS15_Shift, 15   @ bitWidth 1 (Set bit 15)  
        .equ GPIOD_BR0_Shift, 16   @ bitWidth 1 (Reset bit 0)  
        .equ GPIOD_BR1_Shift, 17   @ bitWidth 1 (Reset bit 1)  
        .equ GPIOD_BR2_Shift, 18   @ bitWidth 1 (Reset bit 2)  
        .equ GPIOD_BR3_Shift, 19   @ bitWidth 1 (Reset bit 3)  
        .equ GPIOD_BR4_Shift, 20   @ bitWidth 1 (Reset bit 4)  
        .equ GPIOD_BR5_Shift, 21   @ bitWidth 1 (Reset bit 5)  
        .equ GPIOD_BR6_Shift, 22   @ bitWidth 1 (Reset bit 6)  
        .equ GPIOD_BR7_Shift, 23   @ bitWidth 1 (Reset bit 7)  
        .equ GPIOD_BR8_Shift, 24   @ bitWidth 1 (Reset bit 8)  
        .equ GPIOD_BR9_Shift, 25   @ bitWidth 1 (Reset bit 9)  
        .equ GPIOD_BR10_Shift, 26   @ bitWidth 1 (Reset bit 10)  
        .equ GPIOD_BR11_Shift, 27   @ bitWidth 1 (Reset bit 11)  
        .equ GPIOD_BR12_Shift, 28   @ bitWidth 1 (Reset bit 12)  
        .equ GPIOD_BR13_Shift, 29   @ bitWidth 1 (Reset bit 13)  
        .equ GPIOD_BR14_Shift, 30   @ bitWidth 1 (Reset bit 14)  
        .equ GPIOD_BR15_Shift, 31   @ bitWidth 1 (Reset bit 15)  
 
    .equ GPIOD_BRR, GPIOD_BASE + 0x14 @ (Port bit reset register  GPIOn_BRR) 
        .equ GPIOD_BR0_Shift, 0   @ bitWidth 1 (Reset bit 0)  
        .equ GPIOD_BR1_Shift, 1   @ bitWidth 1 (Reset bit 1)  
        .equ GPIOD_BR2_Shift, 2   @ bitWidth 1 (Reset bit 1)  
        .equ GPIOD_BR3_Shift, 3   @ bitWidth 1 (Reset bit 3)  
        .equ GPIOD_BR4_Shift, 4   @ bitWidth 1 (Reset bit 4)  
        .equ GPIOD_BR5_Shift, 5   @ bitWidth 1 (Reset bit 5)  
        .equ GPIOD_BR6_Shift, 6   @ bitWidth 1 (Reset bit 6)  
        .equ GPIOD_BR7_Shift, 7   @ bitWidth 1 (Reset bit 7)  
        .equ GPIOD_BR8_Shift, 8   @ bitWidth 1 (Reset bit 8)  
        .equ GPIOD_BR9_Shift, 9   @ bitWidth 1 (Reset bit 9)  
        .equ GPIOD_BR10_Shift, 10   @ bitWidth 1 (Reset bit 10)  
        .equ GPIOD_BR11_Shift, 11   @ bitWidth 1 (Reset bit 11)  
        .equ GPIOD_BR12_Shift, 12   @ bitWidth 1 (Reset bit 12)  
        .equ GPIOD_BR13_Shift, 13   @ bitWidth 1 (Reset bit 13)  
        .equ GPIOD_BR14_Shift, 14   @ bitWidth 1 (Reset bit 14)  
        .equ GPIOD_BR15_Shift, 15   @ bitWidth 1 (Reset bit 15)  
 
    .equ GPIOD_LCKR, GPIOD_BASE + 0x18 @ (Port configuration lock  register) 
        .equ GPIOD_LCK0_Shift, 0   @ bitWidth 1 (Port A Lock bit 0)  
        .equ GPIOD_LCK1_Shift, 1   @ bitWidth 1 (Port A Lock bit 1)  
        .equ GPIOD_LCK2_Shift, 2   @ bitWidth 1 (Port A Lock bit 2)  
        .equ GPIOD_LCK3_Shift, 3   @ bitWidth 1 (Port A Lock bit 3)  
        .equ GPIOD_LCK4_Shift, 4   @ bitWidth 1 (Port A Lock bit 4)  
        .equ GPIOD_LCK5_Shift, 5   @ bitWidth 1 (Port A Lock bit 5)  
        .equ GPIOD_LCK6_Shift, 6   @ bitWidth 1 (Port A Lock bit 6)  
        .equ GPIOD_LCK7_Shift, 7   @ bitWidth 1 (Port A Lock bit 7)  
        .equ GPIOD_LCK8_Shift, 8   @ bitWidth 1 (Port A Lock bit 8)  
        .equ GPIOD_LCK9_Shift, 9   @ bitWidth 1 (Port A Lock bit 9)  
        .equ GPIOD_LCK10_Shift, 10   @ bitWidth 1 (Port A Lock bit 10)  
        .equ GPIOD_LCK11_Shift, 11   @ bitWidth 1 (Port A Lock bit 11)  
        .equ GPIOD_LCK12_Shift, 12   @ bitWidth 1 (Port A Lock bit 12)  
        .equ GPIOD_LCK13_Shift, 13   @ bitWidth 1 (Port A Lock bit 13)  
        .equ GPIOD_LCK14_Shift, 14   @ bitWidth 1 (Port A Lock bit 14)  
        .equ GPIOD_LCK15_Shift, 15   @ bitWidth 1 (Port A Lock bit 15)  
        .equ GPIOD_LCKK_Shift, 16   @ bitWidth 1 (Lock key)  
 

@=========================== GPIOE ===========================@
.equ GPIOE_BASE, 0x40011800 @ (General purpose I/O) 
    .equ GPIOE_CRL, GPIOE_BASE + 0x0 @ (Port configuration register low  GPIOn_CRL) 
        .equ GPIOE_MODE0_Shift, 0   @ bitWidth 2 (Port n.0 mode bits)  
        .equ GPIOE_CNF0_Shift, 2   @ bitWidth 2 (Port n.0 configuration  bits)  
        .equ GPIOE_MODE1_Shift, 4   @ bitWidth 2 (Port n.1 mode bits)  
        .equ GPIOE_CNF1_Shift, 6   @ bitWidth 2 (Port n.1 configuration  bits)  
        .equ GPIOE_MODE2_Shift, 8   @ bitWidth 2 (Port n.2 mode bits)  
        .equ GPIOE_CNF2_Shift, 10   @ bitWidth 2 (Port n.2 configuration  bits)  
        .equ GPIOE_MODE3_Shift, 12   @ bitWidth 2 (Port n.3 mode bits)  
        .equ GPIOE_CNF3_Shift, 14   @ bitWidth 2 (Port n.3 configuration  bits)  
        .equ GPIOE_MODE4_Shift, 16   @ bitWidth 2 (Port n.4 mode bits)  
        .equ GPIOE_CNF4_Shift, 18   @ bitWidth 2 (Port n.4 configuration  bits)  
        .equ GPIOE_MODE5_Shift, 20   @ bitWidth 2 (Port n.5 mode bits)  
        .equ GPIOE_CNF5_Shift, 22   @ bitWidth 2 (Port n.5 configuration  bits)  
        .equ GPIOE_MODE6_Shift, 24   @ bitWidth 2 (Port n.6 mode bits)  
        .equ GPIOE_CNF6_Shift, 26   @ bitWidth 2 (Port n.6 configuration  bits)  
        .equ GPIOE_MODE7_Shift, 28   @ bitWidth 2 (Port n.7 mode bits)  
        .equ GPIOE_CNF7_Shift, 30   @ bitWidth 2 (Port n.7 configuration  bits)  
 
    .equ GPIOE_CRH, GPIOE_BASE + 0x4 @ (Port configuration register high  GPIOn_CRL) 
        .equ GPIOE_MODE8_Shift, 0   @ bitWidth 2 (Port n.8 mode bits)  
        .equ GPIOE_CNF8_Shift, 2   @ bitWidth 2 (Port n.8 configuration  bits)  
        .equ GPIOE_MODE9_Shift, 4   @ bitWidth 2 (Port n.9 mode bits)  
        .equ GPIOE_CNF9_Shift, 6   @ bitWidth 2 (Port n.9 configuration  bits)  
        .equ GPIOE_MODE10_Shift, 8   @ bitWidth 2 (Port n.10 mode bits)  
        .equ GPIOE_CNF10_Shift, 10   @ bitWidth 2 (Port n.10 configuration  bits)  
        .equ GPIOE_MODE11_Shift, 12   @ bitWidth 2 (Port n.11 mode bits)  
        .equ GPIOE_CNF11_Shift, 14   @ bitWidth 2 (Port n.11 configuration  bits)  
        .equ GPIOE_MODE12_Shift, 16   @ bitWidth 2 (Port n.12 mode bits)  
        .equ GPIOE_CNF12_Shift, 18   @ bitWidth 2 (Port n.12 configuration  bits)  
        .equ GPIOE_MODE13_Shift, 20   @ bitWidth 2 (Port n.13 mode bits)  
        .equ GPIOE_CNF13_Shift, 22   @ bitWidth 2 (Port n.13 configuration  bits)  
        .equ GPIOE_MODE14_Shift, 24   @ bitWidth 2 (Port n.14 mode bits)  
        .equ GPIOE_CNF14_Shift, 26   @ bitWidth 2 (Port n.14 configuration  bits)  
        .equ GPIOE_MODE15_Shift, 28   @ bitWidth 2 (Port n.15 mode bits)  
        .equ GPIOE_CNF15_Shift, 30   @ bitWidth 2 (Port n.15 configuration  bits)  
 
    .equ GPIOE_IDR, GPIOE_BASE + 0x8 @ (Port input data register  GPIOn_IDR) 
        .equ GPIOE_IDR0_Shift, 0   @ bitWidth 1 (Port input data)  
        .equ GPIOE_IDR1_Shift, 1   @ bitWidth 1 (Port input data)  
        .equ GPIOE_IDR2_Shift, 2   @ bitWidth 1 (Port input data)  
        .equ GPIOE_IDR3_Shift, 3   @ bitWidth 1 (Port input data)  
        .equ GPIOE_IDR4_Shift, 4   @ bitWidth 1 (Port input data)  
        .equ GPIOE_IDR5_Shift, 5   @ bitWidth 1 (Port input data)  
        .equ GPIOE_IDR6_Shift, 6   @ bitWidth 1 (Port input data)  
        .equ GPIOE_IDR7_Shift, 7   @ bitWidth 1 (Port input data)  
        .equ GPIOE_IDR8_Shift, 8   @ bitWidth 1 (Port input data)  
        .equ GPIOE_IDR9_Shift, 9   @ bitWidth 1 (Port input data)  
        .equ GPIOE_IDR10_Shift, 10   @ bitWidth 1 (Port input data)  
        .equ GPIOE_IDR11_Shift, 11   @ bitWidth 1 (Port input data)  
        .equ GPIOE_IDR12_Shift, 12   @ bitWidth 1 (Port input data)  
        .equ GPIOE_IDR13_Shift, 13   @ bitWidth 1 (Port input data)  
        .equ GPIOE_IDR14_Shift, 14   @ bitWidth 1 (Port input data)  
        .equ GPIOE_IDR15_Shift, 15   @ bitWidth 1 (Port input data)  
 
    .equ GPIOE_ODR, GPIOE_BASE + 0xC @ (Port output data register  GPIOn_ODR) 
        .equ GPIOE_ODR0_Shift, 0   @ bitWidth 1 (Port output data)  
        .equ GPIOE_ODR1_Shift, 1   @ bitWidth 1 (Port output data)  
        .equ GPIOE_ODR2_Shift, 2   @ bitWidth 1 (Port output data)  
        .equ GPIOE_ODR3_Shift, 3   @ bitWidth 1 (Port output data)  
        .equ GPIOE_ODR4_Shift, 4   @ bitWidth 1 (Port output data)  
        .equ GPIOE_ODR5_Shift, 5   @ bitWidth 1 (Port output data)  
        .equ GPIOE_ODR6_Shift, 6   @ bitWidth 1 (Port output data)  
        .equ GPIOE_ODR7_Shift, 7   @ bitWidth 1 (Port output data)  
        .equ GPIOE_ODR8_Shift, 8   @ bitWidth 1 (Port output data)  
        .equ GPIOE_ODR9_Shift, 9   @ bitWidth 1 (Port output data)  
        .equ GPIOE_ODR10_Shift, 10   @ bitWidth 1 (Port output data)  
        .equ GPIOE_ODR11_Shift, 11   @ bitWidth 1 (Port output data)  
        .equ GPIOE_ODR12_Shift, 12   @ bitWidth 1 (Port output data)  
        .equ GPIOE_ODR13_Shift, 13   @ bitWidth 1 (Port output data)  
        .equ GPIOE_ODR14_Shift, 14   @ bitWidth 1 (Port output data)  
        .equ GPIOE_ODR15_Shift, 15   @ bitWidth 1 (Port output data)  
 
    .equ GPIOE_BSRR, GPIOE_BASE + 0x10 @ (Port bit set/reset register  GPIOn_BSRR) 
        .equ GPIOE_BS0_Shift, 0   @ bitWidth 1 (Set bit 0)  
        .equ GPIOE_BS1_Shift, 1   @ bitWidth 1 (Set bit 1)  
        .equ GPIOE_BS2_Shift, 2   @ bitWidth 1 (Set bit 1)  
        .equ GPIOE_BS3_Shift, 3   @ bitWidth 1 (Set bit 3)  
        .equ GPIOE_BS4_Shift, 4   @ bitWidth 1 (Set bit 4)  
        .equ GPIOE_BS5_Shift, 5   @ bitWidth 1 (Set bit 5)  
        .equ GPIOE_BS6_Shift, 6   @ bitWidth 1 (Set bit 6)  
        .equ GPIOE_BS7_Shift, 7   @ bitWidth 1 (Set bit 7)  
        .equ GPIOE_BS8_Shift, 8   @ bitWidth 1 (Set bit 8)  
        .equ GPIOE_BS9_Shift, 9   @ bitWidth 1 (Set bit 9)  
        .equ GPIOE_BS10_Shift, 10   @ bitWidth 1 (Set bit 10)  
        .equ GPIOE_BS11_Shift, 11   @ bitWidth 1 (Set bit 11)  
        .equ GPIOE_BS12_Shift, 12   @ bitWidth 1 (Set bit 12)  
        .equ GPIOE_BS13_Shift, 13   @ bitWidth 1 (Set bit 13)  
        .equ GPIOE_BS14_Shift, 14   @ bitWidth 1 (Set bit 14)  
        .equ GPIOE_BS15_Shift, 15   @ bitWidth 1 (Set bit 15)  
        .equ GPIOE_BR0_Shift, 16   @ bitWidth 1 (Reset bit 0)  
        .equ GPIOE_BR1_Shift, 17   @ bitWidth 1 (Reset bit 1)  
        .equ GPIOE_BR2_Shift, 18   @ bitWidth 1 (Reset bit 2)  
        .equ GPIOE_BR3_Shift, 19   @ bitWidth 1 (Reset bit 3)  
        .equ GPIOE_BR4_Shift, 20   @ bitWidth 1 (Reset bit 4)  
        .equ GPIOE_BR5_Shift, 21   @ bitWidth 1 (Reset bit 5)  
        .equ GPIOE_BR6_Shift, 22   @ bitWidth 1 (Reset bit 6)  
        .equ GPIOE_BR7_Shift, 23   @ bitWidth 1 (Reset bit 7)  
        .equ GPIOE_BR8_Shift, 24   @ bitWidth 1 (Reset bit 8)  
        .equ GPIOE_BR9_Shift, 25   @ bitWidth 1 (Reset bit 9)  
        .equ GPIOE_BR10_Shift, 26   @ bitWidth 1 (Reset bit 10)  
        .equ GPIOE_BR11_Shift, 27   @ bitWidth 1 (Reset bit 11)  
        .equ GPIOE_BR12_Shift, 28   @ bitWidth 1 (Reset bit 12)  
        .equ GPIOE_BR13_Shift, 29   @ bitWidth 1 (Reset bit 13)  
        .equ GPIOE_BR14_Shift, 30   @ bitWidth 1 (Reset bit 14)  
        .equ GPIOE_BR15_Shift, 31   @ bitWidth 1 (Reset bit 15)  
 
    .equ GPIOE_BRR, GPIOE_BASE + 0x14 @ (Port bit reset register  GPIOn_BRR) 
        .equ GPIOE_BR0_Shift, 0   @ bitWidth 1 (Reset bit 0)  
        .equ GPIOE_BR1_Shift, 1   @ bitWidth 1 (Reset bit 1)  
        .equ GPIOE_BR2_Shift, 2   @ bitWidth 1 (Reset bit 1)  
        .equ GPIOE_BR3_Shift, 3   @ bitWidth 1 (Reset bit 3)  
        .equ GPIOE_BR4_Shift, 4   @ bitWidth 1 (Reset bit 4)  
        .equ GPIOE_BR5_Shift, 5   @ bitWidth 1 (Reset bit 5)  
        .equ GPIOE_BR6_Shift, 6   @ bitWidth 1 (Reset bit 6)  
        .equ GPIOE_BR7_Shift, 7   @ bitWidth 1 (Reset bit 7)  
        .equ GPIOE_BR8_Shift, 8   @ bitWidth 1 (Reset bit 8)  
        .equ GPIOE_BR9_Shift, 9   @ bitWidth 1 (Reset bit 9)  
        .equ GPIOE_BR10_Shift, 10   @ bitWidth 1 (Reset bit 10)  
        .equ GPIOE_BR11_Shift, 11   @ bitWidth 1 (Reset bit 11)  
        .equ GPIOE_BR12_Shift, 12   @ bitWidth 1 (Reset bit 12)  
        .equ GPIOE_BR13_Shift, 13   @ bitWidth 1 (Reset bit 13)  
        .equ GPIOE_BR14_Shift, 14   @ bitWidth 1 (Reset bit 14)  
        .equ GPIOE_BR15_Shift, 15   @ bitWidth 1 (Reset bit 15)  
 
    .equ GPIOE_LCKR, GPIOE_BASE + 0x18 @ (Port configuration lock  register) 
        .equ GPIOE_LCK0_Shift, 0   @ bitWidth 1 (Port A Lock bit 0)  
        .equ GPIOE_LCK1_Shift, 1   @ bitWidth 1 (Port A Lock bit 1)  
        .equ GPIOE_LCK2_Shift, 2   @ bitWidth 1 (Port A Lock bit 2)  
        .equ GPIOE_LCK3_Shift, 3   @ bitWidth 1 (Port A Lock bit 3)  
        .equ GPIOE_LCK4_Shift, 4   @ bitWidth 1 (Port A Lock bit 4)  
        .equ GPIOE_LCK5_Shift, 5   @ bitWidth 1 (Port A Lock bit 5)  
        .equ GPIOE_LCK6_Shift, 6   @ bitWidth 1 (Port A Lock bit 6)  
        .equ GPIOE_LCK7_Shift, 7   @ bitWidth 1 (Port A Lock bit 7)  
        .equ GPIOE_LCK8_Shift, 8   @ bitWidth 1 (Port A Lock bit 8)  
        .equ GPIOE_LCK9_Shift, 9   @ bitWidth 1 (Port A Lock bit 9)  
        .equ GPIOE_LCK10_Shift, 10   @ bitWidth 1 (Port A Lock bit 10)  
        .equ GPIOE_LCK11_Shift, 11   @ bitWidth 1 (Port A Lock bit 11)  
        .equ GPIOE_LCK12_Shift, 12   @ bitWidth 1 (Port A Lock bit 12)  
        .equ GPIOE_LCK13_Shift, 13   @ bitWidth 1 (Port A Lock bit 13)  
        .equ GPIOE_LCK14_Shift, 14   @ bitWidth 1 (Port A Lock bit 14)  
        .equ GPIOE_LCK15_Shift, 15   @ bitWidth 1 (Port A Lock bit 15)  
        .equ GPIOE_LCKK_Shift, 16   @ bitWidth 1 (Lock key)  
 

@=========================== GPIOF ===========================@
.equ GPIOF_BASE, 0x40011C00 @ (General purpose I/O) 
    .equ GPIOF_CRL, GPIOF_BASE + 0x0 @ (Port configuration register low  GPIOn_CRL) 
        .equ GPIOF_MODE0_Shift, 0   @ bitWidth 2 (Port n.0 mode bits)  
        .equ GPIOF_CNF0_Shift, 2   @ bitWidth 2 (Port n.0 configuration  bits)  
        .equ GPIOF_MODE1_Shift, 4   @ bitWidth 2 (Port n.1 mode bits)  
        .equ GPIOF_CNF1_Shift, 6   @ bitWidth 2 (Port n.1 configuration  bits)  
        .equ GPIOF_MODE2_Shift, 8   @ bitWidth 2 (Port n.2 mode bits)  
        .equ GPIOF_CNF2_Shift, 10   @ bitWidth 2 (Port n.2 configuration  bits)  
        .equ GPIOF_MODE3_Shift, 12   @ bitWidth 2 (Port n.3 mode bits)  
        .equ GPIOF_CNF3_Shift, 14   @ bitWidth 2 (Port n.3 configuration  bits)  
        .equ GPIOF_MODE4_Shift, 16   @ bitWidth 2 (Port n.4 mode bits)  
        .equ GPIOF_CNF4_Shift, 18   @ bitWidth 2 (Port n.4 configuration  bits)  
        .equ GPIOF_MODE5_Shift, 20   @ bitWidth 2 (Port n.5 mode bits)  
        .equ GPIOF_CNF5_Shift, 22   @ bitWidth 2 (Port n.5 configuration  bits)  
        .equ GPIOF_MODE6_Shift, 24   @ bitWidth 2 (Port n.6 mode bits)  
        .equ GPIOF_CNF6_Shift, 26   @ bitWidth 2 (Port n.6 configuration  bits)  
        .equ GPIOF_MODE7_Shift, 28   @ bitWidth 2 (Port n.7 mode bits)  
        .equ GPIOF_CNF7_Shift, 30   @ bitWidth 2 (Port n.7 configuration  bits)  
 
    .equ GPIOF_CRH, GPIOF_BASE + 0x4 @ (Port configuration register high  GPIOn_CRL) 
        .equ GPIOF_MODE8_Shift, 0   @ bitWidth 2 (Port n.8 mode bits)  
        .equ GPIOF_CNF8_Shift, 2   @ bitWidth 2 (Port n.8 configuration  bits)  
        .equ GPIOF_MODE9_Shift, 4   @ bitWidth 2 (Port n.9 mode bits)  
        .equ GPIOF_CNF9_Shift, 6   @ bitWidth 2 (Port n.9 configuration  bits)  
        .equ GPIOF_MODE10_Shift, 8   @ bitWidth 2 (Port n.10 mode bits)  
        .equ GPIOF_CNF10_Shift, 10   @ bitWidth 2 (Port n.10 configuration  bits)  
        .equ GPIOF_MODE11_Shift, 12   @ bitWidth 2 (Port n.11 mode bits)  
        .equ GPIOF_CNF11_Shift, 14   @ bitWidth 2 (Port n.11 configuration  bits)  
        .equ GPIOF_MODE12_Shift, 16   @ bitWidth 2 (Port n.12 mode bits)  
        .equ GPIOF_CNF12_Shift, 18   @ bitWidth 2 (Port n.12 configuration  bits)  
        .equ GPIOF_MODE13_Shift, 20   @ bitWidth 2 (Port n.13 mode bits)  
        .equ GPIOF_CNF13_Shift, 22   @ bitWidth 2 (Port n.13 configuration  bits)  
        .equ GPIOF_MODE14_Shift, 24   @ bitWidth 2 (Port n.14 mode bits)  
        .equ GPIOF_CNF14_Shift, 26   @ bitWidth 2 (Port n.14 configuration  bits)  
        .equ GPIOF_MODE15_Shift, 28   @ bitWidth 2 (Port n.15 mode bits)  
        .equ GPIOF_CNF15_Shift, 30   @ bitWidth 2 (Port n.15 configuration  bits)  
 
    .equ GPIOF_IDR, GPIOF_BASE + 0x8 @ (Port input data register  GPIOn_IDR) 
        .equ GPIOF_IDR0_Shift, 0   @ bitWidth 1 (Port input data)  
        .equ GPIOF_IDR1_Shift, 1   @ bitWidth 1 (Port input data)  
        .equ GPIOF_IDR2_Shift, 2   @ bitWidth 1 (Port input data)  
        .equ GPIOF_IDR3_Shift, 3   @ bitWidth 1 (Port input data)  
        .equ GPIOF_IDR4_Shift, 4   @ bitWidth 1 (Port input data)  
        .equ GPIOF_IDR5_Shift, 5   @ bitWidth 1 (Port input data)  
        .equ GPIOF_IDR6_Shift, 6   @ bitWidth 1 (Port input data)  
        .equ GPIOF_IDR7_Shift, 7   @ bitWidth 1 (Port input data)  
        .equ GPIOF_IDR8_Shift, 8   @ bitWidth 1 (Port input data)  
        .equ GPIOF_IDR9_Shift, 9   @ bitWidth 1 (Port input data)  
        .equ GPIOF_IDR10_Shift, 10   @ bitWidth 1 (Port input data)  
        .equ GPIOF_IDR11_Shift, 11   @ bitWidth 1 (Port input data)  
        .equ GPIOF_IDR12_Shift, 12   @ bitWidth 1 (Port input data)  
        .equ GPIOF_IDR13_Shift, 13   @ bitWidth 1 (Port input data)  
        .equ GPIOF_IDR14_Shift, 14   @ bitWidth 1 (Port input data)  
        .equ GPIOF_IDR15_Shift, 15   @ bitWidth 1 (Port input data)  
 
    .equ GPIOF_ODR, GPIOF_BASE + 0xC @ (Port output data register  GPIOn_ODR) 
        .equ GPIOF_ODR0_Shift, 0   @ bitWidth 1 (Port output data)  
        .equ GPIOF_ODR1_Shift, 1   @ bitWidth 1 (Port output data)  
        .equ GPIOF_ODR2_Shift, 2   @ bitWidth 1 (Port output data)  
        .equ GPIOF_ODR3_Shift, 3   @ bitWidth 1 (Port output data)  
        .equ GPIOF_ODR4_Shift, 4   @ bitWidth 1 (Port output data)  
        .equ GPIOF_ODR5_Shift, 5   @ bitWidth 1 (Port output data)  
        .equ GPIOF_ODR6_Shift, 6   @ bitWidth 1 (Port output data)  
        .equ GPIOF_ODR7_Shift, 7   @ bitWidth 1 (Port output data)  
        .equ GPIOF_ODR8_Shift, 8   @ bitWidth 1 (Port output data)  
        .equ GPIOF_ODR9_Shift, 9   @ bitWidth 1 (Port output data)  
        .equ GPIOF_ODR10_Shift, 10   @ bitWidth 1 (Port output data)  
        .equ GPIOF_ODR11_Shift, 11   @ bitWidth 1 (Port output data)  
        .equ GPIOF_ODR12_Shift, 12   @ bitWidth 1 (Port output data)  
        .equ GPIOF_ODR13_Shift, 13   @ bitWidth 1 (Port output data)  
        .equ GPIOF_ODR14_Shift, 14   @ bitWidth 1 (Port output data)  
        .equ GPIOF_ODR15_Shift, 15   @ bitWidth 1 (Port output data)  
 
    .equ GPIOF_BSRR, GPIOF_BASE + 0x10 @ (Port bit set/reset register  GPIOn_BSRR) 
        .equ GPIOF_BS0_Shift, 0   @ bitWidth 1 (Set bit 0)  
        .equ GPIOF_BS1_Shift, 1   @ bitWidth 1 (Set bit 1)  
        .equ GPIOF_BS2_Shift, 2   @ bitWidth 1 (Set bit 1)  
        .equ GPIOF_BS3_Shift, 3   @ bitWidth 1 (Set bit 3)  
        .equ GPIOF_BS4_Shift, 4   @ bitWidth 1 (Set bit 4)  
        .equ GPIOF_BS5_Shift, 5   @ bitWidth 1 (Set bit 5)  
        .equ GPIOF_BS6_Shift, 6   @ bitWidth 1 (Set bit 6)  
        .equ GPIOF_BS7_Shift, 7   @ bitWidth 1 (Set bit 7)  
        .equ GPIOF_BS8_Shift, 8   @ bitWidth 1 (Set bit 8)  
        .equ GPIOF_BS9_Shift, 9   @ bitWidth 1 (Set bit 9)  
        .equ GPIOF_BS10_Shift, 10   @ bitWidth 1 (Set bit 10)  
        .equ GPIOF_BS11_Shift, 11   @ bitWidth 1 (Set bit 11)  
        .equ GPIOF_BS12_Shift, 12   @ bitWidth 1 (Set bit 12)  
        .equ GPIOF_BS13_Shift, 13   @ bitWidth 1 (Set bit 13)  
        .equ GPIOF_BS14_Shift, 14   @ bitWidth 1 (Set bit 14)  
        .equ GPIOF_BS15_Shift, 15   @ bitWidth 1 (Set bit 15)  
        .equ GPIOF_BR0_Shift, 16   @ bitWidth 1 (Reset bit 0)  
        .equ GPIOF_BR1_Shift, 17   @ bitWidth 1 (Reset bit 1)  
        .equ GPIOF_BR2_Shift, 18   @ bitWidth 1 (Reset bit 2)  
        .equ GPIOF_BR3_Shift, 19   @ bitWidth 1 (Reset bit 3)  
        .equ GPIOF_BR4_Shift, 20   @ bitWidth 1 (Reset bit 4)  
        .equ GPIOF_BR5_Shift, 21   @ bitWidth 1 (Reset bit 5)  
        .equ GPIOF_BR6_Shift, 22   @ bitWidth 1 (Reset bit 6)  
        .equ GPIOF_BR7_Shift, 23   @ bitWidth 1 (Reset bit 7)  
        .equ GPIOF_BR8_Shift, 24   @ bitWidth 1 (Reset bit 8)  
        .equ GPIOF_BR9_Shift, 25   @ bitWidth 1 (Reset bit 9)  
        .equ GPIOF_BR10_Shift, 26   @ bitWidth 1 (Reset bit 10)  
        .equ GPIOF_BR11_Shift, 27   @ bitWidth 1 (Reset bit 11)  
        .equ GPIOF_BR12_Shift, 28   @ bitWidth 1 (Reset bit 12)  
        .equ GPIOF_BR13_Shift, 29   @ bitWidth 1 (Reset bit 13)  
        .equ GPIOF_BR14_Shift, 30   @ bitWidth 1 (Reset bit 14)  
        .equ GPIOF_BR15_Shift, 31   @ bitWidth 1 (Reset bit 15)  
 
    .equ GPIOF_BRR, GPIOF_BASE + 0x14 @ (Port bit reset register  GPIOn_BRR) 
        .equ GPIOF_BR0_Shift, 0   @ bitWidth 1 (Reset bit 0)  
        .equ GPIOF_BR1_Shift, 1   @ bitWidth 1 (Reset bit 1)  
        .equ GPIOF_BR2_Shift, 2   @ bitWidth 1 (Reset bit 1)  
        .equ GPIOF_BR3_Shift, 3   @ bitWidth 1 (Reset bit 3)  
        .equ GPIOF_BR4_Shift, 4   @ bitWidth 1 (Reset bit 4)  
        .equ GPIOF_BR5_Shift, 5   @ bitWidth 1 (Reset bit 5)  
        .equ GPIOF_BR6_Shift, 6   @ bitWidth 1 (Reset bit 6)  
        .equ GPIOF_BR7_Shift, 7   @ bitWidth 1 (Reset bit 7)  
        .equ GPIOF_BR8_Shift, 8   @ bitWidth 1 (Reset bit 8)  
        .equ GPIOF_BR9_Shift, 9   @ bitWidth 1 (Reset bit 9)  
        .equ GPIOF_BR10_Shift, 10   @ bitWidth 1 (Reset bit 10)  
        .equ GPIOF_BR11_Shift, 11   @ bitWidth 1 (Reset bit 11)  
        .equ GPIOF_BR12_Shift, 12   @ bitWidth 1 (Reset bit 12)  
        .equ GPIOF_BR13_Shift, 13   @ bitWidth 1 (Reset bit 13)  
        .equ GPIOF_BR14_Shift, 14   @ bitWidth 1 (Reset bit 14)  
        .equ GPIOF_BR15_Shift, 15   @ bitWidth 1 (Reset bit 15)  
 
    .equ GPIOF_LCKR, GPIOF_BASE + 0x18 @ (Port configuration lock  register) 
        .equ GPIOF_LCK0_Shift, 0   @ bitWidth 1 (Port A Lock bit 0)  
        .equ GPIOF_LCK1_Shift, 1   @ bitWidth 1 (Port A Lock bit 1)  
        .equ GPIOF_LCK2_Shift, 2   @ bitWidth 1 (Port A Lock bit 2)  
        .equ GPIOF_LCK3_Shift, 3   @ bitWidth 1 (Port A Lock bit 3)  
        .equ GPIOF_LCK4_Shift, 4   @ bitWidth 1 (Port A Lock bit 4)  
        .equ GPIOF_LCK5_Shift, 5   @ bitWidth 1 (Port A Lock bit 5)  
        .equ GPIOF_LCK6_Shift, 6   @ bitWidth 1 (Port A Lock bit 6)  
        .equ GPIOF_LCK7_Shift, 7   @ bitWidth 1 (Port A Lock bit 7)  
        .equ GPIOF_LCK8_Shift, 8   @ bitWidth 1 (Port A Lock bit 8)  
        .equ GPIOF_LCK9_Shift, 9   @ bitWidth 1 (Port A Lock bit 9)  
        .equ GPIOF_LCK10_Shift, 10   @ bitWidth 1 (Port A Lock bit 10)  
        .equ GPIOF_LCK11_Shift, 11   @ bitWidth 1 (Port A Lock bit 11)  
        .equ GPIOF_LCK12_Shift, 12   @ bitWidth 1 (Port A Lock bit 12)  
        .equ GPIOF_LCK13_Shift, 13   @ bitWidth 1 (Port A Lock bit 13)  
        .equ GPIOF_LCK14_Shift, 14   @ bitWidth 1 (Port A Lock bit 14)  
        .equ GPIOF_LCK15_Shift, 15   @ bitWidth 1 (Port A Lock bit 15)  
        .equ GPIOF_LCKK_Shift, 16   @ bitWidth 1 (Lock key)  
 

@=========================== GPIOG ===========================@
.equ GPIOG_BASE, 0x40012000 @ (General purpose I/O) 
    .equ GPIOG_CRL, GPIOG_BASE + 0x0 @ (Port configuration register low  GPIOn_CRL) 
        .equ GPIOG_MODE0_Shift, 0   @ bitWidth 2 (Port n.0 mode bits)  
        .equ GPIOG_CNF0_Shift, 2   @ bitWidth 2 (Port n.0 configuration  bits)  
        .equ GPIOG_MODE1_Shift, 4   @ bitWidth 2 (Port n.1 mode bits)  
        .equ GPIOG_CNF1_Shift, 6   @ bitWidth 2 (Port n.1 configuration  bits)  
        .equ GPIOG_MODE2_Shift, 8   @ bitWidth 2 (Port n.2 mode bits)  
        .equ GPIOG_CNF2_Shift, 10   @ bitWidth 2 (Port n.2 configuration  bits)  
        .equ GPIOG_MODE3_Shift, 12   @ bitWidth 2 (Port n.3 mode bits)  
        .equ GPIOG_CNF3_Shift, 14   @ bitWidth 2 (Port n.3 configuration  bits)  
        .equ GPIOG_MODE4_Shift, 16   @ bitWidth 2 (Port n.4 mode bits)  
        .equ GPIOG_CNF4_Shift, 18   @ bitWidth 2 (Port n.4 configuration  bits)  
        .equ GPIOG_MODE5_Shift, 20   @ bitWidth 2 (Port n.5 mode bits)  
        .equ GPIOG_CNF5_Shift, 22   @ bitWidth 2 (Port n.5 configuration  bits)  
        .equ GPIOG_MODE6_Shift, 24   @ bitWidth 2 (Port n.6 mode bits)  
        .equ GPIOG_CNF6_Shift, 26   @ bitWidth 2 (Port n.6 configuration  bits)  
        .equ GPIOG_MODE7_Shift, 28   @ bitWidth 2 (Port n.7 mode bits)  
        .equ GPIOG_CNF7_Shift, 30   @ bitWidth 2 (Port n.7 configuration  bits)  
 
    .equ GPIOG_CRH, GPIOG_BASE + 0x4 @ (Port configuration register high  GPIOn_CRL) 
        .equ GPIOG_MODE8_Shift, 0   @ bitWidth 2 (Port n.8 mode bits)  
        .equ GPIOG_CNF8_Shift, 2   @ bitWidth 2 (Port n.8 configuration  bits)  
        .equ GPIOG_MODE9_Shift, 4   @ bitWidth 2 (Port n.9 mode bits)  
        .equ GPIOG_CNF9_Shift, 6   @ bitWidth 2 (Port n.9 configuration  bits)  
        .equ GPIOG_MODE10_Shift, 8   @ bitWidth 2 (Port n.10 mode bits)  
        .equ GPIOG_CNF10_Shift, 10   @ bitWidth 2 (Port n.10 configuration  bits)  
        .equ GPIOG_MODE11_Shift, 12   @ bitWidth 2 (Port n.11 mode bits)  
        .equ GPIOG_CNF11_Shift, 14   @ bitWidth 2 (Port n.11 configuration  bits)  
        .equ GPIOG_MODE12_Shift, 16   @ bitWidth 2 (Port n.12 mode bits)  
        .equ GPIOG_CNF12_Shift, 18   @ bitWidth 2 (Port n.12 configuration  bits)  
        .equ GPIOG_MODE13_Shift, 20   @ bitWidth 2 (Port n.13 mode bits)  
        .equ GPIOG_CNF13_Shift, 22   @ bitWidth 2 (Port n.13 configuration  bits)  
        .equ GPIOG_MODE14_Shift, 24   @ bitWidth 2 (Port n.14 mode bits)  
        .equ GPIOG_CNF14_Shift, 26   @ bitWidth 2 (Port n.14 configuration  bits)  
        .equ GPIOG_MODE15_Shift, 28   @ bitWidth 2 (Port n.15 mode bits)  
        .equ GPIOG_CNF15_Shift, 30   @ bitWidth 2 (Port n.15 configuration  bits)  
 
    .equ GPIOG_IDR, GPIOG_BASE + 0x8 @ (Port input data register  GPIOn_IDR) 
        .equ GPIOG_IDR0_Shift, 0   @ bitWidth 1 (Port input data)  
        .equ GPIOG_IDR1_Shift, 1   @ bitWidth 1 (Port input data)  
        .equ GPIOG_IDR2_Shift, 2   @ bitWidth 1 (Port input data)  
        .equ GPIOG_IDR3_Shift, 3   @ bitWidth 1 (Port input data)  
        .equ GPIOG_IDR4_Shift, 4   @ bitWidth 1 (Port input data)  
        .equ GPIOG_IDR5_Shift, 5   @ bitWidth 1 (Port input data)  
        .equ GPIOG_IDR6_Shift, 6   @ bitWidth 1 (Port input data)  
        .equ GPIOG_IDR7_Shift, 7   @ bitWidth 1 (Port input data)  
        .equ GPIOG_IDR8_Shift, 8   @ bitWidth 1 (Port input data)  
        .equ GPIOG_IDR9_Shift, 9   @ bitWidth 1 (Port input data)  
        .equ GPIOG_IDR10_Shift, 10   @ bitWidth 1 (Port input data)  
        .equ GPIOG_IDR11_Shift, 11   @ bitWidth 1 (Port input data)  
        .equ GPIOG_IDR12_Shift, 12   @ bitWidth 1 (Port input data)  
        .equ GPIOG_IDR13_Shift, 13   @ bitWidth 1 (Port input data)  
        .equ GPIOG_IDR14_Shift, 14   @ bitWidth 1 (Port input data)  
        .equ GPIOG_IDR15_Shift, 15   @ bitWidth 1 (Port input data)  
 
    .equ GPIOG_ODR, GPIOG_BASE + 0xC @ (Port output data register  GPIOn_ODR) 
        .equ GPIOG_ODR0_Shift, 0   @ bitWidth 1 (Port output data)  
        .equ GPIOG_ODR1_Shift, 1   @ bitWidth 1 (Port output data)  
        .equ GPIOG_ODR2_Shift, 2   @ bitWidth 1 (Port output data)  
        .equ GPIOG_ODR3_Shift, 3   @ bitWidth 1 (Port output data)  
        .equ GPIOG_ODR4_Shift, 4   @ bitWidth 1 (Port output data)  
        .equ GPIOG_ODR5_Shift, 5   @ bitWidth 1 (Port output data)  
        .equ GPIOG_ODR6_Shift, 6   @ bitWidth 1 (Port output data)  
        .equ GPIOG_ODR7_Shift, 7   @ bitWidth 1 (Port output data)  
        .equ GPIOG_ODR8_Shift, 8   @ bitWidth 1 (Port output data)  
        .equ GPIOG_ODR9_Shift, 9   @ bitWidth 1 (Port output data)  
        .equ GPIOG_ODR10_Shift, 10   @ bitWidth 1 (Port output data)  
        .equ GPIOG_ODR11_Shift, 11   @ bitWidth 1 (Port output data)  
        .equ GPIOG_ODR12_Shift, 12   @ bitWidth 1 (Port output data)  
        .equ GPIOG_ODR13_Shift, 13   @ bitWidth 1 (Port output data)  
        .equ GPIOG_ODR14_Shift, 14   @ bitWidth 1 (Port output data)  
        .equ GPIOG_ODR15_Shift, 15   @ bitWidth 1 (Port output data)  
 
    .equ GPIOG_BSRR, GPIOG_BASE + 0x10 @ (Port bit set/reset register  GPIOn_BSRR) 
        .equ GPIOG_BS0_Shift, 0   @ bitWidth 1 (Set bit 0)  
        .equ GPIOG_BS1_Shift, 1   @ bitWidth 1 (Set bit 1)  
        .equ GPIOG_BS2_Shift, 2   @ bitWidth 1 (Set bit 1)  
        .equ GPIOG_BS3_Shift, 3   @ bitWidth 1 (Set bit 3)  
        .equ GPIOG_BS4_Shift, 4   @ bitWidth 1 (Set bit 4)  
        .equ GPIOG_BS5_Shift, 5   @ bitWidth 1 (Set bit 5)  
        .equ GPIOG_BS6_Shift, 6   @ bitWidth 1 (Set bit 6)  
        .equ GPIOG_BS7_Shift, 7   @ bitWidth 1 (Set bit 7)  
        .equ GPIOG_BS8_Shift, 8   @ bitWidth 1 (Set bit 8)  
        .equ GPIOG_BS9_Shift, 9   @ bitWidth 1 (Set bit 9)  
        .equ GPIOG_BS10_Shift, 10   @ bitWidth 1 (Set bit 10)  
        .equ GPIOG_BS11_Shift, 11   @ bitWidth 1 (Set bit 11)  
        .equ GPIOG_BS12_Shift, 12   @ bitWidth 1 (Set bit 12)  
        .equ GPIOG_BS13_Shift, 13   @ bitWidth 1 (Set bit 13)  
        .equ GPIOG_BS14_Shift, 14   @ bitWidth 1 (Set bit 14)  
        .equ GPIOG_BS15_Shift, 15   @ bitWidth 1 (Set bit 15)  
        .equ GPIOG_BR0_Shift, 16   @ bitWidth 1 (Reset bit 0)  
        .equ GPIOG_BR1_Shift, 17   @ bitWidth 1 (Reset bit 1)  
        .equ GPIOG_BR2_Shift, 18   @ bitWidth 1 (Reset bit 2)  
        .equ GPIOG_BR3_Shift, 19   @ bitWidth 1 (Reset bit 3)  
        .equ GPIOG_BR4_Shift, 20   @ bitWidth 1 (Reset bit 4)  
        .equ GPIOG_BR5_Shift, 21   @ bitWidth 1 (Reset bit 5)  
        .equ GPIOG_BR6_Shift, 22   @ bitWidth 1 (Reset bit 6)  
        .equ GPIOG_BR7_Shift, 23   @ bitWidth 1 (Reset bit 7)  
        .equ GPIOG_BR8_Shift, 24   @ bitWidth 1 (Reset bit 8)  
        .equ GPIOG_BR9_Shift, 25   @ bitWidth 1 (Reset bit 9)  
        .equ GPIOG_BR10_Shift, 26   @ bitWidth 1 (Reset bit 10)  
        .equ GPIOG_BR11_Shift, 27   @ bitWidth 1 (Reset bit 11)  
        .equ GPIOG_BR12_Shift, 28   @ bitWidth 1 (Reset bit 12)  
        .equ GPIOG_BR13_Shift, 29   @ bitWidth 1 (Reset bit 13)  
        .equ GPIOG_BR14_Shift, 30   @ bitWidth 1 (Reset bit 14)  
        .equ GPIOG_BR15_Shift, 31   @ bitWidth 1 (Reset bit 15)  
 
    .equ GPIOG_BRR, GPIOG_BASE + 0x14 @ (Port bit reset register  GPIOn_BRR) 
        .equ GPIOG_BR0_Shift, 0   @ bitWidth 1 (Reset bit 0)  
        .equ GPIOG_BR1_Shift, 1   @ bitWidth 1 (Reset bit 1)  
        .equ GPIOG_BR2_Shift, 2   @ bitWidth 1 (Reset bit 1)  
        .equ GPIOG_BR3_Shift, 3   @ bitWidth 1 (Reset bit 3)  
        .equ GPIOG_BR4_Shift, 4   @ bitWidth 1 (Reset bit 4)  
        .equ GPIOG_BR5_Shift, 5   @ bitWidth 1 (Reset bit 5)  
        .equ GPIOG_BR6_Shift, 6   @ bitWidth 1 (Reset bit 6)  
        .equ GPIOG_BR7_Shift, 7   @ bitWidth 1 (Reset bit 7)  
        .equ GPIOG_BR8_Shift, 8   @ bitWidth 1 (Reset bit 8)  
        .equ GPIOG_BR9_Shift, 9   @ bitWidth 1 (Reset bit 9)  
        .equ GPIOG_BR10_Shift, 10   @ bitWidth 1 (Reset bit 10)  
        .equ GPIOG_BR11_Shift, 11   @ bitWidth 1 (Reset bit 11)  
        .equ GPIOG_BR12_Shift, 12   @ bitWidth 1 (Reset bit 12)  
        .equ GPIOG_BR13_Shift, 13   @ bitWidth 1 (Reset bit 13)  
        .equ GPIOG_BR14_Shift, 14   @ bitWidth 1 (Reset bit 14)  
        .equ GPIOG_BR15_Shift, 15   @ bitWidth 1 (Reset bit 15)  
 
    .equ GPIOG_LCKR, GPIOG_BASE + 0x18 @ (Port configuration lock  register) 
        .equ GPIOG_LCK0_Shift, 0   @ bitWidth 1 (Port A Lock bit 0)  
        .equ GPIOG_LCK1_Shift, 1   @ bitWidth 1 (Port A Lock bit 1)  
        .equ GPIOG_LCK2_Shift, 2   @ bitWidth 1 (Port A Lock bit 2)  
        .equ GPIOG_LCK3_Shift, 3   @ bitWidth 1 (Port A Lock bit 3)  
        .equ GPIOG_LCK4_Shift, 4   @ bitWidth 1 (Port A Lock bit 4)  
        .equ GPIOG_LCK5_Shift, 5   @ bitWidth 1 (Port A Lock bit 5)  
        .equ GPIOG_LCK6_Shift, 6   @ bitWidth 1 (Port A Lock bit 6)  
        .equ GPIOG_LCK7_Shift, 7   @ bitWidth 1 (Port A Lock bit 7)  
        .equ GPIOG_LCK8_Shift, 8   @ bitWidth 1 (Port A Lock bit 8)  
        .equ GPIOG_LCK9_Shift, 9   @ bitWidth 1 (Port A Lock bit 9)  
        .equ GPIOG_LCK10_Shift, 10   @ bitWidth 1 (Port A Lock bit 10)  
        .equ GPIOG_LCK11_Shift, 11   @ bitWidth 1 (Port A Lock bit 11)  
        .equ GPIOG_LCK12_Shift, 12   @ bitWidth 1 (Port A Lock bit 12)  
        .equ GPIOG_LCK13_Shift, 13   @ bitWidth 1 (Port A Lock bit 13)  
        .equ GPIOG_LCK14_Shift, 14   @ bitWidth 1 (Port A Lock bit 14)  
        .equ GPIOG_LCK15_Shift, 15   @ bitWidth 1 (Port A Lock bit 15)  
        .equ GPIOG_LCKK_Shift, 16   @ bitWidth 1 (Lock key)  
 

@=========================== AFIO ===========================@
.equ AFIO_BASE, 0x40010000 @ (Alternate function I/O) 
    .equ AFIO_EVCR, AFIO_BASE + 0x0 @ (Event Control Register  AFIO_EVCR) 
        .equ AFIO_PIN_Shift, 0   @ bitWidth 4 (Pin selection)  
        .equ AFIO_PORT_Shift, 4   @ bitWidth 3 (Port selection)  
        .equ AFIO_EVOE_Shift, 7   @ bitWidth 1 (Event Output Enable)  
 
    .equ AFIO_MAPR, AFIO_BASE + 0x4 @ (AF remap and debug I/O configuration  register AFIO_MAPR) 
        .equ AFIO_SPI1_REMAP_Shift, 0   @ bitWidth 1 (SPI1 remapping)  
        .equ AFIO_I2C1_REMAP_Shift, 1   @ bitWidth 1 (I2C1 remapping)  
        .equ AFIO_USART1_REMAP_Shift, 2   @ bitWidth 1 (USART1 remapping)  
        .equ AFIO_USART2_REMAP_Shift, 3   @ bitWidth 1 (USART2 remapping)  
        .equ AFIO_USART3_REMAP_Shift, 4   @ bitWidth 2 (USART3 remapping)  
        .equ AFIO_TIM1_REMAP_Shift, 6   @ bitWidth 2 (TIM1 remapping)  
        .equ AFIO_TIM2_REMAP_Shift, 8   @ bitWidth 2 (TIM2 remapping)  
        .equ AFIO_TIM3_REMAP_Shift, 10   @ bitWidth 2 (TIM3 remapping)  
        .equ AFIO_TIM4_REMAP_Shift, 12   @ bitWidth 1 (TIM4 remapping)  
        .equ AFIO_CAN_REMAP_Shift, 13   @ bitWidth 2 (CAN1 remapping)  
        .equ AFIO_PD01_REMAP_Shift, 15   @ bitWidth 1 (Port D0/Port D1 mapping on  OSCIN/OSCOUT)  
        .equ AFIO_TIM5CH4_IREMAP_Shift, 16   @ bitWidth 1 (Set and cleared by  software)  
        .equ AFIO_ADC1_ETRGINJ_REMAP_Shift, 17   @ bitWidth 1 (ADC 1 External trigger injected  conversion remapping)  
        .equ AFIO_ADC1_ETRGREG_REMAP_Shift, 18   @ bitWidth 1 (ADC 1 external trigger regular  conversion remapping)  
        .equ AFIO_ADC2_ETRGINJ_REMAP_Shift, 19   @ bitWidth 1 (ADC 2 external trigger injected  conversion remapping)  
        .equ AFIO_ADC2_ETRGREG_REMAP_Shift, 20   @ bitWidth 1 (ADC 2 external trigger regular  conversion remapping)  
        .equ AFIO_SWJ_CFG_Shift, 24   @ bitWidth 3 (Serial wire JTAG  configuration)  
 
    .equ AFIO_EXTICR1, AFIO_BASE + 0x8 @ (External interrupt configuration register 1  AFIO_EXTICR1) 
        .equ AFIO_EXTI0_Shift, 0   @ bitWidth 4 (EXTI0 configuration)  
        .equ AFIO_EXTI1_Shift, 4   @ bitWidth 4 (EXTI1 configuration)  
        .equ AFIO_EXTI2_Shift, 8   @ bitWidth 4 (EXTI2 configuration)  
        .equ AFIO_EXTI3_Shift, 12   @ bitWidth 4 (EXTI3 configuration)  
 
    .equ AFIO_EXTICR2, AFIO_BASE + 0xC @ (External interrupt configuration register 2  AFIO_EXTICR2) 
        .equ AFIO_EXTI4_Shift, 0   @ bitWidth 4 (EXTI4 configuration)  
        .equ AFIO_EXTI5_Shift, 4   @ bitWidth 4 (EXTI5 configuration)  
        .equ AFIO_EXTI6_Shift, 8   @ bitWidth 4 (EXTI6 configuration)  
        .equ AFIO_EXTI7_Shift, 12   @ bitWidth 4 (EXTI7 configuration)  
 
    .equ AFIO_EXTICR3, AFIO_BASE + 0x10 @ (External interrupt configuration register 3  AFIO_EXTICR3) 
        .equ AFIO_EXTI8_Shift, 0   @ bitWidth 4 (EXTI8 configuration)  
        .equ AFIO_EXTI9_Shift, 4   @ bitWidth 4 (EXTI9 configuration)  
        .equ AFIO_EXTI10_Shift, 8   @ bitWidth 4 (EXTI10 configuration)  
        .equ AFIO_EXTI11_Shift, 12   @ bitWidth 4 (EXTI11 configuration)  
 
    .equ AFIO_EXTICR4, AFIO_BASE + 0x14 @ (External interrupt configuration register 4  AFIO_EXTICR4) 
        .equ AFIO_EXTI12_Shift, 0   @ bitWidth 4 (EXTI12 configuration)  
        .equ AFIO_EXTI13_Shift, 4   @ bitWidth 4 (EXTI13 configuration)  
        .equ AFIO_EXTI14_Shift, 8   @ bitWidth 4 (EXTI14 configuration)  
        .equ AFIO_EXTI15_Shift, 12   @ bitWidth 4 (EXTI15 configuration)  
 
    .equ AFIO_MAPR2, AFIO_BASE + 0x1C @ (AF remap and debug I/O configuration  register) 
        .equ AFIO_TIM9_REMAP_Shift, 5   @ bitWidth 1 (TIM9 remapping)  
        .equ AFIO_TIM10_REMAP_Shift, 6   @ bitWidth 1 (TIM10 remapping)  
        .equ AFIO_TIM11_REMAP_Shift, 7   @ bitWidth 1 (TIM11 remapping)  
        .equ AFIO_TIM13_REMAP_Shift, 8   @ bitWidth 1 (TIM13 remapping)  
        .equ AFIO_TIM14_REMAP_Shift, 9   @ bitWidth 1 (TIM14 remapping)  
        .equ AFIO_FSMC_NADV_Shift, 10   @ bitWidth 1 (NADV connect/disconnect)  
 

@=========================== EXTI ===========================@
.equ EXTI_BASE, 0x40010400 @ (EXTI) 
    .equ EXTI_IMR, EXTI_BASE + 0x0 @ (Interrupt mask register  EXTI_IMR) 
        .equ EXTI_MR0_Shift, 0   @ bitWidth 1 (Interrupt Mask on line 0)  
        .equ EXTI_MR1_Shift, 1   @ bitWidth 1 (Interrupt Mask on line 1)  
        .equ EXTI_MR2_Shift, 2   @ bitWidth 1 (Interrupt Mask on line 2)  
        .equ EXTI_MR3_Shift, 3   @ bitWidth 1 (Interrupt Mask on line 3)  
        .equ EXTI_MR4_Shift, 4   @ bitWidth 1 (Interrupt Mask on line 4)  
        .equ EXTI_MR5_Shift, 5   @ bitWidth 1 (Interrupt Mask on line 5)  
        .equ EXTI_MR6_Shift, 6   @ bitWidth 1 (Interrupt Mask on line 6)  
        .equ EXTI_MR7_Shift, 7   @ bitWidth 1 (Interrupt Mask on line 7)  
        .equ EXTI_MR8_Shift, 8   @ bitWidth 1 (Interrupt Mask on line 8)  
        .equ EXTI_MR9_Shift, 9   @ bitWidth 1 (Interrupt Mask on line 9)  
        .equ EXTI_MR10_Shift, 10   @ bitWidth 1 (Interrupt Mask on line 10)  
        .equ EXTI_MR11_Shift, 11   @ bitWidth 1 (Interrupt Mask on line 11)  
        .equ EXTI_MR12_Shift, 12   @ bitWidth 1 (Interrupt Mask on line 12)  
        .equ EXTI_MR13_Shift, 13   @ bitWidth 1 (Interrupt Mask on line 13)  
        .equ EXTI_MR14_Shift, 14   @ bitWidth 1 (Interrupt Mask on line 14)  
        .equ EXTI_MR15_Shift, 15   @ bitWidth 1 (Interrupt Mask on line 15)  
        .equ EXTI_MR16_Shift, 16   @ bitWidth 1 (Interrupt Mask on line 16)  
        .equ EXTI_MR17_Shift, 17   @ bitWidth 1 (Interrupt Mask on line 17)  
        .equ EXTI_MR18_Shift, 18   @ bitWidth 1 (Interrupt Mask on line 18)  
 
    .equ EXTI_EMR, EXTI_BASE + 0x4 @ (Event mask register EXTI_EMR) 
        .equ EXTI_MR0_Shift, 0   @ bitWidth 1 (Event Mask on line 0)  
        .equ EXTI_MR1_Shift, 1   @ bitWidth 1 (Event Mask on line 1)  
        .equ EXTI_MR2_Shift, 2   @ bitWidth 1 (Event Mask on line 2)  
        .equ EXTI_MR3_Shift, 3   @ bitWidth 1 (Event Mask on line 3)  
        .equ EXTI_MR4_Shift, 4   @ bitWidth 1 (Event Mask on line 4)  
        .equ EXTI_MR5_Shift, 5   @ bitWidth 1 (Event Mask on line 5)  
        .equ EXTI_MR6_Shift, 6   @ bitWidth 1 (Event Mask on line 6)  
        .equ EXTI_MR7_Shift, 7   @ bitWidth 1 (Event Mask on line 7)  
        .equ EXTI_MR8_Shift, 8   @ bitWidth 1 (Event Mask on line 8)  
        .equ EXTI_MR9_Shift, 9   @ bitWidth 1 (Event Mask on line 9)  
        .equ EXTI_MR10_Shift, 10   @ bitWidth 1 (Event Mask on line 10)  
        .equ EXTI_MR11_Shift, 11   @ bitWidth 1 (Event Mask on line 11)  
        .equ EXTI_MR12_Shift, 12   @ bitWidth 1 (Event Mask on line 12)  
        .equ EXTI_MR13_Shift, 13   @ bitWidth 1 (Event Mask on line 13)  
        .equ EXTI_MR14_Shift, 14   @ bitWidth 1 (Event Mask on line 14)  
        .equ EXTI_MR15_Shift, 15   @ bitWidth 1 (Event Mask on line 15)  
        .equ EXTI_MR16_Shift, 16   @ bitWidth 1 (Event Mask on line 16)  
        .equ EXTI_MR17_Shift, 17   @ bitWidth 1 (Event Mask on line 17)  
        .equ EXTI_MR18_Shift, 18   @ bitWidth 1 (Event Mask on line 18)  
 
    .equ EXTI_RTSR, EXTI_BASE + 0x8 @ (Rising Trigger selection register  EXTI_RTSR) 
        .equ EXTI_TR0_Shift, 0   @ bitWidth 1 (Rising trigger event configuration of  line 0)  
        .equ EXTI_TR1_Shift, 1   @ bitWidth 1 (Rising trigger event configuration of  line 1)  
        .equ EXTI_TR2_Shift, 2   @ bitWidth 1 (Rising trigger event configuration of  line 2)  
        .equ EXTI_TR3_Shift, 3   @ bitWidth 1 (Rising trigger event configuration of  line 3)  
        .equ EXTI_TR4_Shift, 4   @ bitWidth 1 (Rising trigger event configuration of  line 4)  
        .equ EXTI_TR5_Shift, 5   @ bitWidth 1 (Rising trigger event configuration of  line 5)  
        .equ EXTI_TR6_Shift, 6   @ bitWidth 1 (Rising trigger event configuration of  line 6)  
        .equ EXTI_TR7_Shift, 7   @ bitWidth 1 (Rising trigger event configuration of  line 7)  
        .equ EXTI_TR8_Shift, 8   @ bitWidth 1 (Rising trigger event configuration of  line 8)  
        .equ EXTI_TR9_Shift, 9   @ bitWidth 1 (Rising trigger event configuration of  line 9)  
        .equ EXTI_TR10_Shift, 10   @ bitWidth 1 (Rising trigger event configuration of  line 10)  
        .equ EXTI_TR11_Shift, 11   @ bitWidth 1 (Rising trigger event configuration of  line 11)  
        .equ EXTI_TR12_Shift, 12   @ bitWidth 1 (Rising trigger event configuration of  line 12)  
        .equ EXTI_TR13_Shift, 13   @ bitWidth 1 (Rising trigger event configuration of  line 13)  
        .equ EXTI_TR14_Shift, 14   @ bitWidth 1 (Rising trigger event configuration of  line 14)  
        .equ EXTI_TR15_Shift, 15   @ bitWidth 1 (Rising trigger event configuration of  line 15)  
        .equ EXTI_TR16_Shift, 16   @ bitWidth 1 (Rising trigger event configuration of  line 16)  
        .equ EXTI_TR17_Shift, 17   @ bitWidth 1 (Rising trigger event configuration of  line 17)  
        .equ EXTI_TR18_Shift, 18   @ bitWidth 1 (Rising trigger event configuration of  line 18)  
 
    .equ EXTI_FTSR, EXTI_BASE + 0xC @ (Falling Trigger selection register  EXTI_FTSR) 
        .equ EXTI_TR0_Shift, 0   @ bitWidth 1 (Falling trigger event configuration of  line 0)  
        .equ EXTI_TR1_Shift, 1   @ bitWidth 1 (Falling trigger event configuration of  line 1)  
        .equ EXTI_TR2_Shift, 2   @ bitWidth 1 (Falling trigger event configuration of  line 2)  
        .equ EXTI_TR3_Shift, 3   @ bitWidth 1 (Falling trigger event configuration of  line 3)  
        .equ EXTI_TR4_Shift, 4   @ bitWidth 1 (Falling trigger event configuration of  line 4)  
        .equ EXTI_TR5_Shift, 5   @ bitWidth 1 (Falling trigger event configuration of  line 5)  
        .equ EXTI_TR6_Shift, 6   @ bitWidth 1 (Falling trigger event configuration of  line 6)  
        .equ EXTI_TR7_Shift, 7   @ bitWidth 1 (Falling trigger event configuration of  line 7)  
        .equ EXTI_TR8_Shift, 8   @ bitWidth 1 (Falling trigger event configuration of  line 8)  
        .equ EXTI_TR9_Shift, 9   @ bitWidth 1 (Falling trigger event configuration of  line 9)  
        .equ EXTI_TR10_Shift, 10   @ bitWidth 1 (Falling trigger event configuration of  line 10)  
        .equ EXTI_TR11_Shift, 11   @ bitWidth 1 (Falling trigger event configuration of  line 11)  
        .equ EXTI_TR12_Shift, 12   @ bitWidth 1 (Falling trigger event configuration of  line 12)  
        .equ EXTI_TR13_Shift, 13   @ bitWidth 1 (Falling trigger event configuration of  line 13)  
        .equ EXTI_TR14_Shift, 14   @ bitWidth 1 (Falling trigger event configuration of  line 14)  
        .equ EXTI_TR15_Shift, 15   @ bitWidth 1 (Falling trigger event configuration of  line 15)  
        .equ EXTI_TR16_Shift, 16   @ bitWidth 1 (Falling trigger event configuration of  line 16)  
        .equ EXTI_TR17_Shift, 17   @ bitWidth 1 (Falling trigger event configuration of  line 17)  
        .equ EXTI_TR18_Shift, 18   @ bitWidth 1 (Falling trigger event configuration of  line 18)  
 
    .equ EXTI_SWIER, EXTI_BASE + 0x10 @ (Software interrupt event register  EXTI_SWIER) 
        .equ EXTI_SWIER0_Shift, 0   @ bitWidth 1 (Software Interrupt on line  0)  
        .equ EXTI_SWIER1_Shift, 1   @ bitWidth 1 (Software Interrupt on line  1)  
        .equ EXTI_SWIER2_Shift, 2   @ bitWidth 1 (Software Interrupt on line  2)  
        .equ EXTI_SWIER3_Shift, 3   @ bitWidth 1 (Software Interrupt on line  3)  
        .equ EXTI_SWIER4_Shift, 4   @ bitWidth 1 (Software Interrupt on line  4)  
        .equ EXTI_SWIER5_Shift, 5   @ bitWidth 1 (Software Interrupt on line  5)  
        .equ EXTI_SWIER6_Shift, 6   @ bitWidth 1 (Software Interrupt on line  6)  
        .equ EXTI_SWIER7_Shift, 7   @ bitWidth 1 (Software Interrupt on line  7)  
        .equ EXTI_SWIER8_Shift, 8   @ bitWidth 1 (Software Interrupt on line  8)  
        .equ EXTI_SWIER9_Shift, 9   @ bitWidth 1 (Software Interrupt on line  9)  
        .equ EXTI_SWIER10_Shift, 10   @ bitWidth 1 (Software Interrupt on line  10)  
        .equ EXTI_SWIER11_Shift, 11   @ bitWidth 1 (Software Interrupt on line  11)  
        .equ EXTI_SWIER12_Shift, 12   @ bitWidth 1 (Software Interrupt on line  12)  
        .equ EXTI_SWIER13_Shift, 13   @ bitWidth 1 (Software Interrupt on line  13)  
        .equ EXTI_SWIER14_Shift, 14   @ bitWidth 1 (Software Interrupt on line  14)  
        .equ EXTI_SWIER15_Shift, 15   @ bitWidth 1 (Software Interrupt on line  15)  
        .equ EXTI_SWIER16_Shift, 16   @ bitWidth 1 (Software Interrupt on line  16)  
        .equ EXTI_SWIER17_Shift, 17   @ bitWidth 1 (Software Interrupt on line  17)  
        .equ EXTI_SWIER18_Shift, 18   @ bitWidth 1 (Software Interrupt on line  18)  
 
    .equ EXTI_PR, EXTI_BASE + 0x14 @ (Pending register EXTI_PR) 
        .equ EXTI_PR0_Shift, 0   @ bitWidth 1 (Pending bit 0)  
        .equ EXTI_PR1_Shift, 1   @ bitWidth 1 (Pending bit 1)  
        .equ EXTI_PR2_Shift, 2   @ bitWidth 1 (Pending bit 2)  
        .equ EXTI_PR3_Shift, 3   @ bitWidth 1 (Pending bit 3)  
        .equ EXTI_PR4_Shift, 4   @ bitWidth 1 (Pending bit 4)  
        .equ EXTI_PR5_Shift, 5   @ bitWidth 1 (Pending bit 5)  
        .equ EXTI_PR6_Shift, 6   @ bitWidth 1 (Pending bit 6)  
        .equ EXTI_PR7_Shift, 7   @ bitWidth 1 (Pending bit 7)  
        .equ EXTI_PR8_Shift, 8   @ bitWidth 1 (Pending bit 8)  
        .equ EXTI_PR9_Shift, 9   @ bitWidth 1 (Pending bit 9)  
        .equ EXTI_PR10_Shift, 10   @ bitWidth 1 (Pending bit 10)  
        .equ EXTI_PR11_Shift, 11   @ bitWidth 1 (Pending bit 11)  
        .equ EXTI_PR12_Shift, 12   @ bitWidth 1 (Pending bit 12)  
        .equ EXTI_PR13_Shift, 13   @ bitWidth 1 (Pending bit 13)  
        .equ EXTI_PR14_Shift, 14   @ bitWidth 1 (Pending bit 14)  
        .equ EXTI_PR15_Shift, 15   @ bitWidth 1 (Pending bit 15)  
        .equ EXTI_PR16_Shift, 16   @ bitWidth 1 (Pending bit 16)  
        .equ EXTI_PR17_Shift, 17   @ bitWidth 1 (Pending bit 17)  
        .equ EXTI_PR18_Shift, 18   @ bitWidth 1 (Pending bit 18)  
 

@=========================== DMA1 ===========================@
.equ DMA1_BASE, 0x40020000 @ (DMA controller) 
    .equ DMA1_ISR, DMA1_BASE + 0x0 @ (DMA interrupt status register  DMA_ISR) 
        .equ DMA1_GIF1_Shift, 0   @ bitWidth 1 (Channel 1 Global interrupt  flag)  
        .equ DMA1_TCIF1_Shift, 1   @ bitWidth 1 (Channel 1 Transfer Complete  flag)  
        .equ DMA1_HTIF1_Shift, 2   @ bitWidth 1 (Channel 1 Half Transfer Complete  flag)  
        .equ DMA1_TEIF1_Shift, 3   @ bitWidth 1 (Channel 1 Transfer Error  flag)  
        .equ DMA1_GIF2_Shift, 4   @ bitWidth 1 (Channel 2 Global interrupt  flag)  
        .equ DMA1_TCIF2_Shift, 5   @ bitWidth 1 (Channel 2 Transfer Complete  flag)  
        .equ DMA1_HTIF2_Shift, 6   @ bitWidth 1 (Channel 2 Half Transfer Complete  flag)  
        .equ DMA1_TEIF2_Shift, 7   @ bitWidth 1 (Channel 2 Transfer Error  flag)  
        .equ DMA1_GIF3_Shift, 8   @ bitWidth 1 (Channel 3 Global interrupt  flag)  
        .equ DMA1_TCIF3_Shift, 9   @ bitWidth 1 (Channel 3 Transfer Complete  flag)  
        .equ DMA1_HTIF3_Shift, 10   @ bitWidth 1 (Channel 3 Half Transfer Complete  flag)  
        .equ DMA1_TEIF3_Shift, 11   @ bitWidth 1 (Channel 3 Transfer Error  flag)  
        .equ DMA1_GIF4_Shift, 12   @ bitWidth 1 (Channel 4 Global interrupt  flag)  
        .equ DMA1_TCIF4_Shift, 13   @ bitWidth 1 (Channel 4 Transfer Complete  flag)  
        .equ DMA1_HTIF4_Shift, 14   @ bitWidth 1 (Channel 4 Half Transfer Complete  flag)  
        .equ DMA1_TEIF4_Shift, 15   @ bitWidth 1 (Channel 4 Transfer Error  flag)  
        .equ DMA1_GIF5_Shift, 16   @ bitWidth 1 (Channel 5 Global interrupt  flag)  
        .equ DMA1_TCIF5_Shift, 17   @ bitWidth 1 (Channel 5 Transfer Complete  flag)  
        .equ DMA1_HTIF5_Shift, 18   @ bitWidth 1 (Channel 5 Half Transfer Complete  flag)  
        .equ DMA1_TEIF5_Shift, 19   @ bitWidth 1 (Channel 5 Transfer Error  flag)  
        .equ DMA1_GIF6_Shift, 20   @ bitWidth 1 (Channel 6 Global interrupt  flag)  
        .equ DMA1_TCIF6_Shift, 21   @ bitWidth 1 (Channel 6 Transfer Complete  flag)  
        .equ DMA1_HTIF6_Shift, 22   @ bitWidth 1 (Channel 6 Half Transfer Complete  flag)  
        .equ DMA1_TEIF6_Shift, 23   @ bitWidth 1 (Channel 6 Transfer Error  flag)  
        .equ DMA1_GIF7_Shift, 24   @ bitWidth 1 (Channel 7 Global interrupt  flag)  
        .equ DMA1_TCIF7_Shift, 25   @ bitWidth 1 (Channel 7 Transfer Complete  flag)  
        .equ DMA1_HTIF7_Shift, 26   @ bitWidth 1 (Channel 7 Half Transfer Complete  flag)  
        .equ DMA1_TEIF7_Shift, 27   @ bitWidth 1 (Channel 7 Transfer Error  flag)  
 
    .equ DMA1_IFCR, DMA1_BASE + 0x4 @ (DMA interrupt flag clear register  DMA_IFCR) 
        .equ DMA1_CGIF1_Shift, 0   @ bitWidth 1 (Channel 1 Global interrupt  clear)  
        .equ DMA1_CGIF2_Shift, 4   @ bitWidth 1 (Channel 2 Global interrupt  clear)  
        .equ DMA1_CGIF3_Shift, 8   @ bitWidth 1 (Channel 3 Global interrupt  clear)  
        .equ DMA1_CGIF4_Shift, 12   @ bitWidth 1 (Channel 4 Global interrupt  clear)  
        .equ DMA1_CGIF5_Shift, 16   @ bitWidth 1 (Channel 5 Global interrupt  clear)  
        .equ DMA1_CGIF6_Shift, 20   @ bitWidth 1 (Channel 6 Global interrupt  clear)  
        .equ DMA1_CGIF7_Shift, 24   @ bitWidth 1 (Channel 7 Global interrupt  clear)  
        .equ DMA1_CTCIF1_Shift, 1   @ bitWidth 1 (Channel 1 Transfer Complete  clear)  
        .equ DMA1_CTCIF2_Shift, 5   @ bitWidth 1 (Channel 2 Transfer Complete  clear)  
        .equ DMA1_CTCIF3_Shift, 9   @ bitWidth 1 (Channel 3 Transfer Complete  clear)  
        .equ DMA1_CTCIF4_Shift, 13   @ bitWidth 1 (Channel 4 Transfer Complete  clear)  
        .equ DMA1_CTCIF5_Shift, 17   @ bitWidth 1 (Channel 5 Transfer Complete  clear)  
        .equ DMA1_CTCIF6_Shift, 21   @ bitWidth 1 (Channel 6 Transfer Complete  clear)  
        .equ DMA1_CTCIF7_Shift, 25   @ bitWidth 1 (Channel 7 Transfer Complete  clear)  
        .equ DMA1_CHTIF1_Shift, 2   @ bitWidth 1 (Channel 1 Half Transfer  clear)  
        .equ DMA1_CHTIF2_Shift, 6   @ bitWidth 1 (Channel 2 Half Transfer  clear)  
        .equ DMA1_CHTIF3_Shift, 10   @ bitWidth 1 (Channel 3 Half Transfer  clear)  
        .equ DMA1_CHTIF4_Shift, 14   @ bitWidth 1 (Channel 4 Half Transfer  clear)  
        .equ DMA1_CHTIF5_Shift, 18   @ bitWidth 1 (Channel 5 Half Transfer  clear)  
        .equ DMA1_CHTIF6_Shift, 22   @ bitWidth 1 (Channel 6 Half Transfer  clear)  
        .equ DMA1_CHTIF7_Shift, 26   @ bitWidth 1 (Channel 7 Half Transfer  clear)  
        .equ DMA1_CTEIF1_Shift, 3   @ bitWidth 1 (Channel 1 Transfer Error  clear)  
        .equ DMA1_CTEIF2_Shift, 7   @ bitWidth 1 (Channel 2 Transfer Error  clear)  
        .equ DMA1_CTEIF3_Shift, 11   @ bitWidth 1 (Channel 3 Transfer Error  clear)  
        .equ DMA1_CTEIF4_Shift, 15   @ bitWidth 1 (Channel 4 Transfer Error  clear)  
        .equ DMA1_CTEIF5_Shift, 19   @ bitWidth 1 (Channel 5 Transfer Error  clear)  
        .equ DMA1_CTEIF6_Shift, 23   @ bitWidth 1 (Channel 6 Transfer Error  clear)  
        .equ DMA1_CTEIF7_Shift, 27   @ bitWidth 1 (Channel 7 Transfer Error  clear)  
 
    .equ DMA1_CCR1, DMA1_BASE + 0x8 @ (DMA channel configuration register  DMA_CCR) 
        .equ DMA1_EN_Shift, 0   @ bitWidth 1 (Channel enable)  
        .equ DMA1_TCIE_Shift, 1   @ bitWidth 1 (Transfer complete interrupt  enable)  
        .equ DMA1_HTIE_Shift, 2   @ bitWidth 1 (Half Transfer interrupt  enable)  
        .equ DMA1_TEIE_Shift, 3   @ bitWidth 1 (Transfer error interrupt  enable)  
        .equ DMA1_DIR_Shift, 4   @ bitWidth 1 (Data transfer direction)  
        .equ DMA1_CIRC_Shift, 5   @ bitWidth 1 (Circular mode)  
        .equ DMA1_PINC_Shift, 6   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA1_MINC_Shift, 7   @ bitWidth 1 (Memory increment mode)  
        .equ DMA1_PSIZE_Shift, 8   @ bitWidth 2 (Peripheral size)  
        .equ DMA1_MSIZE_Shift, 10   @ bitWidth 2 (Memory size)  
        .equ DMA1_PL_Shift, 12   @ bitWidth 2 (Channel Priority level)  
        .equ DMA1_MEM2MEM_Shift, 14   @ bitWidth 1 (Memory to memory mode)  
 
    .equ DMA1_CNDTR1, DMA1_BASE + 0xC @ (DMA channel 1 number of data  register) 
        .equ DMA1_NDT_Shift, 0   @ bitWidth 16 (Number of data to transfer)  
 
    .equ DMA1_CPAR1, DMA1_BASE + 0x10 @ (DMA channel 1 peripheral address  register) 
        .equ DMA1_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA1_CMAR1, DMA1_BASE + 0x14 @ (DMA channel 1 memory address  register) 
        .equ DMA1_MA_Shift, 0   @ bitWidth 32 (Memory address)  
 
    .equ DMA1_CCR2, DMA1_BASE + 0x1C @ (DMA channel configuration register  DMA_CCR) 
        .equ DMA1_EN_Shift, 0   @ bitWidth 1 (Channel enable)  
        .equ DMA1_TCIE_Shift, 1   @ bitWidth 1 (Transfer complete interrupt  enable)  
        .equ DMA1_HTIE_Shift, 2   @ bitWidth 1 (Half Transfer interrupt  enable)  
        .equ DMA1_TEIE_Shift, 3   @ bitWidth 1 (Transfer error interrupt  enable)  
        .equ DMA1_DIR_Shift, 4   @ bitWidth 1 (Data transfer direction)  
        .equ DMA1_CIRC_Shift, 5   @ bitWidth 1 (Circular mode)  
        .equ DMA1_PINC_Shift, 6   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA1_MINC_Shift, 7   @ bitWidth 1 (Memory increment mode)  
        .equ DMA1_PSIZE_Shift, 8   @ bitWidth 2 (Peripheral size)  
        .equ DMA1_MSIZE_Shift, 10   @ bitWidth 2 (Memory size)  
        .equ DMA1_PL_Shift, 12   @ bitWidth 2 (Channel Priority level)  
        .equ DMA1_MEM2MEM_Shift, 14   @ bitWidth 1 (Memory to memory mode)  
 
    .equ DMA1_CNDTR2, DMA1_BASE + 0x20 @ (DMA channel 2 number of data  register) 
        .equ DMA1_NDT_Shift, 0   @ bitWidth 16 (Number of data to transfer)  
 
    .equ DMA1_CPAR2, DMA1_BASE + 0x24 @ (DMA channel 2 peripheral address  register) 
        .equ DMA1_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA1_CMAR2, DMA1_BASE + 0x28 @ (DMA channel 2 memory address  register) 
        .equ DMA1_MA_Shift, 0   @ bitWidth 32 (Memory address)  
 
    .equ DMA1_CCR3, DMA1_BASE + 0x30 @ (DMA channel configuration register  DMA_CCR) 
        .equ DMA1_EN_Shift, 0   @ bitWidth 1 (Channel enable)  
        .equ DMA1_TCIE_Shift, 1   @ bitWidth 1 (Transfer complete interrupt  enable)  
        .equ DMA1_HTIE_Shift, 2   @ bitWidth 1 (Half Transfer interrupt  enable)  
        .equ DMA1_TEIE_Shift, 3   @ bitWidth 1 (Transfer error interrupt  enable)  
        .equ DMA1_DIR_Shift, 4   @ bitWidth 1 (Data transfer direction)  
        .equ DMA1_CIRC_Shift, 5   @ bitWidth 1 (Circular mode)  
        .equ DMA1_PINC_Shift, 6   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA1_MINC_Shift, 7   @ bitWidth 1 (Memory increment mode)  
        .equ DMA1_PSIZE_Shift, 8   @ bitWidth 2 (Peripheral size)  
        .equ DMA1_MSIZE_Shift, 10   @ bitWidth 2 (Memory size)  
        .equ DMA1_PL_Shift, 12   @ bitWidth 2 (Channel Priority level)  
        .equ DMA1_MEM2MEM_Shift, 14   @ bitWidth 1 (Memory to memory mode)  
 
    .equ DMA1_CNDTR3, DMA1_BASE + 0x34 @ (DMA channel 3 number of data  register) 
        .equ DMA1_NDT_Shift, 0   @ bitWidth 16 (Number of data to transfer)  
 
    .equ DMA1_CPAR3, DMA1_BASE + 0x38 @ (DMA channel 3 peripheral address  register) 
        .equ DMA1_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA1_CMAR3, DMA1_BASE + 0x3C @ (DMA channel 3 memory address  register) 
        .equ DMA1_MA_Shift, 0   @ bitWidth 32 (Memory address)  
 
    .equ DMA1_CCR4, DMA1_BASE + 0x44 @ (DMA channel configuration register  DMA_CCR) 
        .equ DMA1_EN_Shift, 0   @ bitWidth 1 (Channel enable)  
        .equ DMA1_TCIE_Shift, 1   @ bitWidth 1 (Transfer complete interrupt  enable)  
        .equ DMA1_HTIE_Shift, 2   @ bitWidth 1 (Half Transfer interrupt  enable)  
        .equ DMA1_TEIE_Shift, 3   @ bitWidth 1 (Transfer error interrupt  enable)  
        .equ DMA1_DIR_Shift, 4   @ bitWidth 1 (Data transfer direction)  
        .equ DMA1_CIRC_Shift, 5   @ bitWidth 1 (Circular mode)  
        .equ DMA1_PINC_Shift, 6   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA1_MINC_Shift, 7   @ bitWidth 1 (Memory increment mode)  
        .equ DMA1_PSIZE_Shift, 8   @ bitWidth 2 (Peripheral size)  
        .equ DMA1_MSIZE_Shift, 10   @ bitWidth 2 (Memory size)  
        .equ DMA1_PL_Shift, 12   @ bitWidth 2 (Channel Priority level)  
        .equ DMA1_MEM2MEM_Shift, 14   @ bitWidth 1 (Memory to memory mode)  
 
    .equ DMA1_CNDTR4, DMA1_BASE + 0x48 @ (DMA channel 4 number of data  register) 
        .equ DMA1_NDT_Shift, 0   @ bitWidth 16 (Number of data to transfer)  
 
    .equ DMA1_CPAR4, DMA1_BASE + 0x4C @ (DMA channel 4 peripheral address  register) 
        .equ DMA1_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA1_CMAR4, DMA1_BASE + 0x50 @ (DMA channel 4 memory address  register) 
        .equ DMA1_MA_Shift, 0   @ bitWidth 32 (Memory address)  
 
    .equ DMA1_CCR5, DMA1_BASE + 0x58 @ (DMA channel configuration register  DMA_CCR) 
        .equ DMA1_EN_Shift, 0   @ bitWidth 1 (Channel enable)  
        .equ DMA1_TCIE_Shift, 1   @ bitWidth 1 (Transfer complete interrupt  enable)  
        .equ DMA1_HTIE_Shift, 2   @ bitWidth 1 (Half Transfer interrupt  enable)  
        .equ DMA1_TEIE_Shift, 3   @ bitWidth 1 (Transfer error interrupt  enable)  
        .equ DMA1_DIR_Shift, 4   @ bitWidth 1 (Data transfer direction)  
        .equ DMA1_CIRC_Shift, 5   @ bitWidth 1 (Circular mode)  
        .equ DMA1_PINC_Shift, 6   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA1_MINC_Shift, 7   @ bitWidth 1 (Memory increment mode)  
        .equ DMA1_PSIZE_Shift, 8   @ bitWidth 2 (Peripheral size)  
        .equ DMA1_MSIZE_Shift, 10   @ bitWidth 2 (Memory size)  
        .equ DMA1_PL_Shift, 12   @ bitWidth 2 (Channel Priority level)  
        .equ DMA1_MEM2MEM_Shift, 14   @ bitWidth 1 (Memory to memory mode)  
 
    .equ DMA1_CNDTR5, DMA1_BASE + 0x5C @ (DMA channel 5 number of data  register) 
        .equ DMA1_NDT_Shift, 0   @ bitWidth 16 (Number of data to transfer)  
 
    .equ DMA1_CPAR5, DMA1_BASE + 0x60 @ (DMA channel 5 peripheral address  register) 
        .equ DMA1_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA1_CMAR5, DMA1_BASE + 0x64 @ (DMA channel 5 memory address  register) 
        .equ DMA1_MA_Shift, 0   @ bitWidth 32 (Memory address)  
 
    .equ DMA1_CCR6, DMA1_BASE + 0x6C @ (DMA channel configuration register  DMA_CCR) 
        .equ DMA1_EN_Shift, 0   @ bitWidth 1 (Channel enable)  
        .equ DMA1_TCIE_Shift, 1   @ bitWidth 1 (Transfer complete interrupt  enable)  
        .equ DMA1_HTIE_Shift, 2   @ bitWidth 1 (Half Transfer interrupt  enable)  
        .equ DMA1_TEIE_Shift, 3   @ bitWidth 1 (Transfer error interrupt  enable)  
        .equ DMA1_DIR_Shift, 4   @ bitWidth 1 (Data transfer direction)  
        .equ DMA1_CIRC_Shift, 5   @ bitWidth 1 (Circular mode)  
        .equ DMA1_PINC_Shift, 6   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA1_MINC_Shift, 7   @ bitWidth 1 (Memory increment mode)  
        .equ DMA1_PSIZE_Shift, 8   @ bitWidth 2 (Peripheral size)  
        .equ DMA1_MSIZE_Shift, 10   @ bitWidth 2 (Memory size)  
        .equ DMA1_PL_Shift, 12   @ bitWidth 2 (Channel Priority level)  
        .equ DMA1_MEM2MEM_Shift, 14   @ bitWidth 1 (Memory to memory mode)  
 
    .equ DMA1_CNDTR6, DMA1_BASE + 0x70 @ (DMA channel 6 number of data  register) 
        .equ DMA1_NDT_Shift, 0   @ bitWidth 16 (Number of data to transfer)  
 
    .equ DMA1_CPAR6, DMA1_BASE + 0x74 @ (DMA channel 6 peripheral address  register) 
        .equ DMA1_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA1_CMAR6, DMA1_BASE + 0x78 @ (DMA channel 6 memory address  register) 
        .equ DMA1_MA_Shift, 0   @ bitWidth 32 (Memory address)  
 
    .equ DMA1_CCR7, DMA1_BASE + 0x80 @ (DMA channel configuration register  DMA_CCR) 
        .equ DMA1_EN_Shift, 0   @ bitWidth 1 (Channel enable)  
        .equ DMA1_TCIE_Shift, 1   @ bitWidth 1 (Transfer complete interrupt  enable)  
        .equ DMA1_HTIE_Shift, 2   @ bitWidth 1 (Half Transfer interrupt  enable)  
        .equ DMA1_TEIE_Shift, 3   @ bitWidth 1 (Transfer error interrupt  enable)  
        .equ DMA1_DIR_Shift, 4   @ bitWidth 1 (Data transfer direction)  
        .equ DMA1_CIRC_Shift, 5   @ bitWidth 1 (Circular mode)  
        .equ DMA1_PINC_Shift, 6   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA1_MINC_Shift, 7   @ bitWidth 1 (Memory increment mode)  
        .equ DMA1_PSIZE_Shift, 8   @ bitWidth 2 (Peripheral size)  
        .equ DMA1_MSIZE_Shift, 10   @ bitWidth 2 (Memory size)  
        .equ DMA1_PL_Shift, 12   @ bitWidth 2 (Channel Priority level)  
        .equ DMA1_MEM2MEM_Shift, 14   @ bitWidth 1 (Memory to memory mode)  
 
    .equ DMA1_CNDTR7, DMA1_BASE + 0x84 @ (DMA channel 7 number of data  register) 
        .equ DMA1_NDT_Shift, 0   @ bitWidth 16 (Number of data to transfer)  
 
    .equ DMA1_CPAR7, DMA1_BASE + 0x88 @ (DMA channel 7 peripheral address  register) 
        .equ DMA1_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA1_CMAR7, DMA1_BASE + 0x8C @ (DMA channel 7 memory address  register) 
        .equ DMA1_MA_Shift, 0   @ bitWidth 32 (Memory address)  
 

@=========================== DMA2 ===========================@
.equ DMA2_BASE, 0x40020400 @ (DMA controller) 
    .equ DMA2_ISR, DMA2_BASE + 0x0 @ (DMA interrupt status register  DMA_ISR) 
        .equ DMA2_GIF1_Shift, 0   @ bitWidth 1 (Channel 1 Global interrupt  flag)  
        .equ DMA2_TCIF1_Shift, 1   @ bitWidth 1 (Channel 1 Transfer Complete  flag)  
        .equ DMA2_HTIF1_Shift, 2   @ bitWidth 1 (Channel 1 Half Transfer Complete  flag)  
        .equ DMA2_TEIF1_Shift, 3   @ bitWidth 1 (Channel 1 Transfer Error  flag)  
        .equ DMA2_GIF2_Shift, 4   @ bitWidth 1 (Channel 2 Global interrupt  flag)  
        .equ DMA2_TCIF2_Shift, 5   @ bitWidth 1 (Channel 2 Transfer Complete  flag)  
        .equ DMA2_HTIF2_Shift, 6   @ bitWidth 1 (Channel 2 Half Transfer Complete  flag)  
        .equ DMA2_TEIF2_Shift, 7   @ bitWidth 1 (Channel 2 Transfer Error  flag)  
        .equ DMA2_GIF3_Shift, 8   @ bitWidth 1 (Channel 3 Global interrupt  flag)  
        .equ DMA2_TCIF3_Shift, 9   @ bitWidth 1 (Channel 3 Transfer Complete  flag)  
        .equ DMA2_HTIF3_Shift, 10   @ bitWidth 1 (Channel 3 Half Transfer Complete  flag)  
        .equ DMA2_TEIF3_Shift, 11   @ bitWidth 1 (Channel 3 Transfer Error  flag)  
        .equ DMA2_GIF4_Shift, 12   @ bitWidth 1 (Channel 4 Global interrupt  flag)  
        .equ DMA2_TCIF4_Shift, 13   @ bitWidth 1 (Channel 4 Transfer Complete  flag)  
        .equ DMA2_HTIF4_Shift, 14   @ bitWidth 1 (Channel 4 Half Transfer Complete  flag)  
        .equ DMA2_TEIF4_Shift, 15   @ bitWidth 1 (Channel 4 Transfer Error  flag)  
        .equ DMA2_GIF5_Shift, 16   @ bitWidth 1 (Channel 5 Global interrupt  flag)  
        .equ DMA2_TCIF5_Shift, 17   @ bitWidth 1 (Channel 5 Transfer Complete  flag)  
        .equ DMA2_HTIF5_Shift, 18   @ bitWidth 1 (Channel 5 Half Transfer Complete  flag)  
        .equ DMA2_TEIF5_Shift, 19   @ bitWidth 1 (Channel 5 Transfer Error  flag)  
        .equ DMA2_GIF6_Shift, 20   @ bitWidth 1 (Channel 6 Global interrupt  flag)  
        .equ DMA2_TCIF6_Shift, 21   @ bitWidth 1 (Channel 6 Transfer Complete  flag)  
        .equ DMA2_HTIF6_Shift, 22   @ bitWidth 1 (Channel 6 Half Transfer Complete  flag)  
        .equ DMA2_TEIF6_Shift, 23   @ bitWidth 1 (Channel 6 Transfer Error  flag)  
        .equ DMA2_GIF7_Shift, 24   @ bitWidth 1 (Channel 7 Global interrupt  flag)  
        .equ DMA2_TCIF7_Shift, 25   @ bitWidth 1 (Channel 7 Transfer Complete  flag)  
        .equ DMA2_HTIF7_Shift, 26   @ bitWidth 1 (Channel 7 Half Transfer Complete  flag)  
        .equ DMA2_TEIF7_Shift, 27   @ bitWidth 1 (Channel 7 Transfer Error  flag)  
 
    .equ DMA2_IFCR, DMA2_BASE + 0x4 @ (DMA interrupt flag clear register  DMA_IFCR) 
        .equ DMA2_CGIF1_Shift, 0   @ bitWidth 1 (Channel 1 Global interrupt  clear)  
        .equ DMA2_CGIF2_Shift, 4   @ bitWidth 1 (Channel 2 Global interrupt  clear)  
        .equ DMA2_CGIF3_Shift, 8   @ bitWidth 1 (Channel 3 Global interrupt  clear)  
        .equ DMA2_CGIF4_Shift, 12   @ bitWidth 1 (Channel 4 Global interrupt  clear)  
        .equ DMA2_CGIF5_Shift, 16   @ bitWidth 1 (Channel 5 Global interrupt  clear)  
        .equ DMA2_CGIF6_Shift, 20   @ bitWidth 1 (Channel 6 Global interrupt  clear)  
        .equ DMA2_CGIF7_Shift, 24   @ bitWidth 1 (Channel 7 Global interrupt  clear)  
        .equ DMA2_CTCIF1_Shift, 1   @ bitWidth 1 (Channel 1 Transfer Complete  clear)  
        .equ DMA2_CTCIF2_Shift, 5   @ bitWidth 1 (Channel 2 Transfer Complete  clear)  
        .equ DMA2_CTCIF3_Shift, 9   @ bitWidth 1 (Channel 3 Transfer Complete  clear)  
        .equ DMA2_CTCIF4_Shift, 13   @ bitWidth 1 (Channel 4 Transfer Complete  clear)  
        .equ DMA2_CTCIF5_Shift, 17   @ bitWidth 1 (Channel 5 Transfer Complete  clear)  
        .equ DMA2_CTCIF6_Shift, 21   @ bitWidth 1 (Channel 6 Transfer Complete  clear)  
        .equ DMA2_CTCIF7_Shift, 25   @ bitWidth 1 (Channel 7 Transfer Complete  clear)  
        .equ DMA2_CHTIF1_Shift, 2   @ bitWidth 1 (Channel 1 Half Transfer  clear)  
        .equ DMA2_CHTIF2_Shift, 6   @ bitWidth 1 (Channel 2 Half Transfer  clear)  
        .equ DMA2_CHTIF3_Shift, 10   @ bitWidth 1 (Channel 3 Half Transfer  clear)  
        .equ DMA2_CHTIF4_Shift, 14   @ bitWidth 1 (Channel 4 Half Transfer  clear)  
        .equ DMA2_CHTIF5_Shift, 18   @ bitWidth 1 (Channel 5 Half Transfer  clear)  
        .equ DMA2_CHTIF6_Shift, 22   @ bitWidth 1 (Channel 6 Half Transfer  clear)  
        .equ DMA2_CHTIF7_Shift, 26   @ bitWidth 1 (Channel 7 Half Transfer  clear)  
        .equ DMA2_CTEIF1_Shift, 3   @ bitWidth 1 (Channel 1 Transfer Error  clear)  
        .equ DMA2_CTEIF2_Shift, 7   @ bitWidth 1 (Channel 2 Transfer Error  clear)  
        .equ DMA2_CTEIF3_Shift, 11   @ bitWidth 1 (Channel 3 Transfer Error  clear)  
        .equ DMA2_CTEIF4_Shift, 15   @ bitWidth 1 (Channel 4 Transfer Error  clear)  
        .equ DMA2_CTEIF5_Shift, 19   @ bitWidth 1 (Channel 5 Transfer Error  clear)  
        .equ DMA2_CTEIF6_Shift, 23   @ bitWidth 1 (Channel 6 Transfer Error  clear)  
        .equ DMA2_CTEIF7_Shift, 27   @ bitWidth 1 (Channel 7 Transfer Error  clear)  
 
    .equ DMA2_CCR1, DMA2_BASE + 0x8 @ (DMA channel configuration register  DMA_CCR) 
        .equ DMA2_EN_Shift, 0   @ bitWidth 1 (Channel enable)  
        .equ DMA2_TCIE_Shift, 1   @ bitWidth 1 (Transfer complete interrupt  enable)  
        .equ DMA2_HTIE_Shift, 2   @ bitWidth 1 (Half Transfer interrupt  enable)  
        .equ DMA2_TEIE_Shift, 3   @ bitWidth 1 (Transfer error interrupt  enable)  
        .equ DMA2_DIR_Shift, 4   @ bitWidth 1 (Data transfer direction)  
        .equ DMA2_CIRC_Shift, 5   @ bitWidth 1 (Circular mode)  
        .equ DMA2_PINC_Shift, 6   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA2_MINC_Shift, 7   @ bitWidth 1 (Memory increment mode)  
        .equ DMA2_PSIZE_Shift, 8   @ bitWidth 2 (Peripheral size)  
        .equ DMA2_MSIZE_Shift, 10   @ bitWidth 2 (Memory size)  
        .equ DMA2_PL_Shift, 12   @ bitWidth 2 (Channel Priority level)  
        .equ DMA2_MEM2MEM_Shift, 14   @ bitWidth 1 (Memory to memory mode)  
 
    .equ DMA2_CNDTR1, DMA2_BASE + 0xC @ (DMA channel 1 number of data  register) 
        .equ DMA2_NDT_Shift, 0   @ bitWidth 16 (Number of data to transfer)  
 
    .equ DMA2_CPAR1, DMA2_BASE + 0x10 @ (DMA channel 1 peripheral address  register) 
        .equ DMA2_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA2_CMAR1, DMA2_BASE + 0x14 @ (DMA channel 1 memory address  register) 
        .equ DMA2_MA_Shift, 0   @ bitWidth 32 (Memory address)  
 
    .equ DMA2_CCR2, DMA2_BASE + 0x1C @ (DMA channel configuration register  DMA_CCR) 
        .equ DMA2_EN_Shift, 0   @ bitWidth 1 (Channel enable)  
        .equ DMA2_TCIE_Shift, 1   @ bitWidth 1 (Transfer complete interrupt  enable)  
        .equ DMA2_HTIE_Shift, 2   @ bitWidth 1 (Half Transfer interrupt  enable)  
        .equ DMA2_TEIE_Shift, 3   @ bitWidth 1 (Transfer error interrupt  enable)  
        .equ DMA2_DIR_Shift, 4   @ bitWidth 1 (Data transfer direction)  
        .equ DMA2_CIRC_Shift, 5   @ bitWidth 1 (Circular mode)  
        .equ DMA2_PINC_Shift, 6   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA2_MINC_Shift, 7   @ bitWidth 1 (Memory increment mode)  
        .equ DMA2_PSIZE_Shift, 8   @ bitWidth 2 (Peripheral size)  
        .equ DMA2_MSIZE_Shift, 10   @ bitWidth 2 (Memory size)  
        .equ DMA2_PL_Shift, 12   @ bitWidth 2 (Channel Priority level)  
        .equ DMA2_MEM2MEM_Shift, 14   @ bitWidth 1 (Memory to memory mode)  
 
    .equ DMA2_CNDTR2, DMA2_BASE + 0x20 @ (DMA channel 2 number of data  register) 
        .equ DMA2_NDT_Shift, 0   @ bitWidth 16 (Number of data to transfer)  
 
    .equ DMA2_CPAR2, DMA2_BASE + 0x24 @ (DMA channel 2 peripheral address  register) 
        .equ DMA2_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA2_CMAR2, DMA2_BASE + 0x28 @ (DMA channel 2 memory address  register) 
        .equ DMA2_MA_Shift, 0   @ bitWidth 32 (Memory address)  
 
    .equ DMA2_CCR3, DMA2_BASE + 0x30 @ (DMA channel configuration register  DMA_CCR) 
        .equ DMA2_EN_Shift, 0   @ bitWidth 1 (Channel enable)  
        .equ DMA2_TCIE_Shift, 1   @ bitWidth 1 (Transfer complete interrupt  enable)  
        .equ DMA2_HTIE_Shift, 2   @ bitWidth 1 (Half Transfer interrupt  enable)  
        .equ DMA2_TEIE_Shift, 3   @ bitWidth 1 (Transfer error interrupt  enable)  
        .equ DMA2_DIR_Shift, 4   @ bitWidth 1 (Data transfer direction)  
        .equ DMA2_CIRC_Shift, 5   @ bitWidth 1 (Circular mode)  
        .equ DMA2_PINC_Shift, 6   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA2_MINC_Shift, 7   @ bitWidth 1 (Memory increment mode)  
        .equ DMA2_PSIZE_Shift, 8   @ bitWidth 2 (Peripheral size)  
        .equ DMA2_MSIZE_Shift, 10   @ bitWidth 2 (Memory size)  
        .equ DMA2_PL_Shift, 12   @ bitWidth 2 (Channel Priority level)  
        .equ DMA2_MEM2MEM_Shift, 14   @ bitWidth 1 (Memory to memory mode)  
 
    .equ DMA2_CNDTR3, DMA2_BASE + 0x34 @ (DMA channel 3 number of data  register) 
        .equ DMA2_NDT_Shift, 0   @ bitWidth 16 (Number of data to transfer)  
 
    .equ DMA2_CPAR3, DMA2_BASE + 0x38 @ (DMA channel 3 peripheral address  register) 
        .equ DMA2_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA2_CMAR3, DMA2_BASE + 0x3C @ (DMA channel 3 memory address  register) 
        .equ DMA2_MA_Shift, 0   @ bitWidth 32 (Memory address)  
 
    .equ DMA2_CCR4, DMA2_BASE + 0x44 @ (DMA channel configuration register  DMA_CCR) 
        .equ DMA2_EN_Shift, 0   @ bitWidth 1 (Channel enable)  
        .equ DMA2_TCIE_Shift, 1   @ bitWidth 1 (Transfer complete interrupt  enable)  
        .equ DMA2_HTIE_Shift, 2   @ bitWidth 1 (Half Transfer interrupt  enable)  
        .equ DMA2_TEIE_Shift, 3   @ bitWidth 1 (Transfer error interrupt  enable)  
        .equ DMA2_DIR_Shift, 4   @ bitWidth 1 (Data transfer direction)  
        .equ DMA2_CIRC_Shift, 5   @ bitWidth 1 (Circular mode)  
        .equ DMA2_PINC_Shift, 6   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA2_MINC_Shift, 7   @ bitWidth 1 (Memory increment mode)  
        .equ DMA2_PSIZE_Shift, 8   @ bitWidth 2 (Peripheral size)  
        .equ DMA2_MSIZE_Shift, 10   @ bitWidth 2 (Memory size)  
        .equ DMA2_PL_Shift, 12   @ bitWidth 2 (Channel Priority level)  
        .equ DMA2_MEM2MEM_Shift, 14   @ bitWidth 1 (Memory to memory mode)  
 
    .equ DMA2_CNDTR4, DMA2_BASE + 0x48 @ (DMA channel 4 number of data  register) 
        .equ DMA2_NDT_Shift, 0   @ bitWidth 16 (Number of data to transfer)  
 
    .equ DMA2_CPAR4, DMA2_BASE + 0x4C @ (DMA channel 4 peripheral address  register) 
        .equ DMA2_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA2_CMAR4, DMA2_BASE + 0x50 @ (DMA channel 4 memory address  register) 
        .equ DMA2_MA_Shift, 0   @ bitWidth 32 (Memory address)  
 
    .equ DMA2_CCR5, DMA2_BASE + 0x58 @ (DMA channel configuration register  DMA_CCR) 
        .equ DMA2_EN_Shift, 0   @ bitWidth 1 (Channel enable)  
        .equ DMA2_TCIE_Shift, 1   @ bitWidth 1 (Transfer complete interrupt  enable)  
        .equ DMA2_HTIE_Shift, 2   @ bitWidth 1 (Half Transfer interrupt  enable)  
        .equ DMA2_TEIE_Shift, 3   @ bitWidth 1 (Transfer error interrupt  enable)  
        .equ DMA2_DIR_Shift, 4   @ bitWidth 1 (Data transfer direction)  
        .equ DMA2_CIRC_Shift, 5   @ bitWidth 1 (Circular mode)  
        .equ DMA2_PINC_Shift, 6   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA2_MINC_Shift, 7   @ bitWidth 1 (Memory increment mode)  
        .equ DMA2_PSIZE_Shift, 8   @ bitWidth 2 (Peripheral size)  
        .equ DMA2_MSIZE_Shift, 10   @ bitWidth 2 (Memory size)  
        .equ DMA2_PL_Shift, 12   @ bitWidth 2 (Channel Priority level)  
        .equ DMA2_MEM2MEM_Shift, 14   @ bitWidth 1 (Memory to memory mode)  
 
    .equ DMA2_CNDTR5, DMA2_BASE + 0x5C @ (DMA channel 5 number of data  register) 
        .equ DMA2_NDT_Shift, 0   @ bitWidth 16 (Number of data to transfer)  
 
    .equ DMA2_CPAR5, DMA2_BASE + 0x60 @ (DMA channel 5 peripheral address  register) 
        .equ DMA2_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA2_CMAR5, DMA2_BASE + 0x64 @ (DMA channel 5 memory address  register) 
        .equ DMA2_MA_Shift, 0   @ bitWidth 32 (Memory address)  
 
    .equ DMA2_CCR6, DMA2_BASE + 0x6C @ (DMA channel configuration register  DMA_CCR) 
        .equ DMA2_EN_Shift, 0   @ bitWidth 1 (Channel enable)  
        .equ DMA2_TCIE_Shift, 1   @ bitWidth 1 (Transfer complete interrupt  enable)  
        .equ DMA2_HTIE_Shift, 2   @ bitWidth 1 (Half Transfer interrupt  enable)  
        .equ DMA2_TEIE_Shift, 3   @ bitWidth 1 (Transfer error interrupt  enable)  
        .equ DMA2_DIR_Shift, 4   @ bitWidth 1 (Data transfer direction)  
        .equ DMA2_CIRC_Shift, 5   @ bitWidth 1 (Circular mode)  
        .equ DMA2_PINC_Shift, 6   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA2_MINC_Shift, 7   @ bitWidth 1 (Memory increment mode)  
        .equ DMA2_PSIZE_Shift, 8   @ bitWidth 2 (Peripheral size)  
        .equ DMA2_MSIZE_Shift, 10   @ bitWidth 2 (Memory size)  
        .equ DMA2_PL_Shift, 12   @ bitWidth 2 (Channel Priority level)  
        .equ DMA2_MEM2MEM_Shift, 14   @ bitWidth 1 (Memory to memory mode)  
 
    .equ DMA2_CNDTR6, DMA2_BASE + 0x70 @ (DMA channel 6 number of data  register) 
        .equ DMA2_NDT_Shift, 0   @ bitWidth 16 (Number of data to transfer)  
 
    .equ DMA2_CPAR6, DMA2_BASE + 0x74 @ (DMA channel 6 peripheral address  register) 
        .equ DMA2_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA2_CMAR6, DMA2_BASE + 0x78 @ (DMA channel 6 memory address  register) 
        .equ DMA2_MA_Shift, 0   @ bitWidth 32 (Memory address)  
 
    .equ DMA2_CCR7, DMA2_BASE + 0x80 @ (DMA channel configuration register  DMA_CCR) 
        .equ DMA2_EN_Shift, 0   @ bitWidth 1 (Channel enable)  
        .equ DMA2_TCIE_Shift, 1   @ bitWidth 1 (Transfer complete interrupt  enable)  
        .equ DMA2_HTIE_Shift, 2   @ bitWidth 1 (Half Transfer interrupt  enable)  
        .equ DMA2_TEIE_Shift, 3   @ bitWidth 1 (Transfer error interrupt  enable)  
        .equ DMA2_DIR_Shift, 4   @ bitWidth 1 (Data transfer direction)  
        .equ DMA2_CIRC_Shift, 5   @ bitWidth 1 (Circular mode)  
        .equ DMA2_PINC_Shift, 6   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA2_MINC_Shift, 7   @ bitWidth 1 (Memory increment mode)  
        .equ DMA2_PSIZE_Shift, 8   @ bitWidth 2 (Peripheral size)  
        .equ DMA2_MSIZE_Shift, 10   @ bitWidth 2 (Memory size)  
        .equ DMA2_PL_Shift, 12   @ bitWidth 2 (Channel Priority level)  
        .equ DMA2_MEM2MEM_Shift, 14   @ bitWidth 1 (Memory to memory mode)  
 
    .equ DMA2_CNDTR7, DMA2_BASE + 0x84 @ (DMA channel 7 number of data  register) 
        .equ DMA2_NDT_Shift, 0   @ bitWidth 16 (Number of data to transfer)  
 
    .equ DMA2_CPAR7, DMA2_BASE + 0x88 @ (DMA channel 7 peripheral address  register) 
        .equ DMA2_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA2_CMAR7, DMA2_BASE + 0x8C @ (DMA channel 7 memory address  register) 
        .equ DMA2_MA_Shift, 0   @ bitWidth 32 (Memory address)  
 

@=========================== SDIO ===========================@
.equ SDIO_BASE, 0x40018000 @ (Secure digital input/output  interface) 
    .equ SDIO_POWER, SDIO_BASE + 0x0 @ (Bits 1:0 = PWRCTRL: Power supply control  bits) 
        .equ SDIO_PWRCTRL_Shift, 0   @ bitWidth 2 (PWRCTRL)  
 
    .equ SDIO_CLKCR, SDIO_BASE + 0x4 @ (SDI clock control register  SDIO_CLKCR) 
        .equ SDIO_CLKDIV_Shift, 0   @ bitWidth 8 (Clock divide factor)  
        .equ SDIO_CLKEN_Shift, 8   @ bitWidth 1 (Clock enable bit)  
        .equ SDIO_PWRSAV_Shift, 9   @ bitWidth 1 (Power saving configuration  bit)  
        .equ SDIO_BYPASS_Shift, 10   @ bitWidth 1 (Clock divider bypass enable  bit)  
        .equ SDIO_WIDBUS_Shift, 11   @ bitWidth 2 (Wide bus mode enable bit)  
        .equ SDIO_NEGEDGE_Shift, 13   @ bitWidth 1 (SDIO_CK dephasing selection  bit)  
        .equ SDIO_HWFC_EN_Shift, 14   @ bitWidth 1 (HW Flow Control enable)  
 
    .equ SDIO_ARG, SDIO_BASE + 0x8 @ (Bits 31:0 = : Command argument) 
        .equ SDIO_CMDARG_Shift, 0   @ bitWidth 32 (Command argument)  
 
    .equ SDIO_CMD, SDIO_BASE + 0xC @ (SDIO command register  SDIO_CMD) 
        .equ SDIO_CMDINDEX_Shift, 0   @ bitWidth 6 (CMDINDEX)  
        .equ SDIO_WAITRESP_Shift, 6   @ bitWidth 2 (WAITRESP)  
        .equ SDIO_WAITINT_Shift, 8   @ bitWidth 1 (WAITINT)  
        .equ SDIO_WAITPEND_Shift, 9   @ bitWidth 1 (WAITPEND)  
        .equ SDIO_CPSMEN_Shift, 10   @ bitWidth 1 (CPSMEN)  
        .equ SDIO_SDIOSuspend_Shift, 11   @ bitWidth 1 (SDIOSuspend)  
        .equ SDIO_ENCMDcompl_Shift, 12   @ bitWidth 1 (ENCMDcompl)  
        .equ SDIO_nIEN_Shift, 13   @ bitWidth 1 (nIEN)  
        .equ SDIO_CE_ATACMD_Shift, 14   @ bitWidth 1 (CE_ATACMD)  
 
    .equ SDIO_RESPCMD, SDIO_BASE + 0x10 @ (SDIO command register) 
        .equ SDIO_RESPCMD_Shift, 0   @ bitWidth 6 (RESPCMD)  
 
    .equ SDIO_RESPI1, SDIO_BASE + 0x14 @ (Bits 31:0 = CARDSTATUS1) 
        .equ SDIO_CARDSTATUS1_Shift, 0   @ bitWidth 32 (CARDSTATUS1)  
 
    .equ SDIO_RESP2, SDIO_BASE + 0x18 @ (Bits 31:0 = CARDSTATUS2) 
        .equ SDIO_CARDSTATUS2_Shift, 0   @ bitWidth 32 (CARDSTATUS2)  
 
    .equ SDIO_RESP3, SDIO_BASE + 0x1C @ (Bits 31:0 = CARDSTATUS3) 
        .equ SDIO_CARDSTATUS3_Shift, 0   @ bitWidth 32 (CARDSTATUS3)  
 
    .equ SDIO_RESP4, SDIO_BASE + 0x20 @ (Bits 31:0 = CARDSTATUS4) 
        .equ SDIO_CARDSTATUS4_Shift, 0   @ bitWidth 32 (CARDSTATUS4)  
 
    .equ SDIO_DTIMER, SDIO_BASE + 0x24 @ (Bits 31:0 = DATATIME: Data timeout  period) 
        .equ SDIO_DATATIME_Shift, 0   @ bitWidth 32 (Data timeout period)  
 
    .equ SDIO_DLEN, SDIO_BASE + 0x28 @ (Bits 24:0 = DATALENGTH: Data length  value) 
        .equ SDIO_DATALENGTH_Shift, 0   @ bitWidth 25 (Data length value)  
 
    .equ SDIO_DCTRL, SDIO_BASE + 0x2C @ (SDIO data control register  SDIO_DCTRL) 
        .equ SDIO_DTEN_Shift, 0   @ bitWidth 1 (DTEN)  
        .equ SDIO_DTDIR_Shift, 1   @ bitWidth 1 (DTDIR)  
        .equ SDIO_DTMODE_Shift, 2   @ bitWidth 1 (DTMODE)  
        .equ SDIO_DMAEN_Shift, 3   @ bitWidth 1 (DMAEN)  
        .equ SDIO_DBLOCKSIZE_Shift, 4   @ bitWidth 4 (DBLOCKSIZE)  
        .equ SDIO_PWSTART_Shift, 8   @ bitWidth 1 (PWSTART)  
        .equ SDIO_PWSTOP_Shift, 9   @ bitWidth 1 (PWSTOP)  
        .equ SDIO_RWMOD_Shift, 10   @ bitWidth 1 (RWMOD)  
        .equ SDIO_SDIOEN_Shift, 11   @ bitWidth 1 (SDIOEN)  
 
    .equ SDIO_DCOUNT, SDIO_BASE + 0x30 @ (Bits 24:0 = DATACOUNT: Data count  value) 
        .equ SDIO_DATACOUNT_Shift, 0   @ bitWidth 25 (Data count value)  
 
    .equ SDIO_STA, SDIO_BASE + 0x34 @ (SDIO status register  SDIO_STA) 
        .equ SDIO_CCRCFAIL_Shift, 0   @ bitWidth 1 (CCRCFAIL)  
        .equ SDIO_DCRCFAIL_Shift, 1   @ bitWidth 1 (DCRCFAIL)  
        .equ SDIO_CTIMEOUT_Shift, 2   @ bitWidth 1 (CTIMEOUT)  
        .equ SDIO_DTIMEOUT_Shift, 3   @ bitWidth 1 (DTIMEOUT)  
        .equ SDIO_TXUNDERR_Shift, 4   @ bitWidth 1 (TXUNDERR)  
        .equ SDIO_RXOVERR_Shift, 5   @ bitWidth 1 (RXOVERR)  
        .equ SDIO_CMDREND_Shift, 6   @ bitWidth 1 (CMDREND)  
        .equ SDIO_CMDSENT_Shift, 7   @ bitWidth 1 (CMDSENT)  
        .equ SDIO_DATAEND_Shift, 8   @ bitWidth 1 (DATAEND)  
        .equ SDIO_STBITERR_Shift, 9   @ bitWidth 1 (STBITERR)  
        .equ SDIO_DBCKEND_Shift, 10   @ bitWidth 1 (DBCKEND)  
        .equ SDIO_CMDACT_Shift, 11   @ bitWidth 1 (CMDACT)  
        .equ SDIO_TXACT_Shift, 12   @ bitWidth 1 (TXACT)  
        .equ SDIO_RXACT_Shift, 13   @ bitWidth 1 (RXACT)  
        .equ SDIO_TXFIFOHE_Shift, 14   @ bitWidth 1 (TXFIFOHE)  
        .equ SDIO_RXFIFOHF_Shift, 15   @ bitWidth 1 (RXFIFOHF)  
        .equ SDIO_TXFIFOF_Shift, 16   @ bitWidth 1 (TXFIFOF)  
        .equ SDIO_RXFIFOF_Shift, 17   @ bitWidth 1 (RXFIFOF)  
        .equ SDIO_TXFIFOE_Shift, 18   @ bitWidth 1 (TXFIFOE)  
        .equ SDIO_RXFIFOE_Shift, 19   @ bitWidth 1 (RXFIFOE)  
        .equ SDIO_TXDAVL_Shift, 20   @ bitWidth 1 (TXDAVL)  
        .equ SDIO_RXDAVL_Shift, 21   @ bitWidth 1 (RXDAVL)  
        .equ SDIO_SDIOIT_Shift, 22   @ bitWidth 1 (SDIOIT)  
        .equ SDIO_CEATAEND_Shift, 23   @ bitWidth 1 (CEATAEND)  
 
    .equ SDIO_ICR, SDIO_BASE + 0x38 @ (SDIO interrupt clear register  SDIO_ICR) 
        .equ SDIO_CCRCFAILC_Shift, 0   @ bitWidth 1 (CCRCFAILC)  
        .equ SDIO_DCRCFAILC_Shift, 1   @ bitWidth 1 (DCRCFAILC)  
        .equ SDIO_CTIMEOUTC_Shift, 2   @ bitWidth 1 (CTIMEOUTC)  
        .equ SDIO_DTIMEOUTC_Shift, 3   @ bitWidth 1 (DTIMEOUTC)  
        .equ SDIO_TXUNDERRC_Shift, 4   @ bitWidth 1 (TXUNDERRC)  
        .equ SDIO_RXOVERRC_Shift, 5   @ bitWidth 1 (RXOVERRC)  
        .equ SDIO_CMDRENDC_Shift, 6   @ bitWidth 1 (CMDRENDC)  
        .equ SDIO_CMDSENTC_Shift, 7   @ bitWidth 1 (CMDSENTC)  
        .equ SDIO_DATAENDC_Shift, 8   @ bitWidth 1 (DATAENDC)  
        .equ SDIO_STBITERRC_Shift, 9   @ bitWidth 1 (STBITERRC)  
        .equ SDIO_DBCKENDC_Shift, 10   @ bitWidth 1 (DBCKENDC)  
        .equ SDIO_SDIOITC_Shift, 22   @ bitWidth 1 (SDIOITC)  
        .equ SDIO_CEATAENDC_Shift, 23   @ bitWidth 1 (CEATAENDC)  
 
    .equ SDIO_MASK, SDIO_BASE + 0x3C @ (SDIO mask register SDIO_MASK) 
        .equ SDIO_CCRCFAILIE_Shift, 0   @ bitWidth 1 (CCRCFAILIE)  
        .equ SDIO_DCRCFAILIE_Shift, 1   @ bitWidth 1 (DCRCFAILIE)  
        .equ SDIO_CTIMEOUTIE_Shift, 2   @ bitWidth 1 (CTIMEOUTIE)  
        .equ SDIO_DTIMEOUTIE_Shift, 3   @ bitWidth 1 (DTIMEOUTIE)  
        .equ SDIO_TXUNDERRIE_Shift, 4   @ bitWidth 1 (TXUNDERRIE)  
        .equ SDIO_RXOVERRIE_Shift, 5   @ bitWidth 1 (RXOVERRIE)  
        .equ SDIO_CMDRENDIE_Shift, 6   @ bitWidth 1 (CMDRENDIE)  
        .equ SDIO_CMDSENTIE_Shift, 7   @ bitWidth 1 (CMDSENTIE)  
        .equ SDIO_DATAENDIE_Shift, 8   @ bitWidth 1 (DATAENDIE)  
        .equ SDIO_STBITERRIE_Shift, 9   @ bitWidth 1 (STBITERRIE)  
        .equ SDIO_DBACKENDIE_Shift, 10   @ bitWidth 1 (DBACKENDIE)  
        .equ SDIO_CMDACTIE_Shift, 11   @ bitWidth 1 (CMDACTIE)  
        .equ SDIO_TXACTIE_Shift, 12   @ bitWidth 1 (TXACTIE)  
        .equ SDIO_RXACTIE_Shift, 13   @ bitWidth 1 (RXACTIE)  
        .equ SDIO_TXFIFOHEIE_Shift, 14   @ bitWidth 1 (TXFIFOHEIE)  
        .equ SDIO_RXFIFOHFIE_Shift, 15   @ bitWidth 1 (RXFIFOHFIE)  
        .equ SDIO_TXFIFOFIE_Shift, 16   @ bitWidth 1 (TXFIFOFIE)  
        .equ SDIO_RXFIFOFIE_Shift, 17   @ bitWidth 1 (RXFIFOFIE)  
        .equ SDIO_TXFIFOEIE_Shift, 18   @ bitWidth 1 (TXFIFOEIE)  
        .equ SDIO_RXFIFOEIE_Shift, 19   @ bitWidth 1 (RXFIFOEIE)  
        .equ SDIO_TXDAVLIE_Shift, 20   @ bitWidth 1 (TXDAVLIE)  
        .equ SDIO_RXDAVLIE_Shift, 21   @ bitWidth 1 (RXDAVLIE)  
        .equ SDIO_SDIOITIE_Shift, 22   @ bitWidth 1 (SDIOITIE)  
        .equ SDIO_CEATENDIE_Shift, 23   @ bitWidth 1 (CEATENDIE)  
 
    .equ SDIO_FIFOCNT, SDIO_BASE + 0x48 @ (Bits 23:0 = FIFOCOUNT: Remaining number of  words to be written to or read from the  FIFO) 
        .equ SDIO_FIF0COUNT_Shift, 0   @ bitWidth 24 (FIF0COUNT)  
 
    .equ SDIO_FIFO, SDIO_BASE + 0x80 @ (bits 31:0 = FIFOData: Receive and transmit  FIFO data) 
        .equ SDIO_FIFOData_Shift, 0   @ bitWidth 32 (FIFOData)  
 

@=========================== RTC ===========================@
.equ RTC_BASE, 0x40002800 @ (Real time clock) 
    .equ RTC_CRH, RTC_BASE + 0x0 @ (RTC Control Register High) 
        .equ RTC_SECIE_Shift, 0   @ bitWidth 1 (Second interrupt Enable)  
        .equ RTC_ALRIE_Shift, 1   @ bitWidth 1 (Alarm interrupt Enable)  
        .equ RTC_OWIE_Shift, 2   @ bitWidth 1 (Overflow interrupt Enable)  
 
    .equ RTC_CRL, RTC_BASE + 0x4 @ (RTC Control Register Low) 
        .equ RTC_SECF_Shift, 0   @ bitWidth 1 (Second Flag)  
        .equ RTC_ALRF_Shift, 1   @ bitWidth 1 (Alarm Flag)  
        .equ RTC_OWF_Shift, 2   @ bitWidth 1 (Overflow Flag)  
        .equ RTC_RSF_Shift, 3   @ bitWidth 1 (Registers Synchronized  Flag)  
        .equ RTC_CNF_Shift, 4   @ bitWidth 1 (Configuration Flag)  
        .equ RTC_RTOFF_Shift, 5   @ bitWidth 1 (RTC operation OFF)  
 
    .equ RTC_PRLH, RTC_BASE + 0x8 @ (RTC Prescaler Load Register  High) 
        .equ RTC_PRLH_Shift, 0   @ bitWidth 4 (RTC Prescaler Load Register  High)  
 
    .equ RTC_PRLL, RTC_BASE + 0xC @ (RTC Prescaler Load Register  Low) 
        .equ RTC_PRLL_Shift, 0   @ bitWidth 16 (RTC Prescaler Divider Register  Low)  
 
    .equ RTC_DIVH, RTC_BASE + 0x10 @ (RTC Prescaler Divider Register  High) 
        .equ RTC_DIVH_Shift, 0   @ bitWidth 4 (RTC prescaler divider register  high)  
 
    .equ RTC_DIVL, RTC_BASE + 0x14 @ (RTC Prescaler Divider Register  Low) 
        .equ RTC_DIVL_Shift, 0   @ bitWidth 16 (RTC prescaler divider register  Low)  
 
    .equ RTC_CNTH, RTC_BASE + 0x18 @ (RTC Counter Register High) 
        .equ RTC_CNTH_Shift, 0   @ bitWidth 16 (RTC counter register high)  
 
    .equ RTC_CNTL, RTC_BASE + 0x1C @ (RTC Counter Register Low) 
        .equ RTC_CNTL_Shift, 0   @ bitWidth 16 (RTC counter register Low)  
 
    .equ RTC_ALRH, RTC_BASE + 0x20 @ (RTC Alarm Register High) 
        .equ RTC_ALRH_Shift, 0   @ bitWidth 16 (RTC alarm register high)  
 
    .equ RTC_ALRL, RTC_BASE + 0x24 @ (RTC Alarm Register Low) 
        .equ RTC_ALRL_Shift, 0   @ bitWidth 16 (RTC alarm register low)  
 

@=========================== BKP ===========================@
.equ BKP_BASE, 0x40006C04 @ (Backup registers) 
    .equ BKP_DR1, BKP_BASE + 0x0 @ (Backup data register BKP_DR) 
        .equ BKP_D1_Shift, 0   @ bitWidth 16 (Backup data)  
 
    .equ BKP_DR2, BKP_BASE + 0x4 @ (Backup data register BKP_DR) 
        .equ BKP_D2_Shift, 0   @ bitWidth 16 (Backup data)  
 
    .equ BKP_DR3, BKP_BASE + 0x8 @ (Backup data register BKP_DR) 
        .equ BKP_D3_Shift, 0   @ bitWidth 16 (Backup data)  
 
    .equ BKP_DR4, BKP_BASE + 0xC @ (Backup data register BKP_DR) 
        .equ BKP_D4_Shift, 0   @ bitWidth 16 (Backup data)  
 
    .equ BKP_DR5, BKP_BASE + 0x10 @ (Backup data register BKP_DR) 
        .equ BKP_D5_Shift, 0   @ bitWidth 16 (Backup data)  
 
    .equ BKP_DR6, BKP_BASE + 0x14 @ (Backup data register BKP_DR) 
        .equ BKP_D6_Shift, 0   @ bitWidth 16 (Backup data)  
 
    .equ BKP_DR7, BKP_BASE + 0x18 @ (Backup data register BKP_DR) 
        .equ BKP_D7_Shift, 0   @ bitWidth 16 (Backup data)  
 
    .equ BKP_DR8, BKP_BASE + 0x1C @ (Backup data register BKP_DR) 
        .equ BKP_D8_Shift, 0   @ bitWidth 16 (Backup data)  
 
    .equ BKP_DR9, BKP_BASE + 0x20 @ (Backup data register BKP_DR) 
        .equ BKP_D9_Shift, 0   @ bitWidth 16 (Backup data)  
 
    .equ BKP_DR10, BKP_BASE + 0x24 @ (Backup data register BKP_DR) 
        .equ BKP_D10_Shift, 0   @ bitWidth 16 (Backup data)  
 
    .equ BKP_DR11, BKP_BASE + 0x3C @ (Backup data register BKP_DR) 
        .equ BKP_DR11_Shift, 0   @ bitWidth 16 (Backup data)  
 
    .equ BKP_DR12, BKP_BASE + 0x40 @ (Backup data register BKP_DR) 
        .equ BKP_DR12_Shift, 0   @ bitWidth 16 (Backup data)  
 
    .equ BKP_DR13, BKP_BASE + 0x44 @ (Backup data register BKP_DR) 
        .equ BKP_DR13_Shift, 0   @ bitWidth 16 (Backup data)  
 
    .equ BKP_DR14, BKP_BASE + 0x48 @ (Backup data register BKP_DR) 
        .equ BKP_D14_Shift, 0   @ bitWidth 16 (Backup data)  
 
    .equ BKP_DR15, BKP_BASE + 0x4C @ (Backup data register BKP_DR) 
        .equ BKP_D15_Shift, 0   @ bitWidth 16 (Backup data)  
 
    .equ BKP_DR16, BKP_BASE + 0x50 @ (Backup data register BKP_DR) 
        .equ BKP_D16_Shift, 0   @ bitWidth 16 (Backup data)  
 
    .equ BKP_DR17, BKP_BASE + 0x54 @ (Backup data register BKP_DR) 
        .equ BKP_D17_Shift, 0   @ bitWidth 16 (Backup data)  
 
    .equ BKP_DR18, BKP_BASE + 0x58 @ (Backup data register BKP_DR) 
        .equ BKP_D18_Shift, 0   @ bitWidth 16 (Backup data)  
 
    .equ BKP_DR19, BKP_BASE + 0x5C @ (Backup data register BKP_DR) 
        .equ BKP_D19_Shift, 0   @ bitWidth 16 (Backup data)  
 
    .equ BKP_DR20, BKP_BASE + 0x60 @ (Backup data register BKP_DR) 
        .equ BKP_D20_Shift, 0   @ bitWidth 16 (Backup data)  
 
    .equ BKP_DR21, BKP_BASE + 0x64 @ (Backup data register BKP_DR) 
        .equ BKP_D21_Shift, 0   @ bitWidth 16 (Backup data)  
 
    .equ BKP_DR22, BKP_BASE + 0x68 @ (Backup data register BKP_DR) 
        .equ BKP_D22_Shift, 0   @ bitWidth 16 (Backup data)  
 
    .equ BKP_DR23, BKP_BASE + 0x6C @ (Backup data register BKP_DR) 
        .equ BKP_D23_Shift, 0   @ bitWidth 16 (Backup data)  
 
    .equ BKP_DR24, BKP_BASE + 0x70 @ (Backup data register BKP_DR) 
        .equ BKP_D24_Shift, 0   @ bitWidth 16 (Backup data)  
 
    .equ BKP_DR25, BKP_BASE + 0x74 @ (Backup data register BKP_DR) 
        .equ BKP_D25_Shift, 0   @ bitWidth 16 (Backup data)  
 
    .equ BKP_DR26, BKP_BASE + 0x78 @ (Backup data register BKP_DR) 
        .equ BKP_D26_Shift, 0   @ bitWidth 16 (Backup data)  
 
    .equ BKP_DR27, BKP_BASE + 0x7C @ (Backup data register BKP_DR) 
        .equ BKP_D27_Shift, 0   @ bitWidth 16 (Backup data)  
 
    .equ BKP_DR28, BKP_BASE + 0x80 @ (Backup data register BKP_DR) 
        .equ BKP_D28_Shift, 0   @ bitWidth 16 (Backup data)  
 
    .equ BKP_DR29, BKP_BASE + 0x84 @ (Backup data register BKP_DR) 
        .equ BKP_D29_Shift, 0   @ bitWidth 16 (Backup data)  
 
    .equ BKP_DR30, BKP_BASE + 0x88 @ (Backup data register BKP_DR) 
        .equ BKP_D30_Shift, 0   @ bitWidth 16 (Backup data)  
 
    .equ BKP_DR31, BKP_BASE + 0x8C @ (Backup data register BKP_DR) 
        .equ BKP_D31_Shift, 0   @ bitWidth 16 (Backup data)  
 
    .equ BKP_DR32, BKP_BASE + 0x90 @ (Backup data register BKP_DR) 
        .equ BKP_D32_Shift, 0   @ bitWidth 16 (Backup data)  
 
    .equ BKP_DR33, BKP_BASE + 0x94 @ (Backup data register BKP_DR) 
        .equ BKP_D33_Shift, 0   @ bitWidth 16 (Backup data)  
 
    .equ BKP_DR34, BKP_BASE + 0x98 @ (Backup data register BKP_DR) 
        .equ BKP_D34_Shift, 0   @ bitWidth 16 (Backup data)  
 
    .equ BKP_DR35, BKP_BASE + 0x9C @ (Backup data register BKP_DR) 
        .equ BKP_D35_Shift, 0   @ bitWidth 16 (Backup data)  
 
    .equ BKP_DR36, BKP_BASE + 0xA0 @ (Backup data register BKP_DR) 
        .equ BKP_D36_Shift, 0   @ bitWidth 16 (Backup data)  
 
    .equ BKP_DR37, BKP_BASE + 0xA4 @ (Backup data register BKP_DR) 
        .equ BKP_D37_Shift, 0   @ bitWidth 16 (Backup data)  
 
    .equ BKP_DR38, BKP_BASE + 0xA8 @ (Backup data register BKP_DR) 
        .equ BKP_D38_Shift, 0   @ bitWidth 16 (Backup data)  
 
    .equ BKP_DR39, BKP_BASE + 0xAC @ (Backup data register BKP_DR) 
        .equ BKP_D39_Shift, 0   @ bitWidth 16 (Backup data)  
 
    .equ BKP_DR40, BKP_BASE + 0xB0 @ (Backup data register BKP_DR) 
        .equ BKP_D40_Shift, 0   @ bitWidth 16 (Backup data)  
 
    .equ BKP_DR41, BKP_BASE + 0xB4 @ (Backup data register BKP_DR) 
        .equ BKP_D41_Shift, 0   @ bitWidth 16 (Backup data)  
 
    .equ BKP_DR42, BKP_BASE + 0xB8 @ (Backup data register BKP_DR) 
        .equ BKP_D42_Shift, 0   @ bitWidth 16 (Backup data)  
 
    .equ BKP_RTCCR, BKP_BASE + 0x28 @ (RTC clock calibration register  BKP_RTCCR) 
        .equ BKP_CAL_Shift, 0   @ bitWidth 7 (Calibration value)  
        .equ BKP_CCO_Shift, 7   @ bitWidth 1 (Calibration Clock Output)  
        .equ BKP_ASOE_Shift, 8   @ bitWidth 1 (Alarm or second output  enable)  
        .equ BKP_ASOS_Shift, 9   @ bitWidth 1 (Alarm or second output  selection)  
 
    .equ BKP_CR, BKP_BASE + 0x2C @ (Backup control register  BKP_CR) 
        .equ BKP_TPE_Shift, 0   @ bitWidth 1 (Tamper pin enable)  
        .equ BKP_TPAL_Shift, 1   @ bitWidth 1 (Tamper pin active level)  
 
    .equ BKP_CSR, BKP_BASE + 0x30 @ (BKP_CSR control/status register  BKP_CSR) 
        .equ BKP_CTE_Shift, 0   @ bitWidth 1 (Clear Tamper event)  
        .equ BKP_CTI_Shift, 1   @ bitWidth 1 (Clear Tamper Interrupt)  
        .equ BKP_TPIE_Shift, 2   @ bitWidth 1 (Tamper Pin interrupt  enable)  
        .equ BKP_TEF_Shift, 8   @ bitWidth 1 (Tamper Event Flag)  
        .equ BKP_TIF_Shift, 9   @ bitWidth 1 (Tamper Interrupt Flag)  
 

@=========================== IWDG ===========================@
.equ IWDG_BASE, 0x40003000 @ (Independent watchdog) 
    .equ IWDG_KR, IWDG_BASE + 0x0 @ (Key register IWDG_KR) 
        .equ IWDG_KEY_Shift, 0   @ bitWidth 16 (Key value)  
 
    .equ IWDG_PR, IWDG_BASE + 0x4 @ (Prescaler register IWDG_PR) 
        .equ IWDG_PR_Shift, 0   @ bitWidth 3 (Prescaler divider)  
 
    .equ IWDG_RLR, IWDG_BASE + 0x8 @ (Reload register IWDG_RLR) 
        .equ IWDG_RL_Shift, 0   @ bitWidth 12 (Watchdog counter reload  value)  
 
    .equ IWDG_SR, IWDG_BASE + 0xC @ (Status register IWDG_SR) 
        .equ IWDG_PVU_Shift, 0   @ bitWidth 1 (Watchdog prescaler value  update)  
        .equ IWDG_RVU_Shift, 1   @ bitWidth 1 (Watchdog counter reload value  update)  
 

@=========================== WWDG ===========================@
.equ WWDG_BASE, 0x40002C00 @ (Window watchdog) 
    .equ WWDG_CR, WWDG_BASE + 0x0 @ (Control register WWDG_CR) 
        .equ WWDG_T_Shift, 0   @ bitWidth 7 (7-bit counter MSB to LSB)  
        .equ WWDG_WDGA_Shift, 7   @ bitWidth 1 (Activation bit)  
 
    .equ WWDG_CFR, WWDG_BASE + 0x4 @ (Configuration register  WWDG_CFR) 
        .equ WWDG_W_Shift, 0   @ bitWidth 7 (7-bit window value)  
        .equ WWDG_WDGTB_Shift, 7   @ bitWidth 2 (Timer Base)  
        .equ WWDG_EWI_Shift, 9   @ bitWidth 1 (Early Wakeup Interrupt)  
 
    .equ WWDG_SR, WWDG_BASE + 0x8 @ (Status register WWDG_SR) 
        .equ WWDG_EWI_Shift, 0   @ bitWidth 1 (Early Wakeup Interrupt)  
 

@=========================== TIM1 ===========================@
.equ TIM1_BASE, 0x40012C00 @ (Advanced timer) 
    .equ TIM1_CR1, TIM1_BASE + 0x0 @ (control register 1) 
        .equ TIM1_CKD_Shift, 8   @ bitWidth 2 (Clock division)  
        .equ TIM1_ARPE_Shift, 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM1_CMS_Shift, 5   @ bitWidth 2 (Center-aligned mode  selection)  
        .equ TIM1_DIR_Shift, 4   @ bitWidth 1 (Direction)  
        .equ TIM1_OPM_Shift, 3   @ bitWidth 1 (One-pulse mode)  
        .equ TIM1_URS_Shift, 2   @ bitWidth 1 (Update request source)  
        .equ TIM1_UDIS_Shift, 1   @ bitWidth 1 (Update disable)  
        .equ TIM1_CEN_Shift, 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM1_CR2, TIM1_BASE + 0x4 @ (control register 2) 
        .equ TIM1_OIS4_Shift, 14   @ bitWidth 1 (Output Idle state 4)  
        .equ TIM1_OIS3N_Shift, 13   @ bitWidth 1 (Output Idle state 3)  
        .equ TIM1_OIS3_Shift, 12   @ bitWidth 1 (Output Idle state 3)  
        .equ TIM1_OIS2N_Shift, 11   @ bitWidth 1 (Output Idle state 2)  
        .equ TIM1_OIS2_Shift, 10   @ bitWidth 1 (Output Idle state 2)  
        .equ TIM1_OIS1N_Shift, 9   @ bitWidth 1 (Output Idle state 1)  
        .equ TIM1_OIS1_Shift, 8   @ bitWidth 1 (Output Idle state 1)  
        .equ TIM1_TI1S_Shift, 7   @ bitWidth 1 (TI1 selection)  
        .equ TIM1_MMS_Shift, 4   @ bitWidth 3 (Master mode selection)  
        .equ TIM1_CCDS_Shift, 3   @ bitWidth 1 (Capture/compare DMA  selection)  
        .equ TIM1_CCUS_Shift, 2   @ bitWidth 1 (Capture/compare control update  selection)  
        .equ TIM1_CCPC_Shift, 0   @ bitWidth 1 (Capture/compare preloaded  control)  
 
    .equ TIM1_SMCR, TIM1_BASE + 0x8 @ (slave mode control register) 
        .equ TIM1_ETP_Shift, 15   @ bitWidth 1 (External trigger polarity)  
        .equ TIM1_ECE_Shift, 14   @ bitWidth 1 (External clock enable)  
        .equ TIM1_ETPS_Shift, 12   @ bitWidth 2 (External trigger prescaler)  
        .equ TIM1_ETF_Shift, 8   @ bitWidth 4 (External trigger filter)  
        .equ TIM1_MSM_Shift, 7   @ bitWidth 1 (Master/Slave mode)  
        .equ TIM1_TS_Shift, 4   @ bitWidth 3 (Trigger selection)  
        .equ TIM1_SMS_Shift, 0   @ bitWidth 3 (Slave mode selection)  
 
    .equ TIM1_DIER, TIM1_BASE + 0xC @ (DMA/Interrupt enable register) 
        .equ TIM1_TDE_Shift, 14   @ bitWidth 1 (Trigger DMA request enable)  
        .equ TIM1_COMDE_Shift, 13   @ bitWidth 1 (COM DMA request enable)  
        .equ TIM1_CC4DE_Shift, 12   @ bitWidth 1 (Capture/Compare 4 DMA request  enable)  
        .equ TIM1_CC3DE_Shift, 11   @ bitWidth 1 (Capture/Compare 3 DMA request  enable)  
        .equ TIM1_CC2DE_Shift, 10   @ bitWidth 1 (Capture/Compare 2 DMA request  enable)  
        .equ TIM1_CC1DE_Shift, 9   @ bitWidth 1 (Capture/Compare 1 DMA request  enable)  
        .equ TIM1_UDE_Shift, 8   @ bitWidth 1 (Update DMA request enable)  
        .equ TIM1_TIE_Shift, 6   @ bitWidth 1 (Trigger interrupt enable)  
        .equ TIM1_CC4IE_Shift, 4   @ bitWidth 1 (Capture/Compare 4 interrupt  enable)  
        .equ TIM1_CC3IE_Shift, 3   @ bitWidth 1 (Capture/Compare 3 interrupt  enable)  
        .equ TIM1_CC2IE_Shift, 2   @ bitWidth 1 (Capture/Compare 2 interrupt  enable)  
        .equ TIM1_CC1IE_Shift, 1   @ bitWidth 1 (Capture/Compare 1 interrupt  enable)  
        .equ TIM1_UIE_Shift, 0   @ bitWidth 1 (Update interrupt enable)  
        .equ TIM1_BIE_Shift, 7   @ bitWidth 1 (Break interrupt enable)  
        .equ TIM1_COMIE_Shift, 5   @ bitWidth 1 (COM interrupt enable)  
 
    .equ TIM1_SR, TIM1_BASE + 0x10 @ (status register) 
        .equ TIM1_CC4OF_Shift, 12   @ bitWidth 1 (Capture/Compare 4 overcapture  flag)  
        .equ TIM1_CC3OF_Shift, 11   @ bitWidth 1 (Capture/Compare 3 overcapture  flag)  
        .equ TIM1_CC2OF_Shift, 10   @ bitWidth 1 (Capture/compare 2 overcapture  flag)  
        .equ TIM1_CC1OF_Shift, 9   @ bitWidth 1 (Capture/Compare 1 overcapture  flag)  
        .equ TIM1_BIF_Shift, 7   @ bitWidth 1 (Break interrupt flag)  
        .equ TIM1_TIF_Shift, 6   @ bitWidth 1 (Trigger interrupt flag)  
        .equ TIM1_COMIF_Shift, 5   @ bitWidth 1 (COM interrupt flag)  
        .equ TIM1_CC4IF_Shift, 4   @ bitWidth 1 (Capture/Compare 4 interrupt  flag)  
        .equ TIM1_CC3IF_Shift, 3   @ bitWidth 1 (Capture/Compare 3 interrupt  flag)  
        .equ TIM1_CC2IF_Shift, 2   @ bitWidth 1 (Capture/Compare 2 interrupt  flag)  
        .equ TIM1_CC1IF_Shift, 1   @ bitWidth 1 (Capture/compare 1 interrupt  flag)  
        .equ TIM1_UIF_Shift, 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM1_EGR, TIM1_BASE + 0x14 @ (event generation register) 
        .equ TIM1_BG_Shift, 7   @ bitWidth 1 (Break generation)  
        .equ TIM1_TG_Shift, 6   @ bitWidth 1 (Trigger generation)  
        .equ TIM1_COMG_Shift, 5   @ bitWidth 1 (Capture/Compare control update  generation)  
        .equ TIM1_CC4G_Shift, 4   @ bitWidth 1 (Capture/compare 4  generation)  
        .equ TIM1_CC3G_Shift, 3   @ bitWidth 1 (Capture/compare 3  generation)  
        .equ TIM1_CC2G_Shift, 2   @ bitWidth 1 (Capture/compare 2  generation)  
        .equ TIM1_CC1G_Shift, 1   @ bitWidth 1 (Capture/compare 1  generation)  
        .equ TIM1_UG_Shift, 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM1_CCMR1_Output, TIM1_BASE + 0x18 @ (capture/compare mode register output  mode) 
        .equ TIM1_OC2CE_Shift, 15   @ bitWidth 1 (Output Compare 2 clear  enable)  
        .equ TIM1_OC2M_Shift, 12   @ bitWidth 3 (Output Compare 2 mode)  
        .equ TIM1_OC2PE_Shift, 11   @ bitWidth 1 (Output Compare 2 preload  enable)  
        .equ TIM1_OC2FE_Shift, 10   @ bitWidth 1 (Output Compare 2 fast  enable)  
        .equ TIM1_CC2S_Shift, 8   @ bitWidth 2 (Capture/Compare 2  selection)  
        .equ TIM1_OC1CE_Shift, 7   @ bitWidth 1 (Output Compare 1 clear  enable)  
        .equ TIM1_OC1M_Shift, 4   @ bitWidth 3 (Output Compare 1 mode)  
        .equ TIM1_OC1PE_Shift, 3   @ bitWidth 1 (Output Compare 1 preload  enable)  
        .equ TIM1_OC1FE_Shift, 2   @ bitWidth 1 (Output Compare 1 fast  enable)  
        .equ TIM1_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM1_CCMR1_Input, TIM1_BASE + 0x18 @ (capture/compare mode register 1 input  mode) 
        .equ TIM1_IC2F_Shift, 12   @ bitWidth 4 (Input capture 2 filter)  
        .equ TIM1_IC2PCS_Shift, 10   @ bitWidth 2 (Input capture 2 prescaler)  
        .equ TIM1_CC2S_Shift, 8   @ bitWidth 2 (Capture/Compare 2  selection)  
        .equ TIM1_IC1F_Shift, 4   @ bitWidth 4 (Input capture 1 filter)  
        .equ TIM1_ICPCS_Shift, 2   @ bitWidth 2 (Input capture 1 prescaler)  
        .equ TIM1_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM1_CCMR2_Output, TIM1_BASE + 0x1C @ (capture/compare mode register output  mode) 
        .equ TIM1_OC4CE_Shift, 15   @ bitWidth 1 (Output compare 4 clear  enable)  
        .equ TIM1_OC4M_Shift, 12   @ bitWidth 3 (Output compare 4 mode)  
        .equ TIM1_OC4PE_Shift, 11   @ bitWidth 1 (Output compare 4 preload  enable)  
        .equ TIM1_OC4FE_Shift, 10   @ bitWidth 1 (Output compare 4 fast  enable)  
        .equ TIM1_CC4S_Shift, 8   @ bitWidth 2 (Capture/Compare 4  selection)  
        .equ TIM1_OC3CE_Shift, 7   @ bitWidth 1 (Output compare 3 clear  enable)  
        .equ TIM1_OC3M_Shift, 4   @ bitWidth 3 (Output compare 3 mode)  
        .equ TIM1_OC3PE_Shift, 3   @ bitWidth 1 (Output compare 3 preload  enable)  
        .equ TIM1_OC3FE_Shift, 2   @ bitWidth 1 (Output compare 3 fast  enable)  
        .equ TIM1_CC3S_Shift, 0   @ bitWidth 2 (Capture/Compare 3  selection)  
 
    .equ TIM1_CCMR2_Input, TIM1_BASE + 0x1C @ (capture/compare mode register 2 input  mode) 
        .equ TIM1_IC4F_Shift, 12   @ bitWidth 4 (Input capture 4 filter)  
        .equ TIM1_IC4PSC_Shift, 10   @ bitWidth 2 (Input capture 4 prescaler)  
        .equ TIM1_CC4S_Shift, 8   @ bitWidth 2 (Capture/Compare 4  selection)  
        .equ TIM1_IC3F_Shift, 4   @ bitWidth 4 (Input capture 3 filter)  
        .equ TIM1_IC3PSC_Shift, 2   @ bitWidth 2 (Input capture 3 prescaler)  
        .equ TIM1_CC3S_Shift, 0   @ bitWidth 2 (Capture/compare 3  selection)  
 
    .equ TIM1_CCER, TIM1_BASE + 0x20 @ (capture/compare enable  register) 
        .equ TIM1_CC4P_Shift, 13   @ bitWidth 1 (Capture/Compare 3 output  Polarity)  
        .equ TIM1_CC4E_Shift, 12   @ bitWidth 1 (Capture/Compare 4 output  enable)  
        .equ TIM1_CC3NP_Shift, 11   @ bitWidth 1 (Capture/Compare 3 output  Polarity)  
        .equ TIM1_CC3NE_Shift, 10   @ bitWidth 1 (Capture/Compare 3 complementary output  enable)  
        .equ TIM1_CC3P_Shift, 9   @ bitWidth 1 (Capture/Compare 3 output  Polarity)  
        .equ TIM1_CC3E_Shift, 8   @ bitWidth 1 (Capture/Compare 3 output  enable)  
        .equ TIM1_CC2NP_Shift, 7   @ bitWidth 1 (Capture/Compare 2 output  Polarity)  
        .equ TIM1_CC2NE_Shift, 6   @ bitWidth 1 (Capture/Compare 2 complementary output  enable)  
        .equ TIM1_CC2P_Shift, 5   @ bitWidth 1 (Capture/Compare 2 output  Polarity)  
        .equ TIM1_CC2E_Shift, 4   @ bitWidth 1 (Capture/Compare 2 output  enable)  
        .equ TIM1_CC1NP_Shift, 3   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM1_CC1NE_Shift, 2   @ bitWidth 1 (Capture/Compare 1 complementary output  enable)  
        .equ TIM1_CC1P_Shift, 1   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM1_CC1E_Shift, 0   @ bitWidth 1 (Capture/Compare 1 output  enable)  
 
    .equ TIM1_CNT, TIM1_BASE + 0x24 @ (counter) 
        .equ TIM1_CNT_Shift, 0   @ bitWidth 16 (counter value)  
 
    .equ TIM1_PSC, TIM1_BASE + 0x28 @ (prescaler) 
        .equ TIM1_PSC_Shift, 0   @ bitWidth 16 (Prescaler value)  
 
    .equ TIM1_ARR, TIM1_BASE + 0x2C @ (auto-reload register) 
        .equ TIM1_ARR_Shift, 0   @ bitWidth 16 (Auto-reload value)  
 
    .equ TIM1_CCR1, TIM1_BASE + 0x34 @ (capture/compare register 1) 
        .equ TIM1_CCR1_Shift, 0   @ bitWidth 16 (Capture/Compare 1 value)  
 
    .equ TIM1_CCR2, TIM1_BASE + 0x38 @ (capture/compare register 2) 
        .equ TIM1_CCR2_Shift, 0   @ bitWidth 16 (Capture/Compare 2 value)  
 
    .equ TIM1_CCR3, TIM1_BASE + 0x3C @ (capture/compare register 3) 
        .equ TIM1_CCR3_Shift, 0   @ bitWidth 16 (Capture/Compare value)  
 
    .equ TIM1_CCR4, TIM1_BASE + 0x40 @ (capture/compare register 4) 
        .equ TIM1_CCR4_Shift, 0   @ bitWidth 16 (Capture/Compare value)  
 
    .equ TIM1_DCR, TIM1_BASE + 0x48 @ (DMA control register) 
        .equ TIM1_DBL_Shift, 8   @ bitWidth 5 (DMA burst length)  
        .equ TIM1_DBA_Shift, 0   @ bitWidth 5 (DMA base address)  
 
    .equ TIM1_DMAR, TIM1_BASE + 0x4C @ (DMA address for full transfer) 
        .equ TIM1_DMAB_Shift, 0   @ bitWidth 16 (DMA register for burst  accesses)  
 
    .equ TIM1_RCR, TIM1_BASE + 0x30 @ (repetition counter register) 
        .equ TIM1_REP_Shift, 0   @ bitWidth 8 (Repetition counter value)  
 
    .equ TIM1_BDTR, TIM1_BASE + 0x44 @ (break and dead-time register) 
        .equ TIM1_MOE_Shift, 15   @ bitWidth 1 (Main output enable)  
        .equ TIM1_AOE_Shift, 14   @ bitWidth 1 (Automatic output enable)  
        .equ TIM1_BKP_Shift, 13   @ bitWidth 1 (Break polarity)  
        .equ TIM1_BKE_Shift, 12   @ bitWidth 1 (Break enable)  
        .equ TIM1_OSSR_Shift, 11   @ bitWidth 1 (Off-state selection for Run  mode)  
        .equ TIM1_OSSI_Shift, 10   @ bitWidth 1 (Off-state selection for Idle  mode)  
        .equ TIM1_LOCK_Shift, 8   @ bitWidth 2 (Lock configuration)  
        .equ TIM1_DTG_Shift, 0   @ bitWidth 8 (Dead-time generator setup)  
 

@=========================== TIM8 ===========================@
.equ TIM8_BASE, 0x40013400 @ (Advanced timer) 
    .equ TIM8_CR1, TIM8_BASE + 0x0 @ (control register 1) 
        .equ TIM8_CKD_Shift, 8   @ bitWidth 2 (Clock division)  
        .equ TIM8_ARPE_Shift, 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM8_CMS_Shift, 5   @ bitWidth 2 (Center-aligned mode  selection)  
        .equ TIM8_DIR_Shift, 4   @ bitWidth 1 (Direction)  
        .equ TIM8_OPM_Shift, 3   @ bitWidth 1 (One-pulse mode)  
        .equ TIM8_URS_Shift, 2   @ bitWidth 1 (Update request source)  
        .equ TIM8_UDIS_Shift, 1   @ bitWidth 1 (Update disable)  
        .equ TIM8_CEN_Shift, 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM8_CR2, TIM8_BASE + 0x4 @ (control register 2) 
        .equ TIM8_OIS4_Shift, 14   @ bitWidth 1 (Output Idle state 4)  
        .equ TIM8_OIS3N_Shift, 13   @ bitWidth 1 (Output Idle state 3)  
        .equ TIM8_OIS3_Shift, 12   @ bitWidth 1 (Output Idle state 3)  
        .equ TIM8_OIS2N_Shift, 11   @ bitWidth 1 (Output Idle state 2)  
        .equ TIM8_OIS2_Shift, 10   @ bitWidth 1 (Output Idle state 2)  
        .equ TIM8_OIS1N_Shift, 9   @ bitWidth 1 (Output Idle state 1)  
        .equ TIM8_OIS1_Shift, 8   @ bitWidth 1 (Output Idle state 1)  
        .equ TIM8_TI1S_Shift, 7   @ bitWidth 1 (TI1 selection)  
        .equ TIM8_MMS_Shift, 4   @ bitWidth 3 (Master mode selection)  
        .equ TIM8_CCDS_Shift, 3   @ bitWidth 1 (Capture/compare DMA  selection)  
        .equ TIM8_CCUS_Shift, 2   @ bitWidth 1 (Capture/compare control update  selection)  
        .equ TIM8_CCPC_Shift, 0   @ bitWidth 1 (Capture/compare preloaded  control)  
 
    .equ TIM8_SMCR, TIM8_BASE + 0x8 @ (slave mode control register) 
        .equ TIM8_ETP_Shift, 15   @ bitWidth 1 (External trigger polarity)  
        .equ TIM8_ECE_Shift, 14   @ bitWidth 1 (External clock enable)  
        .equ TIM8_ETPS_Shift, 12   @ bitWidth 2 (External trigger prescaler)  
        .equ TIM8_ETF_Shift, 8   @ bitWidth 4 (External trigger filter)  
        .equ TIM8_MSM_Shift, 7   @ bitWidth 1 (Master/Slave mode)  
        .equ TIM8_TS_Shift, 4   @ bitWidth 3 (Trigger selection)  
        .equ TIM8_SMS_Shift, 0   @ bitWidth 3 (Slave mode selection)  
 
    .equ TIM8_DIER, TIM8_BASE + 0xC @ (DMA/Interrupt enable register) 
        .equ TIM8_TDE_Shift, 14   @ bitWidth 1 (Trigger DMA request enable)  
        .equ TIM8_COMDE_Shift, 13   @ bitWidth 1 (COM DMA request enable)  
        .equ TIM8_CC4DE_Shift, 12   @ bitWidth 1 (Capture/Compare 4 DMA request  enable)  
        .equ TIM8_CC3DE_Shift, 11   @ bitWidth 1 (Capture/Compare 3 DMA request  enable)  
        .equ TIM8_CC2DE_Shift, 10   @ bitWidth 1 (Capture/Compare 2 DMA request  enable)  
        .equ TIM8_CC1DE_Shift, 9   @ bitWidth 1 (Capture/Compare 1 DMA request  enable)  
        .equ TIM8_UDE_Shift, 8   @ bitWidth 1 (Update DMA request enable)  
        .equ TIM8_TIE_Shift, 6   @ bitWidth 1 (Trigger interrupt enable)  
        .equ TIM8_CC4IE_Shift, 4   @ bitWidth 1 (Capture/Compare 4 interrupt  enable)  
        .equ TIM8_CC3IE_Shift, 3   @ bitWidth 1 (Capture/Compare 3 interrupt  enable)  
        .equ TIM8_CC2IE_Shift, 2   @ bitWidth 1 (Capture/Compare 2 interrupt  enable)  
        .equ TIM8_CC1IE_Shift, 1   @ bitWidth 1 (Capture/Compare 1 interrupt  enable)  
        .equ TIM8_UIE_Shift, 0   @ bitWidth 1 (Update interrupt enable)  
        .equ TIM8_BIE_Shift, 7   @ bitWidth 1 (Break interrupt enable)  
        .equ TIM8_COMIE_Shift, 5   @ bitWidth 1 (COM interrupt enable)  
 
    .equ TIM8_SR, TIM8_BASE + 0x10 @ (status register) 
        .equ TIM8_CC4OF_Shift, 12   @ bitWidth 1 (Capture/Compare 4 overcapture  flag)  
        .equ TIM8_CC3OF_Shift, 11   @ bitWidth 1 (Capture/Compare 3 overcapture  flag)  
        .equ TIM8_CC2OF_Shift, 10   @ bitWidth 1 (Capture/compare 2 overcapture  flag)  
        .equ TIM8_CC1OF_Shift, 9   @ bitWidth 1 (Capture/Compare 1 overcapture  flag)  
        .equ TIM8_BIF_Shift, 7   @ bitWidth 1 (Break interrupt flag)  
        .equ TIM8_TIF_Shift, 6   @ bitWidth 1 (Trigger interrupt flag)  
        .equ TIM8_COMIF_Shift, 5   @ bitWidth 1 (COM interrupt flag)  
        .equ TIM8_CC4IF_Shift, 4   @ bitWidth 1 (Capture/Compare 4 interrupt  flag)  
        .equ TIM8_CC3IF_Shift, 3   @ bitWidth 1 (Capture/Compare 3 interrupt  flag)  
        .equ TIM8_CC2IF_Shift, 2   @ bitWidth 1 (Capture/Compare 2 interrupt  flag)  
        .equ TIM8_CC1IF_Shift, 1   @ bitWidth 1 (Capture/compare 1 interrupt  flag)  
        .equ TIM8_UIF_Shift, 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM8_EGR, TIM8_BASE + 0x14 @ (event generation register) 
        .equ TIM8_BG_Shift, 7   @ bitWidth 1 (Break generation)  
        .equ TIM8_TG_Shift, 6   @ bitWidth 1 (Trigger generation)  
        .equ TIM8_COMG_Shift, 5   @ bitWidth 1 (Capture/Compare control update  generation)  
        .equ TIM8_CC4G_Shift, 4   @ bitWidth 1 (Capture/compare 4  generation)  
        .equ TIM8_CC3G_Shift, 3   @ bitWidth 1 (Capture/compare 3  generation)  
        .equ TIM8_CC2G_Shift, 2   @ bitWidth 1 (Capture/compare 2  generation)  
        .equ TIM8_CC1G_Shift, 1   @ bitWidth 1 (Capture/compare 1  generation)  
        .equ TIM8_UG_Shift, 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM8_CCMR1_Output, TIM8_BASE + 0x18 @ (capture/compare mode register output  mode) 
        .equ TIM8_OC2CE_Shift, 15   @ bitWidth 1 (Output Compare 2 clear  enable)  
        .equ TIM8_OC2M_Shift, 12   @ bitWidth 3 (Output Compare 2 mode)  
        .equ TIM8_OC2PE_Shift, 11   @ bitWidth 1 (Output Compare 2 preload  enable)  
        .equ TIM8_OC2FE_Shift, 10   @ bitWidth 1 (Output Compare 2 fast  enable)  
        .equ TIM8_CC2S_Shift, 8   @ bitWidth 2 (Capture/Compare 2  selection)  
        .equ TIM8_OC1CE_Shift, 7   @ bitWidth 1 (Output Compare 1 clear  enable)  
        .equ TIM8_OC1M_Shift, 4   @ bitWidth 3 (Output Compare 1 mode)  
        .equ TIM8_OC1PE_Shift, 3   @ bitWidth 1 (Output Compare 1 preload  enable)  
        .equ TIM8_OC1FE_Shift, 2   @ bitWidth 1 (Output Compare 1 fast  enable)  
        .equ TIM8_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM8_CCMR1_Input, TIM8_BASE + 0x18 @ (capture/compare mode register 1 input  mode) 
        .equ TIM8_IC2F_Shift, 12   @ bitWidth 4 (Input capture 2 filter)  
        .equ TIM8_IC2PCS_Shift, 10   @ bitWidth 2 (Input capture 2 prescaler)  
        .equ TIM8_CC2S_Shift, 8   @ bitWidth 2 (Capture/Compare 2  selection)  
        .equ TIM8_IC1F_Shift, 4   @ bitWidth 4 (Input capture 1 filter)  
        .equ TIM8_ICPCS_Shift, 2   @ bitWidth 2 (Input capture 1 prescaler)  
        .equ TIM8_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM8_CCMR2_Output, TIM8_BASE + 0x1C @ (capture/compare mode register output  mode) 
        .equ TIM8_OC4CE_Shift, 15   @ bitWidth 1 (Output compare 4 clear  enable)  
        .equ TIM8_OC4M_Shift, 12   @ bitWidth 3 (Output compare 4 mode)  
        .equ TIM8_OC4PE_Shift, 11   @ bitWidth 1 (Output compare 4 preload  enable)  
        .equ TIM8_OC4FE_Shift, 10   @ bitWidth 1 (Output compare 4 fast  enable)  
        .equ TIM8_CC4S_Shift, 8   @ bitWidth 2 (Capture/Compare 4  selection)  
        .equ TIM8_OC3CE_Shift, 7   @ bitWidth 1 (Output compare 3 clear  enable)  
        .equ TIM8_OC3M_Shift, 4   @ bitWidth 3 (Output compare 3 mode)  
        .equ TIM8_OC3PE_Shift, 3   @ bitWidth 1 (Output compare 3 preload  enable)  
        .equ TIM8_OC3FE_Shift, 2   @ bitWidth 1 (Output compare 3 fast  enable)  
        .equ TIM8_CC3S_Shift, 0   @ bitWidth 2 (Capture/Compare 3  selection)  
 
    .equ TIM8_CCMR2_Input, TIM8_BASE + 0x1C @ (capture/compare mode register 2 input  mode) 
        .equ TIM8_IC4F_Shift, 12   @ bitWidth 4 (Input capture 4 filter)  
        .equ TIM8_IC4PSC_Shift, 10   @ bitWidth 2 (Input capture 4 prescaler)  
        .equ TIM8_CC4S_Shift, 8   @ bitWidth 2 (Capture/Compare 4  selection)  
        .equ TIM8_IC3F_Shift, 4   @ bitWidth 4 (Input capture 3 filter)  
        .equ TIM8_IC3PSC_Shift, 2   @ bitWidth 2 (Input capture 3 prescaler)  
        .equ TIM8_CC3S_Shift, 0   @ bitWidth 2 (Capture/compare 3  selection)  
 
    .equ TIM8_CCER, TIM8_BASE + 0x20 @ (capture/compare enable  register) 
        .equ TIM8_CC4P_Shift, 13   @ bitWidth 1 (Capture/Compare 3 output  Polarity)  
        .equ TIM8_CC4E_Shift, 12   @ bitWidth 1 (Capture/Compare 4 output  enable)  
        .equ TIM8_CC3NP_Shift, 11   @ bitWidth 1 (Capture/Compare 3 output  Polarity)  
        .equ TIM8_CC3NE_Shift, 10   @ bitWidth 1 (Capture/Compare 3 complementary output  enable)  
        .equ TIM8_CC3P_Shift, 9   @ bitWidth 1 (Capture/Compare 3 output  Polarity)  
        .equ TIM8_CC3E_Shift, 8   @ bitWidth 1 (Capture/Compare 3 output  enable)  
        .equ TIM8_CC2NP_Shift, 7   @ bitWidth 1 (Capture/Compare 2 output  Polarity)  
        .equ TIM8_CC2NE_Shift, 6   @ bitWidth 1 (Capture/Compare 2 complementary output  enable)  
        .equ TIM8_CC2P_Shift, 5   @ bitWidth 1 (Capture/Compare 2 output  Polarity)  
        .equ TIM8_CC2E_Shift, 4   @ bitWidth 1 (Capture/Compare 2 output  enable)  
        .equ TIM8_CC1NP_Shift, 3   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM8_CC1NE_Shift, 2   @ bitWidth 1 (Capture/Compare 1 complementary output  enable)  
        .equ TIM8_CC1P_Shift, 1   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM8_CC1E_Shift, 0   @ bitWidth 1 (Capture/Compare 1 output  enable)  
 
    .equ TIM8_CNT, TIM8_BASE + 0x24 @ (counter) 
        .equ TIM8_CNT_Shift, 0   @ bitWidth 16 (counter value)  
 
    .equ TIM8_PSC, TIM8_BASE + 0x28 @ (prescaler) 
        .equ TIM8_PSC_Shift, 0   @ bitWidth 16 (Prescaler value)  
 
    .equ TIM8_ARR, TIM8_BASE + 0x2C @ (auto-reload register) 
        .equ TIM8_ARR_Shift, 0   @ bitWidth 16 (Auto-reload value)  
 
    .equ TIM8_CCR1, TIM8_BASE + 0x34 @ (capture/compare register 1) 
        .equ TIM8_CCR1_Shift, 0   @ bitWidth 16 (Capture/Compare 1 value)  
 
    .equ TIM8_CCR2, TIM8_BASE + 0x38 @ (capture/compare register 2) 
        .equ TIM8_CCR2_Shift, 0   @ bitWidth 16 (Capture/Compare 2 value)  
 
    .equ TIM8_CCR3, TIM8_BASE + 0x3C @ (capture/compare register 3) 
        .equ TIM8_CCR3_Shift, 0   @ bitWidth 16 (Capture/Compare value)  
 
    .equ TIM8_CCR4, TIM8_BASE + 0x40 @ (capture/compare register 4) 
        .equ TIM8_CCR4_Shift, 0   @ bitWidth 16 (Capture/Compare value)  
 
    .equ TIM8_DCR, TIM8_BASE + 0x48 @ (DMA control register) 
        .equ TIM8_DBL_Shift, 8   @ bitWidth 5 (DMA burst length)  
        .equ TIM8_DBA_Shift, 0   @ bitWidth 5 (DMA base address)  
 
    .equ TIM8_DMAR, TIM8_BASE + 0x4C @ (DMA address for full transfer) 
        .equ TIM8_DMAB_Shift, 0   @ bitWidth 16 (DMA register for burst  accesses)  
 
    .equ TIM8_RCR, TIM8_BASE + 0x30 @ (repetition counter register) 
        .equ TIM8_REP_Shift, 0   @ bitWidth 8 (Repetition counter value)  
 
    .equ TIM8_BDTR, TIM8_BASE + 0x44 @ (break and dead-time register) 
        .equ TIM8_MOE_Shift, 15   @ bitWidth 1 (Main output enable)  
        .equ TIM8_AOE_Shift, 14   @ bitWidth 1 (Automatic output enable)  
        .equ TIM8_BKP_Shift, 13   @ bitWidth 1 (Break polarity)  
        .equ TIM8_BKE_Shift, 12   @ bitWidth 1 (Break enable)  
        .equ TIM8_OSSR_Shift, 11   @ bitWidth 1 (Off-state selection for Run  mode)  
        .equ TIM8_OSSI_Shift, 10   @ bitWidth 1 (Off-state selection for Idle  mode)  
        .equ TIM8_LOCK_Shift, 8   @ bitWidth 2 (Lock configuration)  
        .equ TIM8_DTG_Shift, 0   @ bitWidth 8 (Dead-time generator setup)  
 

@=========================== TIM2 ===========================@
.equ TIM2_BASE, 0x40000000 @ (General purpose timer) 
    .equ TIM2_CR1, TIM2_BASE + 0x0 @ (control register 1) 
        .equ TIM2_CKD_Shift, 8   @ bitWidth 2 (Clock division)  
        .equ TIM2_ARPE_Shift, 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM2_CMS_Shift, 5   @ bitWidth 2 (Center-aligned mode  selection)  
        .equ TIM2_DIR_Shift, 4   @ bitWidth 1 (Direction)  
        .equ TIM2_OPM_Shift, 3   @ bitWidth 1 (One-pulse mode)  
        .equ TIM2_URS_Shift, 2   @ bitWidth 1 (Update request source)  
        .equ TIM2_UDIS_Shift, 1   @ bitWidth 1 (Update disable)  
        .equ TIM2_CEN_Shift, 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM2_CR2, TIM2_BASE + 0x4 @ (control register 2) 
        .equ TIM2_TI1S_Shift, 7   @ bitWidth 1 (TI1 selection)  
        .equ TIM2_MMS_Shift, 4   @ bitWidth 3 (Master mode selection)  
        .equ TIM2_CCDS_Shift, 3   @ bitWidth 1 (Capture/compare DMA  selection)  
 
    .equ TIM2_SMCR, TIM2_BASE + 0x8 @ (slave mode control register) 
        .equ TIM2_ETP_Shift, 15   @ bitWidth 1 (External trigger polarity)  
        .equ TIM2_ECE_Shift, 14   @ bitWidth 1 (External clock enable)  
        .equ TIM2_ETPS_Shift, 12   @ bitWidth 2 (External trigger prescaler)  
        .equ TIM2_ETF_Shift, 8   @ bitWidth 4 (External trigger filter)  
        .equ TIM2_MSM_Shift, 7   @ bitWidth 1 (Master/Slave mode)  
        .equ TIM2_TS_Shift, 4   @ bitWidth 3 (Trigger selection)  
        .equ TIM2_SMS_Shift, 0   @ bitWidth 3 (Slave mode selection)  
 
    .equ TIM2_DIER, TIM2_BASE + 0xC @ (DMA/Interrupt enable register) 
        .equ TIM2_TDE_Shift, 14   @ bitWidth 1 (Trigger DMA request enable)  
        .equ TIM2_CC4DE_Shift, 12   @ bitWidth 1 (Capture/Compare 4 DMA request  enable)  
        .equ TIM2_CC3DE_Shift, 11   @ bitWidth 1 (Capture/Compare 3 DMA request  enable)  
        .equ TIM2_CC2DE_Shift, 10   @ bitWidth 1 (Capture/Compare 2 DMA request  enable)  
        .equ TIM2_CC1DE_Shift, 9   @ bitWidth 1 (Capture/Compare 1 DMA request  enable)  
        .equ TIM2_UDE_Shift, 8   @ bitWidth 1 (Update DMA request enable)  
        .equ TIM2_TIE_Shift, 6   @ bitWidth 1 (Trigger interrupt enable)  
        .equ TIM2_CC4IE_Shift, 4   @ bitWidth 1 (Capture/Compare 4 interrupt  enable)  
        .equ TIM2_CC3IE_Shift, 3   @ bitWidth 1 (Capture/Compare 3 interrupt  enable)  
        .equ TIM2_CC2IE_Shift, 2   @ bitWidth 1 (Capture/Compare 2 interrupt  enable)  
        .equ TIM2_CC1IE_Shift, 1   @ bitWidth 1 (Capture/Compare 1 interrupt  enable)  
        .equ TIM2_UIE_Shift, 0   @ bitWidth 1 (Update interrupt enable)  
 
    .equ TIM2_SR, TIM2_BASE + 0x10 @ (status register) 
        .equ TIM2_CC4OF_Shift, 12   @ bitWidth 1 (Capture/Compare 4 overcapture  flag)  
        .equ TIM2_CC3OF_Shift, 11   @ bitWidth 1 (Capture/Compare 3 overcapture  flag)  
        .equ TIM2_CC2OF_Shift, 10   @ bitWidth 1 (Capture/compare 2 overcapture  flag)  
        .equ TIM2_CC1OF_Shift, 9   @ bitWidth 1 (Capture/Compare 1 overcapture  flag)  
        .equ TIM2_TIF_Shift, 6   @ bitWidth 1 (Trigger interrupt flag)  
        .equ TIM2_CC4IF_Shift, 4   @ bitWidth 1 (Capture/Compare 4 interrupt  flag)  
        .equ TIM2_CC3IF_Shift, 3   @ bitWidth 1 (Capture/Compare 3 interrupt  flag)  
        .equ TIM2_CC2IF_Shift, 2   @ bitWidth 1 (Capture/Compare 2 interrupt  flag)  
        .equ TIM2_CC1IF_Shift, 1   @ bitWidth 1 (Capture/compare 1 interrupt  flag)  
        .equ TIM2_UIF_Shift, 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM2_EGR, TIM2_BASE + 0x14 @ (event generation register) 
        .equ TIM2_TG_Shift, 6   @ bitWidth 1 (Trigger generation)  
        .equ TIM2_CC4G_Shift, 4   @ bitWidth 1 (Capture/compare 4  generation)  
        .equ TIM2_CC3G_Shift, 3   @ bitWidth 1 (Capture/compare 3  generation)  
        .equ TIM2_CC2G_Shift, 2   @ bitWidth 1 (Capture/compare 2  generation)  
        .equ TIM2_CC1G_Shift, 1   @ bitWidth 1 (Capture/compare 1  generation)  
        .equ TIM2_UG_Shift, 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM2_CCMR1_Output, TIM2_BASE + 0x18 @ (capture/compare mode register 1 output  mode) 
        .equ TIM2_OC2CE_Shift, 15   @ bitWidth 1 (Output compare 2 clear  enable)  
        .equ TIM2_OC2M_Shift, 12   @ bitWidth 3 (Output compare 2 mode)  
        .equ TIM2_OC2PE_Shift, 11   @ bitWidth 1 (Output compare 2 preload  enable)  
        .equ TIM2_OC2FE_Shift, 10   @ bitWidth 1 (Output compare 2 fast  enable)  
        .equ TIM2_CC2S_Shift, 8   @ bitWidth 2 (Capture/Compare 2  selection)  
        .equ TIM2_OC1CE_Shift, 7   @ bitWidth 1 (Output compare 1 clear  enable)  
        .equ TIM2_OC1M_Shift, 4   @ bitWidth 3 (Output compare 1 mode)  
        .equ TIM2_OC1PE_Shift, 3   @ bitWidth 1 (Output compare 1 preload  enable)  
        .equ TIM2_OC1FE_Shift, 2   @ bitWidth 1 (Output compare 1 fast  enable)  
        .equ TIM2_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM2_CCMR1_Input, TIM2_BASE + 0x18 @ (capture/compare mode register 1 input  mode) 
        .equ TIM2_IC2F_Shift, 12   @ bitWidth 4 (Input capture 2 filter)  
        .equ TIM2_IC2PSC_Shift, 10   @ bitWidth 2 (Input capture 2 prescaler)  
        .equ TIM2_CC2S_Shift, 8   @ bitWidth 2 (Capture/compare 2  selection)  
        .equ TIM2_IC1F_Shift, 4   @ bitWidth 4 (Input capture 1 filter)  
        .equ TIM2_IC1PSC_Shift, 2   @ bitWidth 2 (Input capture 1 prescaler)  
        .equ TIM2_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM2_CCMR2_Output, TIM2_BASE + 0x1C @ (capture/compare mode register 2 output  mode) 
        .equ TIM2_O24CE_Shift, 15   @ bitWidth 1 (Output compare 4 clear  enable)  
        .equ TIM2_OC4M_Shift, 12   @ bitWidth 3 (Output compare 4 mode)  
        .equ TIM2_OC4PE_Shift, 11   @ bitWidth 1 (Output compare 4 preload  enable)  
        .equ TIM2_OC4FE_Shift, 10   @ bitWidth 1 (Output compare 4 fast  enable)  
        .equ TIM2_CC4S_Shift, 8   @ bitWidth 2 (Capture/Compare 4  selection)  
        .equ TIM2_OC3CE_Shift, 7   @ bitWidth 1 (Output compare 3 clear  enable)  
        .equ TIM2_OC3M_Shift, 4   @ bitWidth 3 (Output compare 3 mode)  
        .equ TIM2_OC3PE_Shift, 3   @ bitWidth 1 (Output compare 3 preload  enable)  
        .equ TIM2_OC3FE_Shift, 2   @ bitWidth 1 (Output compare 3 fast  enable)  
        .equ TIM2_CC3S_Shift, 0   @ bitWidth 2 (Capture/Compare 3  selection)  
 
    .equ TIM2_CCMR2_Input, TIM2_BASE + 0x1C @ (capture/compare mode register 2 input  mode) 
        .equ TIM2_IC4F_Shift, 12   @ bitWidth 4 (Input capture 4 filter)  
        .equ TIM2_IC4PSC_Shift, 10   @ bitWidth 2 (Input capture 4 prescaler)  
        .equ TIM2_CC4S_Shift, 8   @ bitWidth 2 (Capture/Compare 4  selection)  
        .equ TIM2_IC3F_Shift, 4   @ bitWidth 4 (Input capture 3 filter)  
        .equ TIM2_IC3PSC_Shift, 2   @ bitWidth 2 (Input capture 3 prescaler)  
        .equ TIM2_CC3S_Shift, 0   @ bitWidth 2 (Capture/Compare 3  selection)  
 
    .equ TIM2_CCER, TIM2_BASE + 0x20 @ (capture/compare enable  register) 
        .equ TIM2_CC4P_Shift, 13   @ bitWidth 1 (Capture/Compare 3 output  Polarity)  
        .equ TIM2_CC4E_Shift, 12   @ bitWidth 1 (Capture/Compare 4 output  enable)  
        .equ TIM2_CC3P_Shift, 9   @ bitWidth 1 (Capture/Compare 3 output  Polarity)  
        .equ TIM2_CC3E_Shift, 8   @ bitWidth 1 (Capture/Compare 3 output  enable)  
        .equ TIM2_CC2P_Shift, 5   @ bitWidth 1 (Capture/Compare 2 output  Polarity)  
        .equ TIM2_CC2E_Shift, 4   @ bitWidth 1 (Capture/Compare 2 output  enable)  
        .equ TIM2_CC1P_Shift, 1   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM2_CC1E_Shift, 0   @ bitWidth 1 (Capture/Compare 1 output  enable)  
 
    .equ TIM2_CNT, TIM2_BASE + 0x24 @ (counter) 
        .equ TIM2_CNT_Shift, 0   @ bitWidth 16 (counter value)  
 
    .equ TIM2_PSC, TIM2_BASE + 0x28 @ (prescaler) 
        .equ TIM2_PSC_Shift, 0   @ bitWidth 16 (Prescaler value)  
 
    .equ TIM2_ARR, TIM2_BASE + 0x2C @ (auto-reload register) 
        .equ TIM2_ARR_Shift, 0   @ bitWidth 16 (Auto-reload value)  
 
    .equ TIM2_CCR1, TIM2_BASE + 0x34 @ (capture/compare register 1) 
        .equ TIM2_CCR1_Shift, 0   @ bitWidth 16 (Capture/Compare 1 value)  
 
    .equ TIM2_CCR2, TIM2_BASE + 0x38 @ (capture/compare register 2) 
        .equ TIM2_CCR2_Shift, 0   @ bitWidth 16 (Capture/Compare 2 value)  
 
    .equ TIM2_CCR3, TIM2_BASE + 0x3C @ (capture/compare register 3) 
        .equ TIM2_CCR3_Shift, 0   @ bitWidth 16 (Capture/Compare value)  
 
    .equ TIM2_CCR4, TIM2_BASE + 0x40 @ (capture/compare register 4) 
        .equ TIM2_CCR4_Shift, 0   @ bitWidth 16 (Capture/Compare value)  
 
    .equ TIM2_DCR, TIM2_BASE + 0x48 @ (DMA control register) 
        .equ TIM2_DBL_Shift, 8   @ bitWidth 5 (DMA burst length)  
        .equ TIM2_DBA_Shift, 0   @ bitWidth 5 (DMA base address)  
 
    .equ TIM2_DMAR, TIM2_BASE + 0x4C @ (DMA address for full transfer) 
        .equ TIM2_DMAB_Shift, 0   @ bitWidth 16 (DMA register for burst  accesses)  
 

@=========================== TIM3 ===========================@
.equ TIM3_BASE, 0x40000400 @ (General purpose timer) 
    .equ TIM3_CR1, TIM3_BASE + 0x0 @ (control register 1) 
        .equ TIM3_CKD_Shift, 8   @ bitWidth 2 (Clock division)  
        .equ TIM3_ARPE_Shift, 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM3_CMS_Shift, 5   @ bitWidth 2 (Center-aligned mode  selection)  
        .equ TIM3_DIR_Shift, 4   @ bitWidth 1 (Direction)  
        .equ TIM3_OPM_Shift, 3   @ bitWidth 1 (One-pulse mode)  
        .equ TIM3_URS_Shift, 2   @ bitWidth 1 (Update request source)  
        .equ TIM3_UDIS_Shift, 1   @ bitWidth 1 (Update disable)  
        .equ TIM3_CEN_Shift, 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM3_CR2, TIM3_BASE + 0x4 @ (control register 2) 
        .equ TIM3_TI1S_Shift, 7   @ bitWidth 1 (TI1 selection)  
        .equ TIM3_MMS_Shift, 4   @ bitWidth 3 (Master mode selection)  
        .equ TIM3_CCDS_Shift, 3   @ bitWidth 1 (Capture/compare DMA  selection)  
 
    .equ TIM3_SMCR, TIM3_BASE + 0x8 @ (slave mode control register) 
        .equ TIM3_ETP_Shift, 15   @ bitWidth 1 (External trigger polarity)  
        .equ TIM3_ECE_Shift, 14   @ bitWidth 1 (External clock enable)  
        .equ TIM3_ETPS_Shift, 12   @ bitWidth 2 (External trigger prescaler)  
        .equ TIM3_ETF_Shift, 8   @ bitWidth 4 (External trigger filter)  
        .equ TIM3_MSM_Shift, 7   @ bitWidth 1 (Master/Slave mode)  
        .equ TIM3_TS_Shift, 4   @ bitWidth 3 (Trigger selection)  
        .equ TIM3_SMS_Shift, 0   @ bitWidth 3 (Slave mode selection)  
 
    .equ TIM3_DIER, TIM3_BASE + 0xC @ (DMA/Interrupt enable register) 
        .equ TIM3_TDE_Shift, 14   @ bitWidth 1 (Trigger DMA request enable)  
        .equ TIM3_CC4DE_Shift, 12   @ bitWidth 1 (Capture/Compare 4 DMA request  enable)  
        .equ TIM3_CC3DE_Shift, 11   @ bitWidth 1 (Capture/Compare 3 DMA request  enable)  
        .equ TIM3_CC2DE_Shift, 10   @ bitWidth 1 (Capture/Compare 2 DMA request  enable)  
        .equ TIM3_CC1DE_Shift, 9   @ bitWidth 1 (Capture/Compare 1 DMA request  enable)  
        .equ TIM3_UDE_Shift, 8   @ bitWidth 1 (Update DMA request enable)  
        .equ TIM3_TIE_Shift, 6   @ bitWidth 1 (Trigger interrupt enable)  
        .equ TIM3_CC4IE_Shift, 4   @ bitWidth 1 (Capture/Compare 4 interrupt  enable)  
        .equ TIM3_CC3IE_Shift, 3   @ bitWidth 1 (Capture/Compare 3 interrupt  enable)  
        .equ TIM3_CC2IE_Shift, 2   @ bitWidth 1 (Capture/Compare 2 interrupt  enable)  
        .equ TIM3_CC1IE_Shift, 1   @ bitWidth 1 (Capture/Compare 1 interrupt  enable)  
        .equ TIM3_UIE_Shift, 0   @ bitWidth 1 (Update interrupt enable)  
 
    .equ TIM3_SR, TIM3_BASE + 0x10 @ (status register) 
        .equ TIM3_CC4OF_Shift, 12   @ bitWidth 1 (Capture/Compare 4 overcapture  flag)  
        .equ TIM3_CC3OF_Shift, 11   @ bitWidth 1 (Capture/Compare 3 overcapture  flag)  
        .equ TIM3_CC2OF_Shift, 10   @ bitWidth 1 (Capture/compare 2 overcapture  flag)  
        .equ TIM3_CC1OF_Shift, 9   @ bitWidth 1 (Capture/Compare 1 overcapture  flag)  
        .equ TIM3_TIF_Shift, 6   @ bitWidth 1 (Trigger interrupt flag)  
        .equ TIM3_CC4IF_Shift, 4   @ bitWidth 1 (Capture/Compare 4 interrupt  flag)  
        .equ TIM3_CC3IF_Shift, 3   @ bitWidth 1 (Capture/Compare 3 interrupt  flag)  
        .equ TIM3_CC2IF_Shift, 2   @ bitWidth 1 (Capture/Compare 2 interrupt  flag)  
        .equ TIM3_CC1IF_Shift, 1   @ bitWidth 1 (Capture/compare 1 interrupt  flag)  
        .equ TIM3_UIF_Shift, 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM3_EGR, TIM3_BASE + 0x14 @ (event generation register) 
        .equ TIM3_TG_Shift, 6   @ bitWidth 1 (Trigger generation)  
        .equ TIM3_CC4G_Shift, 4   @ bitWidth 1 (Capture/compare 4  generation)  
        .equ TIM3_CC3G_Shift, 3   @ bitWidth 1 (Capture/compare 3  generation)  
        .equ TIM3_CC2G_Shift, 2   @ bitWidth 1 (Capture/compare 2  generation)  
        .equ TIM3_CC1G_Shift, 1   @ bitWidth 1 (Capture/compare 1  generation)  
        .equ TIM3_UG_Shift, 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM3_CCMR1_Output, TIM3_BASE + 0x18 @ (capture/compare mode register 1 output  mode) 
        .equ TIM3_OC2CE_Shift, 15   @ bitWidth 1 (Output compare 2 clear  enable)  
        .equ TIM3_OC2M_Shift, 12   @ bitWidth 3 (Output compare 2 mode)  
        .equ TIM3_OC2PE_Shift, 11   @ bitWidth 1 (Output compare 2 preload  enable)  
        .equ TIM3_OC2FE_Shift, 10   @ bitWidth 1 (Output compare 2 fast  enable)  
        .equ TIM3_CC2S_Shift, 8   @ bitWidth 2 (Capture/Compare 2  selection)  
        .equ TIM3_OC1CE_Shift, 7   @ bitWidth 1 (Output compare 1 clear  enable)  
        .equ TIM3_OC1M_Shift, 4   @ bitWidth 3 (Output compare 1 mode)  
        .equ TIM3_OC1PE_Shift, 3   @ bitWidth 1 (Output compare 1 preload  enable)  
        .equ TIM3_OC1FE_Shift, 2   @ bitWidth 1 (Output compare 1 fast  enable)  
        .equ TIM3_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM3_CCMR1_Input, TIM3_BASE + 0x18 @ (capture/compare mode register 1 input  mode) 
        .equ TIM3_IC2F_Shift, 12   @ bitWidth 4 (Input capture 2 filter)  
        .equ TIM3_IC2PSC_Shift, 10   @ bitWidth 2 (Input capture 2 prescaler)  
        .equ TIM3_CC2S_Shift, 8   @ bitWidth 2 (Capture/compare 2  selection)  
        .equ TIM3_IC1F_Shift, 4   @ bitWidth 4 (Input capture 1 filter)  
        .equ TIM3_IC1PSC_Shift, 2   @ bitWidth 2 (Input capture 1 prescaler)  
        .equ TIM3_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM3_CCMR2_Output, TIM3_BASE + 0x1C @ (capture/compare mode register 2 output  mode) 
        .equ TIM3_O24CE_Shift, 15   @ bitWidth 1 (Output compare 4 clear  enable)  
        .equ TIM3_OC4M_Shift, 12   @ bitWidth 3 (Output compare 4 mode)  
        .equ TIM3_OC4PE_Shift, 11   @ bitWidth 1 (Output compare 4 preload  enable)  
        .equ TIM3_OC4FE_Shift, 10   @ bitWidth 1 (Output compare 4 fast  enable)  
        .equ TIM3_CC4S_Shift, 8   @ bitWidth 2 (Capture/Compare 4  selection)  
        .equ TIM3_OC3CE_Shift, 7   @ bitWidth 1 (Output compare 3 clear  enable)  
        .equ TIM3_OC3M_Shift, 4   @ bitWidth 3 (Output compare 3 mode)  
        .equ TIM3_OC3PE_Shift, 3   @ bitWidth 1 (Output compare 3 preload  enable)  
        .equ TIM3_OC3FE_Shift, 2   @ bitWidth 1 (Output compare 3 fast  enable)  
        .equ TIM3_CC3S_Shift, 0   @ bitWidth 2 (Capture/Compare 3  selection)  
 
    .equ TIM3_CCMR2_Input, TIM3_BASE + 0x1C @ (capture/compare mode register 2 input  mode) 
        .equ TIM3_IC4F_Shift, 12   @ bitWidth 4 (Input capture 4 filter)  
        .equ TIM3_IC4PSC_Shift, 10   @ bitWidth 2 (Input capture 4 prescaler)  
        .equ TIM3_CC4S_Shift, 8   @ bitWidth 2 (Capture/Compare 4  selection)  
        .equ TIM3_IC3F_Shift, 4   @ bitWidth 4 (Input capture 3 filter)  
        .equ TIM3_IC3PSC_Shift, 2   @ bitWidth 2 (Input capture 3 prescaler)  
        .equ TIM3_CC3S_Shift, 0   @ bitWidth 2 (Capture/Compare 3  selection)  
 
    .equ TIM3_CCER, TIM3_BASE + 0x20 @ (capture/compare enable  register) 
        .equ TIM3_CC4P_Shift, 13   @ bitWidth 1 (Capture/Compare 3 output  Polarity)  
        .equ TIM3_CC4E_Shift, 12   @ bitWidth 1 (Capture/Compare 4 output  enable)  
        .equ TIM3_CC3P_Shift, 9   @ bitWidth 1 (Capture/Compare 3 output  Polarity)  
        .equ TIM3_CC3E_Shift, 8   @ bitWidth 1 (Capture/Compare 3 output  enable)  
        .equ TIM3_CC2P_Shift, 5   @ bitWidth 1 (Capture/Compare 2 output  Polarity)  
        .equ TIM3_CC2E_Shift, 4   @ bitWidth 1 (Capture/Compare 2 output  enable)  
        .equ TIM3_CC1P_Shift, 1   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM3_CC1E_Shift, 0   @ bitWidth 1 (Capture/Compare 1 output  enable)  
 
    .equ TIM3_CNT, TIM3_BASE + 0x24 @ (counter) 
        .equ TIM3_CNT_Shift, 0   @ bitWidth 16 (counter value)  
 
    .equ TIM3_PSC, TIM3_BASE + 0x28 @ (prescaler) 
        .equ TIM3_PSC_Shift, 0   @ bitWidth 16 (Prescaler value)  
 
    .equ TIM3_ARR, TIM3_BASE + 0x2C @ (auto-reload register) 
        .equ TIM3_ARR_Shift, 0   @ bitWidth 16 (Auto-reload value)  
 
    .equ TIM3_CCR1, TIM3_BASE + 0x34 @ (capture/compare register 1) 
        .equ TIM3_CCR1_Shift, 0   @ bitWidth 16 (Capture/Compare 1 value)  
 
    .equ TIM3_CCR2, TIM3_BASE + 0x38 @ (capture/compare register 2) 
        .equ TIM3_CCR2_Shift, 0   @ bitWidth 16 (Capture/Compare 2 value)  
 
    .equ TIM3_CCR3, TIM3_BASE + 0x3C @ (capture/compare register 3) 
        .equ TIM3_CCR3_Shift, 0   @ bitWidth 16 (Capture/Compare value)  
 
    .equ TIM3_CCR4, TIM3_BASE + 0x40 @ (capture/compare register 4) 
        .equ TIM3_CCR4_Shift, 0   @ bitWidth 16 (Capture/Compare value)  
 
    .equ TIM3_DCR, TIM3_BASE + 0x48 @ (DMA control register) 
        .equ TIM3_DBL_Shift, 8   @ bitWidth 5 (DMA burst length)  
        .equ TIM3_DBA_Shift, 0   @ bitWidth 5 (DMA base address)  
 
    .equ TIM3_DMAR, TIM3_BASE + 0x4C @ (DMA address for full transfer) 
        .equ TIM3_DMAB_Shift, 0   @ bitWidth 16 (DMA register for burst  accesses)  
 

@=========================== TIM4 ===========================@
.equ TIM4_BASE, 0x40000800 @ (General purpose timer) 
    .equ TIM4_CR1, TIM4_BASE + 0x0 @ (control register 1) 
        .equ TIM4_CKD_Shift, 8   @ bitWidth 2 (Clock division)  
        .equ TIM4_ARPE_Shift, 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM4_CMS_Shift, 5   @ bitWidth 2 (Center-aligned mode  selection)  
        .equ TIM4_DIR_Shift, 4   @ bitWidth 1 (Direction)  
        .equ TIM4_OPM_Shift, 3   @ bitWidth 1 (One-pulse mode)  
        .equ TIM4_URS_Shift, 2   @ bitWidth 1 (Update request source)  
        .equ TIM4_UDIS_Shift, 1   @ bitWidth 1 (Update disable)  
        .equ TIM4_CEN_Shift, 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM4_CR2, TIM4_BASE + 0x4 @ (control register 2) 
        .equ TIM4_TI1S_Shift, 7   @ bitWidth 1 (TI1 selection)  
        .equ TIM4_MMS_Shift, 4   @ bitWidth 3 (Master mode selection)  
        .equ TIM4_CCDS_Shift, 3   @ bitWidth 1 (Capture/compare DMA  selection)  
 
    .equ TIM4_SMCR, TIM4_BASE + 0x8 @ (slave mode control register) 
        .equ TIM4_ETP_Shift, 15   @ bitWidth 1 (External trigger polarity)  
        .equ TIM4_ECE_Shift, 14   @ bitWidth 1 (External clock enable)  
        .equ TIM4_ETPS_Shift, 12   @ bitWidth 2 (External trigger prescaler)  
        .equ TIM4_ETF_Shift, 8   @ bitWidth 4 (External trigger filter)  
        .equ TIM4_MSM_Shift, 7   @ bitWidth 1 (Master/Slave mode)  
        .equ TIM4_TS_Shift, 4   @ bitWidth 3 (Trigger selection)  
        .equ TIM4_SMS_Shift, 0   @ bitWidth 3 (Slave mode selection)  
 
    .equ TIM4_DIER, TIM4_BASE + 0xC @ (DMA/Interrupt enable register) 
        .equ TIM4_TDE_Shift, 14   @ bitWidth 1 (Trigger DMA request enable)  
        .equ TIM4_CC4DE_Shift, 12   @ bitWidth 1 (Capture/Compare 4 DMA request  enable)  
        .equ TIM4_CC3DE_Shift, 11   @ bitWidth 1 (Capture/Compare 3 DMA request  enable)  
        .equ TIM4_CC2DE_Shift, 10   @ bitWidth 1 (Capture/Compare 2 DMA request  enable)  
        .equ TIM4_CC1DE_Shift, 9   @ bitWidth 1 (Capture/Compare 1 DMA request  enable)  
        .equ TIM4_UDE_Shift, 8   @ bitWidth 1 (Update DMA request enable)  
        .equ TIM4_TIE_Shift, 6   @ bitWidth 1 (Trigger interrupt enable)  
        .equ TIM4_CC4IE_Shift, 4   @ bitWidth 1 (Capture/Compare 4 interrupt  enable)  
        .equ TIM4_CC3IE_Shift, 3   @ bitWidth 1 (Capture/Compare 3 interrupt  enable)  
        .equ TIM4_CC2IE_Shift, 2   @ bitWidth 1 (Capture/Compare 2 interrupt  enable)  
        .equ TIM4_CC1IE_Shift, 1   @ bitWidth 1 (Capture/Compare 1 interrupt  enable)  
        .equ TIM4_UIE_Shift, 0   @ bitWidth 1 (Update interrupt enable)  
 
    .equ TIM4_SR, TIM4_BASE + 0x10 @ (status register) 
        .equ TIM4_CC4OF_Shift, 12   @ bitWidth 1 (Capture/Compare 4 overcapture  flag)  
        .equ TIM4_CC3OF_Shift, 11   @ bitWidth 1 (Capture/Compare 3 overcapture  flag)  
        .equ TIM4_CC2OF_Shift, 10   @ bitWidth 1 (Capture/compare 2 overcapture  flag)  
        .equ TIM4_CC1OF_Shift, 9   @ bitWidth 1 (Capture/Compare 1 overcapture  flag)  
        .equ TIM4_TIF_Shift, 6   @ bitWidth 1 (Trigger interrupt flag)  
        .equ TIM4_CC4IF_Shift, 4   @ bitWidth 1 (Capture/Compare 4 interrupt  flag)  
        .equ TIM4_CC3IF_Shift, 3   @ bitWidth 1 (Capture/Compare 3 interrupt  flag)  
        .equ TIM4_CC2IF_Shift, 2   @ bitWidth 1 (Capture/Compare 2 interrupt  flag)  
        .equ TIM4_CC1IF_Shift, 1   @ bitWidth 1 (Capture/compare 1 interrupt  flag)  
        .equ TIM4_UIF_Shift, 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM4_EGR, TIM4_BASE + 0x14 @ (event generation register) 
        .equ TIM4_TG_Shift, 6   @ bitWidth 1 (Trigger generation)  
        .equ TIM4_CC4G_Shift, 4   @ bitWidth 1 (Capture/compare 4  generation)  
        .equ TIM4_CC3G_Shift, 3   @ bitWidth 1 (Capture/compare 3  generation)  
        .equ TIM4_CC2G_Shift, 2   @ bitWidth 1 (Capture/compare 2  generation)  
        .equ TIM4_CC1G_Shift, 1   @ bitWidth 1 (Capture/compare 1  generation)  
        .equ TIM4_UG_Shift, 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM4_CCMR1_Output, TIM4_BASE + 0x18 @ (capture/compare mode register 1 output  mode) 
        .equ TIM4_OC2CE_Shift, 15   @ bitWidth 1 (Output compare 2 clear  enable)  
        .equ TIM4_OC2M_Shift, 12   @ bitWidth 3 (Output compare 2 mode)  
        .equ TIM4_OC2PE_Shift, 11   @ bitWidth 1 (Output compare 2 preload  enable)  
        .equ TIM4_OC2FE_Shift, 10   @ bitWidth 1 (Output compare 2 fast  enable)  
        .equ TIM4_CC2S_Shift, 8   @ bitWidth 2 (Capture/Compare 2  selection)  
        .equ TIM4_OC1CE_Shift, 7   @ bitWidth 1 (Output compare 1 clear  enable)  
        .equ TIM4_OC1M_Shift, 4   @ bitWidth 3 (Output compare 1 mode)  
        .equ TIM4_OC1PE_Shift, 3   @ bitWidth 1 (Output compare 1 preload  enable)  
        .equ TIM4_OC1FE_Shift, 2   @ bitWidth 1 (Output compare 1 fast  enable)  
        .equ TIM4_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM4_CCMR1_Input, TIM4_BASE + 0x18 @ (capture/compare mode register 1 input  mode) 
        .equ TIM4_IC2F_Shift, 12   @ bitWidth 4 (Input capture 2 filter)  
        .equ TIM4_IC2PSC_Shift, 10   @ bitWidth 2 (Input capture 2 prescaler)  
        .equ TIM4_CC2S_Shift, 8   @ bitWidth 2 (Capture/compare 2  selection)  
        .equ TIM4_IC1F_Shift, 4   @ bitWidth 4 (Input capture 1 filter)  
        .equ TIM4_IC1PSC_Shift, 2   @ bitWidth 2 (Input capture 1 prescaler)  
        .equ TIM4_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM4_CCMR2_Output, TIM4_BASE + 0x1C @ (capture/compare mode register 2 output  mode) 
        .equ TIM4_O24CE_Shift, 15   @ bitWidth 1 (Output compare 4 clear  enable)  
        .equ TIM4_OC4M_Shift, 12   @ bitWidth 3 (Output compare 4 mode)  
        .equ TIM4_OC4PE_Shift, 11   @ bitWidth 1 (Output compare 4 preload  enable)  
        .equ TIM4_OC4FE_Shift, 10   @ bitWidth 1 (Output compare 4 fast  enable)  
        .equ TIM4_CC4S_Shift, 8   @ bitWidth 2 (Capture/Compare 4  selection)  
        .equ TIM4_OC3CE_Shift, 7   @ bitWidth 1 (Output compare 3 clear  enable)  
        .equ TIM4_OC3M_Shift, 4   @ bitWidth 3 (Output compare 3 mode)  
        .equ TIM4_OC3PE_Shift, 3   @ bitWidth 1 (Output compare 3 preload  enable)  
        .equ TIM4_OC3FE_Shift, 2   @ bitWidth 1 (Output compare 3 fast  enable)  
        .equ TIM4_CC3S_Shift, 0   @ bitWidth 2 (Capture/Compare 3  selection)  
 
    .equ TIM4_CCMR2_Input, TIM4_BASE + 0x1C @ (capture/compare mode register 2 input  mode) 
        .equ TIM4_IC4F_Shift, 12   @ bitWidth 4 (Input capture 4 filter)  
        .equ TIM4_IC4PSC_Shift, 10   @ bitWidth 2 (Input capture 4 prescaler)  
        .equ TIM4_CC4S_Shift, 8   @ bitWidth 2 (Capture/Compare 4  selection)  
        .equ TIM4_IC3F_Shift, 4   @ bitWidth 4 (Input capture 3 filter)  
        .equ TIM4_IC3PSC_Shift, 2   @ bitWidth 2 (Input capture 3 prescaler)  
        .equ TIM4_CC3S_Shift, 0   @ bitWidth 2 (Capture/Compare 3  selection)  
 
    .equ TIM4_CCER, TIM4_BASE + 0x20 @ (capture/compare enable  register) 
        .equ TIM4_CC4P_Shift, 13   @ bitWidth 1 (Capture/Compare 3 output  Polarity)  
        .equ TIM4_CC4E_Shift, 12   @ bitWidth 1 (Capture/Compare 4 output  enable)  
        .equ TIM4_CC3P_Shift, 9   @ bitWidth 1 (Capture/Compare 3 output  Polarity)  
        .equ TIM4_CC3E_Shift, 8   @ bitWidth 1 (Capture/Compare 3 output  enable)  
        .equ TIM4_CC2P_Shift, 5   @ bitWidth 1 (Capture/Compare 2 output  Polarity)  
        .equ TIM4_CC2E_Shift, 4   @ bitWidth 1 (Capture/Compare 2 output  enable)  
        .equ TIM4_CC1P_Shift, 1   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM4_CC1E_Shift, 0   @ bitWidth 1 (Capture/Compare 1 output  enable)  
 
    .equ TIM4_CNT, TIM4_BASE + 0x24 @ (counter) 
        .equ TIM4_CNT_Shift, 0   @ bitWidth 16 (counter value)  
 
    .equ TIM4_PSC, TIM4_BASE + 0x28 @ (prescaler) 
        .equ TIM4_PSC_Shift, 0   @ bitWidth 16 (Prescaler value)  
 
    .equ TIM4_ARR, TIM4_BASE + 0x2C @ (auto-reload register) 
        .equ TIM4_ARR_Shift, 0   @ bitWidth 16 (Auto-reload value)  
 
    .equ TIM4_CCR1, TIM4_BASE + 0x34 @ (capture/compare register 1) 
        .equ TIM4_CCR1_Shift, 0   @ bitWidth 16 (Capture/Compare 1 value)  
 
    .equ TIM4_CCR2, TIM4_BASE + 0x38 @ (capture/compare register 2) 
        .equ TIM4_CCR2_Shift, 0   @ bitWidth 16 (Capture/Compare 2 value)  
 
    .equ TIM4_CCR3, TIM4_BASE + 0x3C @ (capture/compare register 3) 
        .equ TIM4_CCR3_Shift, 0   @ bitWidth 16 (Capture/Compare value)  
 
    .equ TIM4_CCR4, TIM4_BASE + 0x40 @ (capture/compare register 4) 
        .equ TIM4_CCR4_Shift, 0   @ bitWidth 16 (Capture/Compare value)  
 
    .equ TIM4_DCR, TIM4_BASE + 0x48 @ (DMA control register) 
        .equ TIM4_DBL_Shift, 8   @ bitWidth 5 (DMA burst length)  
        .equ TIM4_DBA_Shift, 0   @ bitWidth 5 (DMA base address)  
 
    .equ TIM4_DMAR, TIM4_BASE + 0x4C @ (DMA address for full transfer) 
        .equ TIM4_DMAB_Shift, 0   @ bitWidth 16 (DMA register for burst  accesses)  
 

@=========================== TIM5 ===========================@
.equ TIM5_BASE, 0x40000C00 @ (General purpose timer) 
    .equ TIM5_CR1, TIM5_BASE + 0x0 @ (control register 1) 
        .equ TIM5_CKD_Shift, 8   @ bitWidth 2 (Clock division)  
        .equ TIM5_ARPE_Shift, 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM5_CMS_Shift, 5   @ bitWidth 2 (Center-aligned mode  selection)  
        .equ TIM5_DIR_Shift, 4   @ bitWidth 1 (Direction)  
        .equ TIM5_OPM_Shift, 3   @ bitWidth 1 (One-pulse mode)  
        .equ TIM5_URS_Shift, 2   @ bitWidth 1 (Update request source)  
        .equ TIM5_UDIS_Shift, 1   @ bitWidth 1 (Update disable)  
        .equ TIM5_CEN_Shift, 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM5_CR2, TIM5_BASE + 0x4 @ (control register 2) 
        .equ TIM5_TI1S_Shift, 7   @ bitWidth 1 (TI1 selection)  
        .equ TIM5_MMS_Shift, 4   @ bitWidth 3 (Master mode selection)  
        .equ TIM5_CCDS_Shift, 3   @ bitWidth 1 (Capture/compare DMA  selection)  
 
    .equ TIM5_SMCR, TIM5_BASE + 0x8 @ (slave mode control register) 
        .equ TIM5_ETP_Shift, 15   @ bitWidth 1 (External trigger polarity)  
        .equ TIM5_ECE_Shift, 14   @ bitWidth 1 (External clock enable)  
        .equ TIM5_ETPS_Shift, 12   @ bitWidth 2 (External trigger prescaler)  
        .equ TIM5_ETF_Shift, 8   @ bitWidth 4 (External trigger filter)  
        .equ TIM5_MSM_Shift, 7   @ bitWidth 1 (Master/Slave mode)  
        .equ TIM5_TS_Shift, 4   @ bitWidth 3 (Trigger selection)  
        .equ TIM5_SMS_Shift, 0   @ bitWidth 3 (Slave mode selection)  
 
    .equ TIM5_DIER, TIM5_BASE + 0xC @ (DMA/Interrupt enable register) 
        .equ TIM5_TDE_Shift, 14   @ bitWidth 1 (Trigger DMA request enable)  
        .equ TIM5_CC4DE_Shift, 12   @ bitWidth 1 (Capture/Compare 4 DMA request  enable)  
        .equ TIM5_CC3DE_Shift, 11   @ bitWidth 1 (Capture/Compare 3 DMA request  enable)  
        .equ TIM5_CC2DE_Shift, 10   @ bitWidth 1 (Capture/Compare 2 DMA request  enable)  
        .equ TIM5_CC1DE_Shift, 9   @ bitWidth 1 (Capture/Compare 1 DMA request  enable)  
        .equ TIM5_UDE_Shift, 8   @ bitWidth 1 (Update DMA request enable)  
        .equ TIM5_TIE_Shift, 6   @ bitWidth 1 (Trigger interrupt enable)  
        .equ TIM5_CC4IE_Shift, 4   @ bitWidth 1 (Capture/Compare 4 interrupt  enable)  
        .equ TIM5_CC3IE_Shift, 3   @ bitWidth 1 (Capture/Compare 3 interrupt  enable)  
        .equ TIM5_CC2IE_Shift, 2   @ bitWidth 1 (Capture/Compare 2 interrupt  enable)  
        .equ TIM5_CC1IE_Shift, 1   @ bitWidth 1 (Capture/Compare 1 interrupt  enable)  
        .equ TIM5_UIE_Shift, 0   @ bitWidth 1 (Update interrupt enable)  
 
    .equ TIM5_SR, TIM5_BASE + 0x10 @ (status register) 
        .equ TIM5_CC4OF_Shift, 12   @ bitWidth 1 (Capture/Compare 4 overcapture  flag)  
        .equ TIM5_CC3OF_Shift, 11   @ bitWidth 1 (Capture/Compare 3 overcapture  flag)  
        .equ TIM5_CC2OF_Shift, 10   @ bitWidth 1 (Capture/compare 2 overcapture  flag)  
        .equ TIM5_CC1OF_Shift, 9   @ bitWidth 1 (Capture/Compare 1 overcapture  flag)  
        .equ TIM5_TIF_Shift, 6   @ bitWidth 1 (Trigger interrupt flag)  
        .equ TIM5_CC4IF_Shift, 4   @ bitWidth 1 (Capture/Compare 4 interrupt  flag)  
        .equ TIM5_CC3IF_Shift, 3   @ bitWidth 1 (Capture/Compare 3 interrupt  flag)  
        .equ TIM5_CC2IF_Shift, 2   @ bitWidth 1 (Capture/Compare 2 interrupt  flag)  
        .equ TIM5_CC1IF_Shift, 1   @ bitWidth 1 (Capture/compare 1 interrupt  flag)  
        .equ TIM5_UIF_Shift, 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM5_EGR, TIM5_BASE + 0x14 @ (event generation register) 
        .equ TIM5_TG_Shift, 6   @ bitWidth 1 (Trigger generation)  
        .equ TIM5_CC4G_Shift, 4   @ bitWidth 1 (Capture/compare 4  generation)  
        .equ TIM5_CC3G_Shift, 3   @ bitWidth 1 (Capture/compare 3  generation)  
        .equ TIM5_CC2G_Shift, 2   @ bitWidth 1 (Capture/compare 2  generation)  
        .equ TIM5_CC1G_Shift, 1   @ bitWidth 1 (Capture/compare 1  generation)  
        .equ TIM5_UG_Shift, 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM5_CCMR1_Output, TIM5_BASE + 0x18 @ (capture/compare mode register 1 output  mode) 
        .equ TIM5_OC2CE_Shift, 15   @ bitWidth 1 (Output compare 2 clear  enable)  
        .equ TIM5_OC2M_Shift, 12   @ bitWidth 3 (Output compare 2 mode)  
        .equ TIM5_OC2PE_Shift, 11   @ bitWidth 1 (Output compare 2 preload  enable)  
        .equ TIM5_OC2FE_Shift, 10   @ bitWidth 1 (Output compare 2 fast  enable)  
        .equ TIM5_CC2S_Shift, 8   @ bitWidth 2 (Capture/Compare 2  selection)  
        .equ TIM5_OC1CE_Shift, 7   @ bitWidth 1 (Output compare 1 clear  enable)  
        .equ TIM5_OC1M_Shift, 4   @ bitWidth 3 (Output compare 1 mode)  
        .equ TIM5_OC1PE_Shift, 3   @ bitWidth 1 (Output compare 1 preload  enable)  
        .equ TIM5_OC1FE_Shift, 2   @ bitWidth 1 (Output compare 1 fast  enable)  
        .equ TIM5_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM5_CCMR1_Input, TIM5_BASE + 0x18 @ (capture/compare mode register 1 input  mode) 
        .equ TIM5_IC2F_Shift, 12   @ bitWidth 4 (Input capture 2 filter)  
        .equ TIM5_IC2PSC_Shift, 10   @ bitWidth 2 (Input capture 2 prescaler)  
        .equ TIM5_CC2S_Shift, 8   @ bitWidth 2 (Capture/compare 2  selection)  
        .equ TIM5_IC1F_Shift, 4   @ bitWidth 4 (Input capture 1 filter)  
        .equ TIM5_IC1PSC_Shift, 2   @ bitWidth 2 (Input capture 1 prescaler)  
        .equ TIM5_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM5_CCMR2_Output, TIM5_BASE + 0x1C @ (capture/compare mode register 2 output  mode) 
        .equ TIM5_O24CE_Shift, 15   @ bitWidth 1 (Output compare 4 clear  enable)  
        .equ TIM5_OC4M_Shift, 12   @ bitWidth 3 (Output compare 4 mode)  
        .equ TIM5_OC4PE_Shift, 11   @ bitWidth 1 (Output compare 4 preload  enable)  
        .equ TIM5_OC4FE_Shift, 10   @ bitWidth 1 (Output compare 4 fast  enable)  
        .equ TIM5_CC4S_Shift, 8   @ bitWidth 2 (Capture/Compare 4  selection)  
        .equ TIM5_OC3CE_Shift, 7   @ bitWidth 1 (Output compare 3 clear  enable)  
        .equ TIM5_OC3M_Shift, 4   @ bitWidth 3 (Output compare 3 mode)  
        .equ TIM5_OC3PE_Shift, 3   @ bitWidth 1 (Output compare 3 preload  enable)  
        .equ TIM5_OC3FE_Shift, 2   @ bitWidth 1 (Output compare 3 fast  enable)  
        .equ TIM5_CC3S_Shift, 0   @ bitWidth 2 (Capture/Compare 3  selection)  
 
    .equ TIM5_CCMR2_Input, TIM5_BASE + 0x1C @ (capture/compare mode register 2 input  mode) 
        .equ TIM5_IC4F_Shift, 12   @ bitWidth 4 (Input capture 4 filter)  
        .equ TIM5_IC4PSC_Shift, 10   @ bitWidth 2 (Input capture 4 prescaler)  
        .equ TIM5_CC4S_Shift, 8   @ bitWidth 2 (Capture/Compare 4  selection)  
        .equ TIM5_IC3F_Shift, 4   @ bitWidth 4 (Input capture 3 filter)  
        .equ TIM5_IC3PSC_Shift, 2   @ bitWidth 2 (Input capture 3 prescaler)  
        .equ TIM5_CC3S_Shift, 0   @ bitWidth 2 (Capture/Compare 3  selection)  
 
    .equ TIM5_CCER, TIM5_BASE + 0x20 @ (capture/compare enable  register) 
        .equ TIM5_CC4P_Shift, 13   @ bitWidth 1 (Capture/Compare 3 output  Polarity)  
        .equ TIM5_CC4E_Shift, 12   @ bitWidth 1 (Capture/Compare 4 output  enable)  
        .equ TIM5_CC3P_Shift, 9   @ bitWidth 1 (Capture/Compare 3 output  Polarity)  
        .equ TIM5_CC3E_Shift, 8   @ bitWidth 1 (Capture/Compare 3 output  enable)  
        .equ TIM5_CC2P_Shift, 5   @ bitWidth 1 (Capture/Compare 2 output  Polarity)  
        .equ TIM5_CC2E_Shift, 4   @ bitWidth 1 (Capture/Compare 2 output  enable)  
        .equ TIM5_CC1P_Shift, 1   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM5_CC1E_Shift, 0   @ bitWidth 1 (Capture/Compare 1 output  enable)  
 
    .equ TIM5_CNT, TIM5_BASE + 0x24 @ (counter) 
        .equ TIM5_CNT_Shift, 0   @ bitWidth 16 (counter value)  
 
    .equ TIM5_PSC, TIM5_BASE + 0x28 @ (prescaler) 
        .equ TIM5_PSC_Shift, 0   @ bitWidth 16 (Prescaler value)  
 
    .equ TIM5_ARR, TIM5_BASE + 0x2C @ (auto-reload register) 
        .equ TIM5_ARR_Shift, 0   @ bitWidth 16 (Auto-reload value)  
 
    .equ TIM5_CCR1, TIM5_BASE + 0x34 @ (capture/compare register 1) 
        .equ TIM5_CCR1_Shift, 0   @ bitWidth 16 (Capture/Compare 1 value)  
 
    .equ TIM5_CCR2, TIM5_BASE + 0x38 @ (capture/compare register 2) 
        .equ TIM5_CCR2_Shift, 0   @ bitWidth 16 (Capture/Compare 2 value)  
 
    .equ TIM5_CCR3, TIM5_BASE + 0x3C @ (capture/compare register 3) 
        .equ TIM5_CCR3_Shift, 0   @ bitWidth 16 (Capture/Compare value)  
 
    .equ TIM5_CCR4, TIM5_BASE + 0x40 @ (capture/compare register 4) 
        .equ TIM5_CCR4_Shift, 0   @ bitWidth 16 (Capture/Compare value)  
 
    .equ TIM5_DCR, TIM5_BASE + 0x48 @ (DMA control register) 
        .equ TIM5_DBL_Shift, 8   @ bitWidth 5 (DMA burst length)  
        .equ TIM5_DBA_Shift, 0   @ bitWidth 5 (DMA base address)  
 
    .equ TIM5_DMAR, TIM5_BASE + 0x4C @ (DMA address for full transfer) 
        .equ TIM5_DMAB_Shift, 0   @ bitWidth 16 (DMA register for burst  accesses)  
 

@=========================== TIM9 ===========================@
.equ TIM9_BASE, 0x40014C00 @ (General purpose timer) 
    .equ TIM9_CR1, TIM9_BASE + 0x0 @ (control register 1) 
        .equ TIM9_CKD_Shift, 8   @ bitWidth 2 (Clock division)  
        .equ TIM9_ARPE_Shift, 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM9_OPM_Shift, 3   @ bitWidth 1 (One-pulse mode)  
        .equ TIM9_URS_Shift, 2   @ bitWidth 1 (Update request source)  
        .equ TIM9_UDIS_Shift, 1   @ bitWidth 1 (Update disable)  
        .equ TIM9_CEN_Shift, 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM9_CR2, TIM9_BASE + 0x4 @ (control register 2) 
        .equ TIM9_MMS_Shift, 4   @ bitWidth 3 (Master mode selection)  
 
    .equ TIM9_SMCR, TIM9_BASE + 0x8 @ (slave mode control register) 
        .equ TIM9_MSM_Shift, 7   @ bitWidth 1 (Master/Slave mode)  
        .equ TIM9_TS_Shift, 4   @ bitWidth 3 (Trigger selection)  
        .equ TIM9_SMS_Shift, 0   @ bitWidth 3 (Slave mode selection)  
 
    .equ TIM9_DIER, TIM9_BASE + 0xC @ (DMA/Interrupt enable register) 
        .equ TIM9_TIE_Shift, 6   @ bitWidth 1 (Trigger interrupt enable)  
        .equ TIM9_CC2IE_Shift, 2   @ bitWidth 1 (Capture/Compare 2 interrupt  enable)  
        .equ TIM9_CC1IE_Shift, 1   @ bitWidth 1 (Capture/Compare 1 interrupt  enable)  
        .equ TIM9_UIE_Shift, 0   @ bitWidth 1 (Update interrupt enable)  
 
    .equ TIM9_SR, TIM9_BASE + 0x10 @ (status register) 
        .equ TIM9_CC2OF_Shift, 10   @ bitWidth 1 (Capture/compare 2 overcapture  flag)  
        .equ TIM9_CC1OF_Shift, 9   @ bitWidth 1 (Capture/Compare 1 overcapture  flag)  
        .equ TIM9_TIF_Shift, 6   @ bitWidth 1 (Trigger interrupt flag)  
        .equ TIM9_CC2IF_Shift, 2   @ bitWidth 1 (Capture/Compare 2 interrupt  flag)  
        .equ TIM9_CC1IF_Shift, 1   @ bitWidth 1 (Capture/compare 1 interrupt  flag)  
        .equ TIM9_UIF_Shift, 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM9_EGR, TIM9_BASE + 0x14 @ (event generation register) 
        .equ TIM9_TG_Shift, 6   @ bitWidth 1 (Trigger generation)  
        .equ TIM9_CC2G_Shift, 2   @ bitWidth 1 (Capture/compare 2  generation)  
        .equ TIM9_CC1G_Shift, 1   @ bitWidth 1 (Capture/compare 1  generation)  
        .equ TIM9_UG_Shift, 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM9_CCMR1_Output, TIM9_BASE + 0x18 @ (capture/compare mode register 1 output  mode) 
        .equ TIM9_OC2M_Shift, 12   @ bitWidth 3 (Output Compare 2 mode)  
        .equ TIM9_OC2PE_Shift, 11   @ bitWidth 1 (Output Compare 2 preload  enable)  
        .equ TIM9_OC2FE_Shift, 10   @ bitWidth 1 (Output Compare 2 fast  enable)  
        .equ TIM9_CC2S_Shift, 8   @ bitWidth 2 (Capture/Compare 2  selection)  
        .equ TIM9_OC1M_Shift, 4   @ bitWidth 3 (Output Compare 1 mode)  
        .equ TIM9_OC1PE_Shift, 3   @ bitWidth 1 (Output Compare 1 preload  enable)  
        .equ TIM9_OC1FE_Shift, 2   @ bitWidth 1 (Output Compare 1 fast  enable)  
        .equ TIM9_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM9_CCMR1_Input, TIM9_BASE + 0x18 @ (capture/compare mode register 1 input  mode) 
        .equ TIM9_IC2F_Shift, 12   @ bitWidth 4 (Input capture 2 filter)  
        .equ TIM9_IC2PSC_Shift, 10   @ bitWidth 2 (Input capture 2 prescaler)  
        .equ TIM9_CC2S_Shift, 8   @ bitWidth 2 (Capture/Compare 2  selection)  
        .equ TIM9_IC1F_Shift, 4   @ bitWidth 4 (Input capture 1 filter)  
        .equ TIM9_IC1PSC_Shift, 2   @ bitWidth 2 (Input capture 1 prescaler)  
        .equ TIM9_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM9_CCER, TIM9_BASE + 0x20 @ (capture/compare enable  register) 
        .equ TIM9_CC2NP_Shift, 7   @ bitWidth 1 (Capture/Compare 2 output  Polarity)  
        .equ TIM9_CC2P_Shift, 5   @ bitWidth 1 (Capture/Compare 2 output  Polarity)  
        .equ TIM9_CC2E_Shift, 4   @ bitWidth 1 (Capture/Compare 2 output  enable)  
        .equ TIM9_CC1NP_Shift, 3   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM9_CC1P_Shift, 1   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM9_CC1E_Shift, 0   @ bitWidth 1 (Capture/Compare 1 output  enable)  
 
    .equ TIM9_CNT, TIM9_BASE + 0x24 @ (counter) 
        .equ TIM9_CNT_Shift, 0   @ bitWidth 16 (counter value)  
 
    .equ TIM9_PSC, TIM9_BASE + 0x28 @ (prescaler) 
        .equ TIM9_PSC_Shift, 0   @ bitWidth 16 (Prescaler value)  
 
    .equ TIM9_ARR, TIM9_BASE + 0x2C @ (auto-reload register) 
        .equ TIM9_ARR_Shift, 0   @ bitWidth 16 (Auto-reload value)  
 
    .equ TIM9_CCR1, TIM9_BASE + 0x34 @ (capture/compare register 1) 
        .equ TIM9_CCR1_Shift, 0   @ bitWidth 16 (Capture/Compare 1 value)  
 
    .equ TIM9_CCR2, TIM9_BASE + 0x38 @ (capture/compare register 2) 
        .equ TIM9_CCR2_Shift, 0   @ bitWidth 16 (Capture/Compare 2 value)  
 

@=========================== TIM12 ===========================@
.equ TIM12_BASE, 0x40001800 @ (General purpose timer) 
    .equ TIM12_CR1, TIM12_BASE + 0x0 @ (control register 1) 
        .equ TIM12_CKD_Shift, 8   @ bitWidth 2 (Clock division)  
        .equ TIM12_ARPE_Shift, 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM12_OPM_Shift, 3   @ bitWidth 1 (One-pulse mode)  
        .equ TIM12_URS_Shift, 2   @ bitWidth 1 (Update request source)  
        .equ TIM12_UDIS_Shift, 1   @ bitWidth 1 (Update disable)  
        .equ TIM12_CEN_Shift, 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM12_CR2, TIM12_BASE + 0x4 @ (control register 2) 
        .equ TIM12_MMS_Shift, 4   @ bitWidth 3 (Master mode selection)  
 
    .equ TIM12_SMCR, TIM12_BASE + 0x8 @ (slave mode control register) 
        .equ TIM12_MSM_Shift, 7   @ bitWidth 1 (Master/Slave mode)  
        .equ TIM12_TS_Shift, 4   @ bitWidth 3 (Trigger selection)  
        .equ TIM12_SMS_Shift, 0   @ bitWidth 3 (Slave mode selection)  
 
    .equ TIM12_DIER, TIM12_BASE + 0xC @ (DMA/Interrupt enable register) 
        .equ TIM12_TIE_Shift, 6   @ bitWidth 1 (Trigger interrupt enable)  
        .equ TIM12_CC2IE_Shift, 2   @ bitWidth 1 (Capture/Compare 2 interrupt  enable)  
        .equ TIM12_CC1IE_Shift, 1   @ bitWidth 1 (Capture/Compare 1 interrupt  enable)  
        .equ TIM12_UIE_Shift, 0   @ bitWidth 1 (Update interrupt enable)  
 
    .equ TIM12_SR, TIM12_BASE + 0x10 @ (status register) 
        .equ TIM12_CC2OF_Shift, 10   @ bitWidth 1 (Capture/compare 2 overcapture  flag)  
        .equ TIM12_CC1OF_Shift, 9   @ bitWidth 1 (Capture/Compare 1 overcapture  flag)  
        .equ TIM12_TIF_Shift, 6   @ bitWidth 1 (Trigger interrupt flag)  
        .equ TIM12_CC2IF_Shift, 2   @ bitWidth 1 (Capture/Compare 2 interrupt  flag)  
        .equ TIM12_CC1IF_Shift, 1   @ bitWidth 1 (Capture/compare 1 interrupt  flag)  
        .equ TIM12_UIF_Shift, 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM12_EGR, TIM12_BASE + 0x14 @ (event generation register) 
        .equ TIM12_TG_Shift, 6   @ bitWidth 1 (Trigger generation)  
        .equ TIM12_CC2G_Shift, 2   @ bitWidth 1 (Capture/compare 2  generation)  
        .equ TIM12_CC1G_Shift, 1   @ bitWidth 1 (Capture/compare 1  generation)  
        .equ TIM12_UG_Shift, 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM12_CCMR1_Output, TIM12_BASE + 0x18 @ (capture/compare mode register 1 output  mode) 
        .equ TIM12_OC2M_Shift, 12   @ bitWidth 3 (Output Compare 2 mode)  
        .equ TIM12_OC2PE_Shift, 11   @ bitWidth 1 (Output Compare 2 preload  enable)  
        .equ TIM12_OC2FE_Shift, 10   @ bitWidth 1 (Output Compare 2 fast  enable)  
        .equ TIM12_CC2S_Shift, 8   @ bitWidth 2 (Capture/Compare 2  selection)  
        .equ TIM12_OC1M_Shift, 4   @ bitWidth 3 (Output Compare 1 mode)  
        .equ TIM12_OC1PE_Shift, 3   @ bitWidth 1 (Output Compare 1 preload  enable)  
        .equ TIM12_OC1FE_Shift, 2   @ bitWidth 1 (Output Compare 1 fast  enable)  
        .equ TIM12_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM12_CCMR1_Input, TIM12_BASE + 0x18 @ (capture/compare mode register 1 input  mode) 
        .equ TIM12_IC2F_Shift, 12   @ bitWidth 4 (Input capture 2 filter)  
        .equ TIM12_IC2PSC_Shift, 10   @ bitWidth 2 (Input capture 2 prescaler)  
        .equ TIM12_CC2S_Shift, 8   @ bitWidth 2 (Capture/Compare 2  selection)  
        .equ TIM12_IC1F_Shift, 4   @ bitWidth 4 (Input capture 1 filter)  
        .equ TIM12_IC1PSC_Shift, 2   @ bitWidth 2 (Input capture 1 prescaler)  
        .equ TIM12_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM12_CCER, TIM12_BASE + 0x20 @ (capture/compare enable  register) 
        .equ TIM12_CC2NP_Shift, 7   @ bitWidth 1 (Capture/Compare 2 output  Polarity)  
        .equ TIM12_CC2P_Shift, 5   @ bitWidth 1 (Capture/Compare 2 output  Polarity)  
        .equ TIM12_CC2E_Shift, 4   @ bitWidth 1 (Capture/Compare 2 output  enable)  
        .equ TIM12_CC1NP_Shift, 3   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM12_CC1P_Shift, 1   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM12_CC1E_Shift, 0   @ bitWidth 1 (Capture/Compare 1 output  enable)  
 
    .equ TIM12_CNT, TIM12_BASE + 0x24 @ (counter) 
        .equ TIM12_CNT_Shift, 0   @ bitWidth 16 (counter value)  
 
    .equ TIM12_PSC, TIM12_BASE + 0x28 @ (prescaler) 
        .equ TIM12_PSC_Shift, 0   @ bitWidth 16 (Prescaler value)  
 
    .equ TIM12_ARR, TIM12_BASE + 0x2C @ (auto-reload register) 
        .equ TIM12_ARR_Shift, 0   @ bitWidth 16 (Auto-reload value)  
 
    .equ TIM12_CCR1, TIM12_BASE + 0x34 @ (capture/compare register 1) 
        .equ TIM12_CCR1_Shift, 0   @ bitWidth 16 (Capture/Compare 1 value)  
 
    .equ TIM12_CCR2, TIM12_BASE + 0x38 @ (capture/compare register 2) 
        .equ TIM12_CCR2_Shift, 0   @ bitWidth 16 (Capture/Compare 2 value)  
 

@=========================== TIM10 ===========================@
.equ TIM10_BASE, 0x40015000 @ (General purpose timer) 
    .equ TIM10_CR1, TIM10_BASE + 0x0 @ (control register 1) 
        .equ TIM10_CKD_Shift, 8   @ bitWidth 2 (Clock division)  
        .equ TIM10_ARPE_Shift, 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM10_URS_Shift, 2   @ bitWidth 1 (Update request source)  
        .equ TIM10_UDIS_Shift, 1   @ bitWidth 1 (Update disable)  
        .equ TIM10_CEN_Shift, 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM10_CR2, TIM10_BASE + 0x4 @ (control register 2) 
        .equ TIM10_MMS_Shift, 4   @ bitWidth 3 (Master mode selection)  
 
    .equ TIM10_DIER, TIM10_BASE + 0xC @ (DMA/Interrupt enable register) 
        .equ TIM10_CC1IE_Shift, 1   @ bitWidth 1 (Capture/Compare 1 interrupt  enable)  
        .equ TIM10_UIE_Shift, 0   @ bitWidth 1 (Update interrupt enable)  
 
    .equ TIM10_SR, TIM10_BASE + 0x10 @ (status register) 
        .equ TIM10_CC1OF_Shift, 9   @ bitWidth 1 (Capture/Compare 1 overcapture  flag)  
        .equ TIM10_CC1IF_Shift, 1   @ bitWidth 1 (Capture/compare 1 interrupt  flag)  
        .equ TIM10_UIF_Shift, 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM10_EGR, TIM10_BASE + 0x14 @ (event generation register) 
        .equ TIM10_CC1G_Shift, 1   @ bitWidth 1 (Capture/compare 1  generation)  
        .equ TIM10_UG_Shift, 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM10_CCMR1_Output, TIM10_BASE + 0x18 @ (capture/compare mode register output  mode) 
        .equ TIM10_OC1M_Shift, 4   @ bitWidth 3 (Output Compare 1 mode)  
        .equ TIM10_OC1PE_Shift, 3   @ bitWidth 1 (Output Compare 1 preload  enable)  
        .equ TIM10_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM10_CCMR1_Input, TIM10_BASE + 0x18 @ (capture/compare mode register input  mode) 
        .equ TIM10_IC1F_Shift, 4   @ bitWidth 4 (Input capture 1 filter)  
        .equ TIM10_IC1PSC_Shift, 2   @ bitWidth 2 (Input capture 1 prescaler)  
        .equ TIM10_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM10_CCER, TIM10_BASE + 0x20 @ (capture/compare enable  register) 
        .equ TIM10_CC1NP_Shift, 3   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM10_CC1P_Shift, 1   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM10_CC1E_Shift, 0   @ bitWidth 1 (Capture/Compare 1 output  enable)  
 
    .equ TIM10_CNT, TIM10_BASE + 0x24 @ (counter) 
        .equ TIM10_CNT_Shift, 0   @ bitWidth 16 (counter value)  
 
    .equ TIM10_PSC, TIM10_BASE + 0x28 @ (prescaler) 
        .equ TIM10_PSC_Shift, 0   @ bitWidth 16 (Prescaler value)  
 
    .equ TIM10_ARR, TIM10_BASE + 0x2C @ (auto-reload register) 
        .equ TIM10_ARR_Shift, 0   @ bitWidth 16 (Auto-reload value)  
 
    .equ TIM10_CCR1, TIM10_BASE + 0x34 @ (capture/compare register 1) 
        .equ TIM10_CCR1_Shift, 0   @ bitWidth 16 (Capture/Compare 1 value)  
 

@=========================== TIM11 ===========================@
.equ TIM11_BASE, 0x40015400 @ (General purpose timer) 
    .equ TIM11_CR1, TIM11_BASE + 0x0 @ (control register 1) 
        .equ TIM11_CKD_Shift, 8   @ bitWidth 2 (Clock division)  
        .equ TIM11_ARPE_Shift, 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM11_URS_Shift, 2   @ bitWidth 1 (Update request source)  
        .equ TIM11_UDIS_Shift, 1   @ bitWidth 1 (Update disable)  
        .equ TIM11_CEN_Shift, 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM11_CR2, TIM11_BASE + 0x4 @ (control register 2) 
        .equ TIM11_MMS_Shift, 4   @ bitWidth 3 (Master mode selection)  
 
    .equ TIM11_DIER, TIM11_BASE + 0xC @ (DMA/Interrupt enable register) 
        .equ TIM11_CC1IE_Shift, 1   @ bitWidth 1 (Capture/Compare 1 interrupt  enable)  
        .equ TIM11_UIE_Shift, 0   @ bitWidth 1 (Update interrupt enable)  
 
    .equ TIM11_SR, TIM11_BASE + 0x10 @ (status register) 
        .equ TIM11_CC1OF_Shift, 9   @ bitWidth 1 (Capture/Compare 1 overcapture  flag)  
        .equ TIM11_CC1IF_Shift, 1   @ bitWidth 1 (Capture/compare 1 interrupt  flag)  
        .equ TIM11_UIF_Shift, 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM11_EGR, TIM11_BASE + 0x14 @ (event generation register) 
        .equ TIM11_CC1G_Shift, 1   @ bitWidth 1 (Capture/compare 1  generation)  
        .equ TIM11_UG_Shift, 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM11_CCMR1_Output, TIM11_BASE + 0x18 @ (capture/compare mode register output  mode) 
        .equ TIM11_OC1M_Shift, 4   @ bitWidth 3 (Output Compare 1 mode)  
        .equ TIM11_OC1PE_Shift, 3   @ bitWidth 1 (Output Compare 1 preload  enable)  
        .equ TIM11_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM11_CCMR1_Input, TIM11_BASE + 0x18 @ (capture/compare mode register input  mode) 
        .equ TIM11_IC1F_Shift, 4   @ bitWidth 4 (Input capture 1 filter)  
        .equ TIM11_IC1PSC_Shift, 2   @ bitWidth 2 (Input capture 1 prescaler)  
        .equ TIM11_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM11_CCER, TIM11_BASE + 0x20 @ (capture/compare enable  register) 
        .equ TIM11_CC1NP_Shift, 3   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM11_CC1P_Shift, 1   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM11_CC1E_Shift, 0   @ bitWidth 1 (Capture/Compare 1 output  enable)  
 
    .equ TIM11_CNT, TIM11_BASE + 0x24 @ (counter) 
        .equ TIM11_CNT_Shift, 0   @ bitWidth 16 (counter value)  
 
    .equ TIM11_PSC, TIM11_BASE + 0x28 @ (prescaler) 
        .equ TIM11_PSC_Shift, 0   @ bitWidth 16 (Prescaler value)  
 
    .equ TIM11_ARR, TIM11_BASE + 0x2C @ (auto-reload register) 
        .equ TIM11_ARR_Shift, 0   @ bitWidth 16 (Auto-reload value)  
 
    .equ TIM11_CCR1, TIM11_BASE + 0x34 @ (capture/compare register 1) 
        .equ TIM11_CCR1_Shift, 0   @ bitWidth 16 (Capture/Compare 1 value)  
 

@=========================== TIM13 ===========================@
.equ TIM13_BASE, 0x40001C00 @ (General purpose timer) 
    .equ TIM13_CR1, TIM13_BASE + 0x0 @ (control register 1) 
        .equ TIM13_CKD_Shift, 8   @ bitWidth 2 (Clock division)  
        .equ TIM13_ARPE_Shift, 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM13_URS_Shift, 2   @ bitWidth 1 (Update request source)  
        .equ TIM13_UDIS_Shift, 1   @ bitWidth 1 (Update disable)  
        .equ TIM13_CEN_Shift, 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM13_CR2, TIM13_BASE + 0x4 @ (control register 2) 
        .equ TIM13_MMS_Shift, 4   @ bitWidth 3 (Master mode selection)  
 
    .equ TIM13_DIER, TIM13_BASE + 0xC @ (DMA/Interrupt enable register) 
        .equ TIM13_CC1IE_Shift, 1   @ bitWidth 1 (Capture/Compare 1 interrupt  enable)  
        .equ TIM13_UIE_Shift, 0   @ bitWidth 1 (Update interrupt enable)  
 
    .equ TIM13_SR, TIM13_BASE + 0x10 @ (status register) 
        .equ TIM13_CC1OF_Shift, 9   @ bitWidth 1 (Capture/Compare 1 overcapture  flag)  
        .equ TIM13_CC1IF_Shift, 1   @ bitWidth 1 (Capture/compare 1 interrupt  flag)  
        .equ TIM13_UIF_Shift, 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM13_EGR, TIM13_BASE + 0x14 @ (event generation register) 
        .equ TIM13_CC1G_Shift, 1   @ bitWidth 1 (Capture/compare 1  generation)  
        .equ TIM13_UG_Shift, 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM13_CCMR1_Output, TIM13_BASE + 0x18 @ (capture/compare mode register output  mode) 
        .equ TIM13_OC1M_Shift, 4   @ bitWidth 3 (Output Compare 1 mode)  
        .equ TIM13_OC1PE_Shift, 3   @ bitWidth 1 (Output Compare 1 preload  enable)  
        .equ TIM13_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM13_CCMR1_Input, TIM13_BASE + 0x18 @ (capture/compare mode register input  mode) 
        .equ TIM13_IC1F_Shift, 4   @ bitWidth 4 (Input capture 1 filter)  
        .equ TIM13_IC1PSC_Shift, 2   @ bitWidth 2 (Input capture 1 prescaler)  
        .equ TIM13_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM13_CCER, TIM13_BASE + 0x20 @ (capture/compare enable  register) 
        .equ TIM13_CC1NP_Shift, 3   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM13_CC1P_Shift, 1   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM13_CC1E_Shift, 0   @ bitWidth 1 (Capture/Compare 1 output  enable)  
 
    .equ TIM13_CNT, TIM13_BASE + 0x24 @ (counter) 
        .equ TIM13_CNT_Shift, 0   @ bitWidth 16 (counter value)  
 
    .equ TIM13_PSC, TIM13_BASE + 0x28 @ (prescaler) 
        .equ TIM13_PSC_Shift, 0   @ bitWidth 16 (Prescaler value)  
 
    .equ TIM13_ARR, TIM13_BASE + 0x2C @ (auto-reload register) 
        .equ TIM13_ARR_Shift, 0   @ bitWidth 16 (Auto-reload value)  
 
    .equ TIM13_CCR1, TIM13_BASE + 0x34 @ (capture/compare register 1) 
        .equ TIM13_CCR1_Shift, 0   @ bitWidth 16 (Capture/Compare 1 value)  
 

@=========================== TIM14 ===========================@
.equ TIM14_BASE, 0x40002000 @ (General purpose timer) 
    .equ TIM14_CR1, TIM14_BASE + 0x0 @ (control register 1) 
        .equ TIM14_CKD_Shift, 8   @ bitWidth 2 (Clock division)  
        .equ TIM14_ARPE_Shift, 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM14_URS_Shift, 2   @ bitWidth 1 (Update request source)  
        .equ TIM14_UDIS_Shift, 1   @ bitWidth 1 (Update disable)  
        .equ TIM14_CEN_Shift, 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM14_CR2, TIM14_BASE + 0x4 @ (control register 2) 
        .equ TIM14_MMS_Shift, 4   @ bitWidth 3 (Master mode selection)  
 
    .equ TIM14_DIER, TIM14_BASE + 0xC @ (DMA/Interrupt enable register) 
        .equ TIM14_CC1IE_Shift, 1   @ bitWidth 1 (Capture/Compare 1 interrupt  enable)  
        .equ TIM14_UIE_Shift, 0   @ bitWidth 1 (Update interrupt enable)  
 
    .equ TIM14_SR, TIM14_BASE + 0x10 @ (status register) 
        .equ TIM14_CC1OF_Shift, 9   @ bitWidth 1 (Capture/Compare 1 overcapture  flag)  
        .equ TIM14_CC1IF_Shift, 1   @ bitWidth 1 (Capture/compare 1 interrupt  flag)  
        .equ TIM14_UIF_Shift, 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM14_EGR, TIM14_BASE + 0x14 @ (event generation register) 
        .equ TIM14_CC1G_Shift, 1   @ bitWidth 1 (Capture/compare 1  generation)  
        .equ TIM14_UG_Shift, 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM14_CCMR1_Output, TIM14_BASE + 0x18 @ (capture/compare mode register output  mode) 
        .equ TIM14_OC1M_Shift, 4   @ bitWidth 3 (Output Compare 1 mode)  
        .equ TIM14_OC1PE_Shift, 3   @ bitWidth 1 (Output Compare 1 preload  enable)  
        .equ TIM14_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM14_CCMR1_Input, TIM14_BASE + 0x18 @ (capture/compare mode register input  mode) 
        .equ TIM14_IC1F_Shift, 4   @ bitWidth 4 (Input capture 1 filter)  
        .equ TIM14_IC1PSC_Shift, 2   @ bitWidth 2 (Input capture 1 prescaler)  
        .equ TIM14_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM14_CCER, TIM14_BASE + 0x20 @ (capture/compare enable  register) 
        .equ TIM14_CC1NP_Shift, 3   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM14_CC1P_Shift, 1   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM14_CC1E_Shift, 0   @ bitWidth 1 (Capture/Compare 1 output  enable)  
 
    .equ TIM14_CNT, TIM14_BASE + 0x24 @ (counter) 
        .equ TIM14_CNT_Shift, 0   @ bitWidth 16 (counter value)  
 
    .equ TIM14_PSC, TIM14_BASE + 0x28 @ (prescaler) 
        .equ TIM14_PSC_Shift, 0   @ bitWidth 16 (Prescaler value)  
 
    .equ TIM14_ARR, TIM14_BASE + 0x2C @ (auto-reload register) 
        .equ TIM14_ARR_Shift, 0   @ bitWidth 16 (Auto-reload value)  
 
    .equ TIM14_CCR1, TIM14_BASE + 0x34 @ (capture/compare register 1) 
        .equ TIM14_CCR1_Shift, 0   @ bitWidth 16 (Capture/Compare 1 value)  
 

@=========================== TIM6 ===========================@
.equ TIM6_BASE, 0x40001000 @ (Basic timer) 
    .equ TIM6_CR1, TIM6_BASE + 0x0 @ (control register 1) 
        .equ TIM6_ARPE_Shift, 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM6_OPM_Shift, 3   @ bitWidth 1 (One-pulse mode)  
        .equ TIM6_URS_Shift, 2   @ bitWidth 1 (Update request source)  
        .equ TIM6_UDIS_Shift, 1   @ bitWidth 1 (Update disable)  
        .equ TIM6_CEN_Shift, 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM6_CR2, TIM6_BASE + 0x4 @ (control register 2) 
        .equ TIM6_MMS_Shift, 4   @ bitWidth 3 (Master mode selection)  
 
    .equ TIM6_DIER, TIM6_BASE + 0xC @ (DMA/Interrupt enable register) 
        .equ TIM6_UDE_Shift, 8   @ bitWidth 1 (Update DMA request enable)  
        .equ TIM6_UIE_Shift, 0   @ bitWidth 1 (Update interrupt enable)  
 
    .equ TIM6_SR, TIM6_BASE + 0x10 @ (status register) 
        .equ TIM6_UIF_Shift, 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM6_EGR, TIM6_BASE + 0x14 @ (event generation register) 
        .equ TIM6_UG_Shift, 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM6_CNT, TIM6_BASE + 0x24 @ (counter) 
        .equ TIM6_CNT_Shift, 0   @ bitWidth 16 (Low counter value)  
 
    .equ TIM6_PSC, TIM6_BASE + 0x28 @ (prescaler) 
        .equ TIM6_PSC_Shift, 0   @ bitWidth 16 (Prescaler value)  
 
    .equ TIM6_ARR, TIM6_BASE + 0x2C @ (auto-reload register) 
        .equ TIM6_ARR_Shift, 0   @ bitWidth 16 (Low Auto-reload value)  
 

@=========================== TIM7 ===========================@
.equ TIM7_BASE, 0x40001400 @ (Basic timer) 
    .equ TIM7_CR1, TIM7_BASE + 0x0 @ (control register 1) 
        .equ TIM7_ARPE_Shift, 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM7_OPM_Shift, 3   @ bitWidth 1 (One-pulse mode)  
        .equ TIM7_URS_Shift, 2   @ bitWidth 1 (Update request source)  
        .equ TIM7_UDIS_Shift, 1   @ bitWidth 1 (Update disable)  
        .equ TIM7_CEN_Shift, 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM7_CR2, TIM7_BASE + 0x4 @ (control register 2) 
        .equ TIM7_MMS_Shift, 4   @ bitWidth 3 (Master mode selection)  
 
    .equ TIM7_DIER, TIM7_BASE + 0xC @ (DMA/Interrupt enable register) 
        .equ TIM7_UDE_Shift, 8   @ bitWidth 1 (Update DMA request enable)  
        .equ TIM7_UIE_Shift, 0   @ bitWidth 1 (Update interrupt enable)  
 
    .equ TIM7_SR, TIM7_BASE + 0x10 @ (status register) 
        .equ TIM7_UIF_Shift, 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM7_EGR, TIM7_BASE + 0x14 @ (event generation register) 
        .equ TIM7_UG_Shift, 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM7_CNT, TIM7_BASE + 0x24 @ (counter) 
        .equ TIM7_CNT_Shift, 0   @ bitWidth 16 (Low counter value)  
 
    .equ TIM7_PSC, TIM7_BASE + 0x28 @ (prescaler) 
        .equ TIM7_PSC_Shift, 0   @ bitWidth 16 (Prescaler value)  
 
    .equ TIM7_ARR, TIM7_BASE + 0x2C @ (auto-reload register) 
        .equ TIM7_ARR_Shift, 0   @ bitWidth 16 (Low Auto-reload value)  
 

@=========================== I2C1 ===========================@
.equ I2C1_BASE, 0x40005400 @ (Inter integrated circuit) 
    .equ I2C1_CR1, I2C1_BASE + 0x0 @ (Control register 1) 
        .equ I2C1_SWRST_Shift, 15   @ bitWidth 1 (Software reset)  
        .equ I2C1_ALERT_Shift, 13   @ bitWidth 1 (SMBus alert)  
        .equ I2C1_PEC_Shift, 12   @ bitWidth 1 (Packet error checking)  
        .equ I2C1_POS_Shift, 11   @ bitWidth 1 (Acknowledge/PEC Position for data  reception)  
        .equ I2C1_ACK_Shift, 10   @ bitWidth 1 (Acknowledge enable)  
        .equ I2C1_STOP_Shift, 9   @ bitWidth 1 (Stop generation)  
        .equ I2C1_START_Shift, 8   @ bitWidth 1 (Start generation)  
        .equ I2C1_NOSTRETCH_Shift, 7   @ bitWidth 1 (Clock stretching disable Slave  mode)  
        .equ I2C1_ENGC_Shift, 6   @ bitWidth 1 (General call enable)  
        .equ I2C1_ENPEC_Shift, 5   @ bitWidth 1 (PEC enable)  
        .equ I2C1_ENARP_Shift, 4   @ bitWidth 1 (ARP enable)  
        .equ I2C1_SMBTYPE_Shift, 3   @ bitWidth 1 (SMBus type)  
        .equ I2C1_SMBUS_Shift, 1   @ bitWidth 1 (SMBus mode)  
        .equ I2C1_PE_Shift, 0   @ bitWidth 1 (Peripheral enable)  
 
    .equ I2C1_CR2, I2C1_BASE + 0x4 @ (Control register 2) 
        .equ I2C1_LAST_Shift, 12   @ bitWidth 1 (DMA last transfer)  
        .equ I2C1_DMAEN_Shift, 11   @ bitWidth 1 (DMA requests enable)  
        .equ I2C1_ITBUFEN_Shift, 10   @ bitWidth 1 (Buffer interrupt enable)  
        .equ I2C1_ITEVTEN_Shift, 9   @ bitWidth 1 (Event interrupt enable)  
        .equ I2C1_ITERREN_Shift, 8   @ bitWidth 1 (Error interrupt enable)  
        .equ I2C1_FREQ_Shift, 0   @ bitWidth 6 (Peripheral clock frequency)  
 
    .equ I2C1_OAR1, I2C1_BASE + 0x8 @ (Own address register 1) 
        .equ I2C1_ADDMODE_Shift, 15   @ bitWidth 1 (Addressing mode slave  mode)  
        .equ I2C1_ADD10_Shift, 8   @ bitWidth 2 (Interface address)  
        .equ I2C1_ADD7_Shift, 1   @ bitWidth 7 (Interface address)  
        .equ I2C1_ADD0_Shift, 0   @ bitWidth 1 (Interface address)  
 
    .equ I2C1_OAR2, I2C1_BASE + 0xC @ (Own address register 2) 
        .equ I2C1_ADD2_Shift, 1   @ bitWidth 7 (Interface address)  
        .equ I2C1_ENDUAL_Shift, 0   @ bitWidth 1 (Dual addressing mode  enable)  
 
    .equ I2C1_DR, I2C1_BASE + 0x10 @ (Data register) 
        .equ I2C1_DR_Shift, 0   @ bitWidth 8 (8-bit data register)  
 
    .equ I2C1_SR1, I2C1_BASE + 0x14 @ (Status register 1) 
        .equ I2C1_SMBALERT_Shift, 15   @ bitWidth 1 (SMBus alert)  
        .equ I2C1_TIMEOUT_Shift, 14   @ bitWidth 1 (Timeout or Tlow error)  
        .equ I2C1_PECERR_Shift, 12   @ bitWidth 1 (PEC Error in reception)  
        .equ I2C1_OVR_Shift, 11   @ bitWidth 1 (Overrun/Underrun)  
        .equ I2C1_AF_Shift, 10   @ bitWidth 1 (Acknowledge failure)  
        .equ I2C1_ARLO_Shift, 9   @ bitWidth 1 (Arbitration lost master  mode)  
        .equ I2C1_BERR_Shift, 8   @ bitWidth 1 (Bus error)  
        .equ I2C1_TxE_Shift, 7   @ bitWidth 1 (Data register empty  transmitters)  
        .equ I2C1_RxNE_Shift, 6   @ bitWidth 1 (Data register not empty  receivers)  
        .equ I2C1_STOPF_Shift, 4   @ bitWidth 1 (Stop detection slave  mode)  
        .equ I2C1_ADD10_Shift, 3   @ bitWidth 1 (10-bit header sent Master  mode)  
        .equ I2C1_BTF_Shift, 2   @ bitWidth 1 (Byte transfer finished)  
        .equ I2C1_ADDR_Shift, 1   @ bitWidth 1 (Address sent master mode/matched  slave mode)  
        .equ I2C1_SB_Shift, 0   @ bitWidth 1 (Start bit Master mode)  
 
    .equ I2C1_SR2, I2C1_BASE + 0x18 @ (Status register 2) 
        .equ I2C1_PEC_Shift, 8   @ bitWidth 8 (acket error checking  register)  
        .equ I2C1_DUALF_Shift, 7   @ bitWidth 1 (Dual flag Slave mode)  
        .equ I2C1_SMBHOST_Shift, 6   @ bitWidth 1 (SMBus host header Slave  mode)  
        .equ I2C1_SMBDEFAULT_Shift, 5   @ bitWidth 1 (SMBus device default address Slave  mode)  
        .equ I2C1_GENCALL_Shift, 4   @ bitWidth 1 (General call address Slave  mode)  
        .equ I2C1_TRA_Shift, 2   @ bitWidth 1 (Transmitter/receiver)  
        .equ I2C1_BUSY_Shift, 1   @ bitWidth 1 (Bus busy)  
        .equ I2C1_MSL_Shift, 0   @ bitWidth 1 (Master/slave)  
 
    .equ I2C1_CCR, I2C1_BASE + 0x1C @ (Clock control register) 
        .equ I2C1_F_S_Shift, 15   @ bitWidth 1 (I2C master mode selection)  
        .equ I2C1_DUTY_Shift, 14   @ bitWidth 1 (Fast mode duty cycle)  
        .equ I2C1_CCR_Shift, 0   @ bitWidth 12 (Clock control register in Fast/Standard  mode Master mode)  
 
    .equ I2C1_TRISE, I2C1_BASE + 0x20 @ (TRISE register) 
        .equ I2C1_TRISE_Shift, 0   @ bitWidth 6 (Maximum rise time in Fast/Standard mode  Master mode)  
 

@=========================== I2C2 ===========================@
.equ I2C2_BASE, 0x40005800 @ (Inter integrated circuit) 
    .equ I2C2_CR1, I2C2_BASE + 0x0 @ (Control register 1) 
        .equ I2C2_SWRST_Shift, 15   @ bitWidth 1 (Software reset)  
        .equ I2C2_ALERT_Shift, 13   @ bitWidth 1 (SMBus alert)  
        .equ I2C2_PEC_Shift, 12   @ bitWidth 1 (Packet error checking)  
        .equ I2C2_POS_Shift, 11   @ bitWidth 1 (Acknowledge/PEC Position for data  reception)  
        .equ I2C2_ACK_Shift, 10   @ bitWidth 1 (Acknowledge enable)  
        .equ I2C2_STOP_Shift, 9   @ bitWidth 1 (Stop generation)  
        .equ I2C2_START_Shift, 8   @ bitWidth 1 (Start generation)  
        .equ I2C2_NOSTRETCH_Shift, 7   @ bitWidth 1 (Clock stretching disable Slave  mode)  
        .equ I2C2_ENGC_Shift, 6   @ bitWidth 1 (General call enable)  
        .equ I2C2_ENPEC_Shift, 5   @ bitWidth 1 (PEC enable)  
        .equ I2C2_ENARP_Shift, 4   @ bitWidth 1 (ARP enable)  
        .equ I2C2_SMBTYPE_Shift, 3   @ bitWidth 1 (SMBus type)  
        .equ I2C2_SMBUS_Shift, 1   @ bitWidth 1 (SMBus mode)  
        .equ I2C2_PE_Shift, 0   @ bitWidth 1 (Peripheral enable)  
 
    .equ I2C2_CR2, I2C2_BASE + 0x4 @ (Control register 2) 
        .equ I2C2_LAST_Shift, 12   @ bitWidth 1 (DMA last transfer)  
        .equ I2C2_DMAEN_Shift, 11   @ bitWidth 1 (DMA requests enable)  
        .equ I2C2_ITBUFEN_Shift, 10   @ bitWidth 1 (Buffer interrupt enable)  
        .equ I2C2_ITEVTEN_Shift, 9   @ bitWidth 1 (Event interrupt enable)  
        .equ I2C2_ITERREN_Shift, 8   @ bitWidth 1 (Error interrupt enable)  
        .equ I2C2_FREQ_Shift, 0   @ bitWidth 6 (Peripheral clock frequency)  
 
    .equ I2C2_OAR1, I2C2_BASE + 0x8 @ (Own address register 1) 
        .equ I2C2_ADDMODE_Shift, 15   @ bitWidth 1 (Addressing mode slave  mode)  
        .equ I2C2_ADD10_Shift, 8   @ bitWidth 2 (Interface address)  
        .equ I2C2_ADD7_Shift, 1   @ bitWidth 7 (Interface address)  
        .equ I2C2_ADD0_Shift, 0   @ bitWidth 1 (Interface address)  
 
    .equ I2C2_OAR2, I2C2_BASE + 0xC @ (Own address register 2) 
        .equ I2C2_ADD2_Shift, 1   @ bitWidth 7 (Interface address)  
        .equ I2C2_ENDUAL_Shift, 0   @ bitWidth 1 (Dual addressing mode  enable)  
 
    .equ I2C2_DR, I2C2_BASE + 0x10 @ (Data register) 
        .equ I2C2_DR_Shift, 0   @ bitWidth 8 (8-bit data register)  
 
    .equ I2C2_SR1, I2C2_BASE + 0x14 @ (Status register 1) 
        .equ I2C2_SMBALERT_Shift, 15   @ bitWidth 1 (SMBus alert)  
        .equ I2C2_TIMEOUT_Shift, 14   @ bitWidth 1 (Timeout or Tlow error)  
        .equ I2C2_PECERR_Shift, 12   @ bitWidth 1 (PEC Error in reception)  
        .equ I2C2_OVR_Shift, 11   @ bitWidth 1 (Overrun/Underrun)  
        .equ I2C2_AF_Shift, 10   @ bitWidth 1 (Acknowledge failure)  
        .equ I2C2_ARLO_Shift, 9   @ bitWidth 1 (Arbitration lost master  mode)  
        .equ I2C2_BERR_Shift, 8   @ bitWidth 1 (Bus error)  
        .equ I2C2_TxE_Shift, 7   @ bitWidth 1 (Data register empty  transmitters)  
        .equ I2C2_RxNE_Shift, 6   @ bitWidth 1 (Data register not empty  receivers)  
        .equ I2C2_STOPF_Shift, 4   @ bitWidth 1 (Stop detection slave  mode)  
        .equ I2C2_ADD10_Shift, 3   @ bitWidth 1 (10-bit header sent Master  mode)  
        .equ I2C2_BTF_Shift, 2   @ bitWidth 1 (Byte transfer finished)  
        .equ I2C2_ADDR_Shift, 1   @ bitWidth 1 (Address sent master mode/matched  slave mode)  
        .equ I2C2_SB_Shift, 0   @ bitWidth 1 (Start bit Master mode)  
 
    .equ I2C2_SR2, I2C2_BASE + 0x18 @ (Status register 2) 
        .equ I2C2_PEC_Shift, 8   @ bitWidth 8 (acket error checking  register)  
        .equ I2C2_DUALF_Shift, 7   @ bitWidth 1 (Dual flag Slave mode)  
        .equ I2C2_SMBHOST_Shift, 6   @ bitWidth 1 (SMBus host header Slave  mode)  
        .equ I2C2_SMBDEFAULT_Shift, 5   @ bitWidth 1 (SMBus device default address Slave  mode)  
        .equ I2C2_GENCALL_Shift, 4   @ bitWidth 1 (General call address Slave  mode)  
        .equ I2C2_TRA_Shift, 2   @ bitWidth 1 (Transmitter/receiver)  
        .equ I2C2_BUSY_Shift, 1   @ bitWidth 1 (Bus busy)  
        .equ I2C2_MSL_Shift, 0   @ bitWidth 1 (Master/slave)  
 
    .equ I2C2_CCR, I2C2_BASE + 0x1C @ (Clock control register) 
        .equ I2C2_F_S_Shift, 15   @ bitWidth 1 (I2C master mode selection)  
        .equ I2C2_DUTY_Shift, 14   @ bitWidth 1 (Fast mode duty cycle)  
        .equ I2C2_CCR_Shift, 0   @ bitWidth 12 (Clock control register in Fast/Standard  mode Master mode)  
 
    .equ I2C2_TRISE, I2C2_BASE + 0x20 @ (TRISE register) 
        .equ I2C2_TRISE_Shift, 0   @ bitWidth 6 (Maximum rise time in Fast/Standard mode  Master mode)  
 

@=========================== SPI1 ===========================@
.equ SPI1_BASE, 0x40013000 @ (Serial peripheral interface) 
    .equ SPI1_CR1, SPI1_BASE + 0x0 @ (control register 1) 
        .equ SPI1_BIDIMODE_Shift, 15   @ bitWidth 1 (Bidirectional data mode  enable)  
        .equ SPI1_BIDIOE_Shift, 14   @ bitWidth 1 (Output enable in bidirectional  mode)  
        .equ SPI1_CRCEN_Shift, 13   @ bitWidth 1 (Hardware CRC calculation  enable)  
        .equ SPI1_CRCNEXT_Shift, 12   @ bitWidth 1 (CRC transfer next)  
        .equ SPI1_DFF_Shift, 11   @ bitWidth 1 (Data frame format)  
        .equ SPI1_RXONLY_Shift, 10   @ bitWidth 1 (Receive only)  
        .equ SPI1_SSM_Shift, 9   @ bitWidth 1 (Software slave management)  
        .equ SPI1_SSI_Shift, 8   @ bitWidth 1 (Internal slave select)  
        .equ SPI1_LSBFIRST_Shift, 7   @ bitWidth 1 (Frame format)  
        .equ SPI1_SPE_Shift, 6   @ bitWidth 1 (SPI enable)  
        .equ SPI1_BR_Shift, 3   @ bitWidth 3 (Baud rate control)  
        .equ SPI1_MSTR_Shift, 2   @ bitWidth 1 (Master selection)  
        .equ SPI1_CPOL_Shift, 1   @ bitWidth 1 (Clock polarity)  
        .equ SPI1_CPHA_Shift, 0   @ bitWidth 1 (Clock phase)  
 
    .equ SPI1_CR2, SPI1_BASE + 0x4 @ (control register 2) 
        .equ SPI1_TXEIE_Shift, 7   @ bitWidth 1 (Tx buffer empty interrupt  enable)  
        .equ SPI1_RXNEIE_Shift, 6   @ bitWidth 1 (RX buffer not empty interrupt  enable)  
        .equ SPI1_ERRIE_Shift, 5   @ bitWidth 1 (Error interrupt enable)  
        .equ SPI1_SSOE_Shift, 2   @ bitWidth 1 (SS output enable)  
        .equ SPI1_TXDMAEN_Shift, 1   @ bitWidth 1 (Tx buffer DMA enable)  
        .equ SPI1_RXDMAEN_Shift, 0   @ bitWidth 1 (Rx buffer DMA enable)  
 
    .equ SPI1_SR, SPI1_BASE + 0x8 @ (status register) 
        .equ SPI1_BSY_Shift, 7   @ bitWidth 1 (Busy flag)  
        .equ SPI1_OVR_Shift, 6   @ bitWidth 1 (Overrun flag)  
        .equ SPI1_MODF_Shift, 5   @ bitWidth 1 (Mode fault)  
        .equ SPI1_CRCERR_Shift, 4   @ bitWidth 1 (CRC error flag)  
        .equ SPI1_UDR_Shift, 3   @ bitWidth 1 (Underrun flag)  
        .equ SPI1_CHSIDE_Shift, 2   @ bitWidth 1 (Channel side)  
        .equ SPI1_TXE_Shift, 1   @ bitWidth 1 (Transmit buffer empty)  
        .equ SPI1_RXNE_Shift, 0   @ bitWidth 1 (Receive buffer not empty)  
 
    .equ SPI1_DR, SPI1_BASE + 0xC @ (data register) 
        .equ SPI1_DR_Shift, 0   @ bitWidth 16 (Data register)  
 
    .equ SPI1_CRCPR, SPI1_BASE + 0x10 @ (CRC polynomial register) 
        .equ SPI1_CRCPOLY_Shift, 0   @ bitWidth 16 (CRC polynomial register)  
 
    .equ SPI1_RXCRCR, SPI1_BASE + 0x14 @ (RX CRC register) 
        .equ SPI1_RxCRC_Shift, 0   @ bitWidth 16 (Rx CRC register)  
 
    .equ SPI1_TXCRCR, SPI1_BASE + 0x18 @ (TX CRC register) 
        .equ SPI1_TxCRC_Shift, 0   @ bitWidth 16 (Tx CRC register)  
 
    .equ SPI1_I2SCFGR, SPI1_BASE + 0x1C @ (I2S configuration register) 
        .equ SPI1_I2SMOD_Shift, 11   @ bitWidth 1 (I2S mode selection)  
        .equ SPI1_I2SE_Shift, 10   @ bitWidth 1 (I2S Enable)  
        .equ SPI1_I2SCFG_Shift, 8   @ bitWidth 2 (I2S configuration mode)  
        .equ SPI1_PCMSYNC_Shift, 7   @ bitWidth 1 (PCM frame synchronization)  
        .equ SPI1_I2SSTD_Shift, 4   @ bitWidth 2 (I2S standard selection)  
        .equ SPI1_CKPOL_Shift, 3   @ bitWidth 1 (Steady state clock  polarity)  
        .equ SPI1_DATLEN_Shift, 1   @ bitWidth 2 (Data length to be  transferred)  
        .equ SPI1_CHLEN_Shift, 0   @ bitWidth 1 (Channel length number of bits per audio  channel)  
 
    .equ SPI1_I2SPR, SPI1_BASE + 0x20 @ (I2S prescaler register) 
        .equ SPI1_MCKOE_Shift, 9   @ bitWidth 1 (Master clock output enable)  
        .equ SPI1_ODD_Shift, 8   @ bitWidth 1 (Odd factor for the  prescaler)  
        .equ SPI1_I2SDIV_Shift, 0   @ bitWidth 8 (I2S Linear prescaler)  
 

@=========================== SPI2 ===========================@
.equ SPI2_BASE, 0x40003800 @ (Serial peripheral interface) 
    .equ SPI2_CR1, SPI2_BASE + 0x0 @ (control register 1) 
        .equ SPI2_BIDIMODE_Shift, 15   @ bitWidth 1 (Bidirectional data mode  enable)  
        .equ SPI2_BIDIOE_Shift, 14   @ bitWidth 1 (Output enable in bidirectional  mode)  
        .equ SPI2_CRCEN_Shift, 13   @ bitWidth 1 (Hardware CRC calculation  enable)  
        .equ SPI2_CRCNEXT_Shift, 12   @ bitWidth 1 (CRC transfer next)  
        .equ SPI2_DFF_Shift, 11   @ bitWidth 1 (Data frame format)  
        .equ SPI2_RXONLY_Shift, 10   @ bitWidth 1 (Receive only)  
        .equ SPI2_SSM_Shift, 9   @ bitWidth 1 (Software slave management)  
        .equ SPI2_SSI_Shift, 8   @ bitWidth 1 (Internal slave select)  
        .equ SPI2_LSBFIRST_Shift, 7   @ bitWidth 1 (Frame format)  
        .equ SPI2_SPE_Shift, 6   @ bitWidth 1 (SPI enable)  
        .equ SPI2_BR_Shift, 3   @ bitWidth 3 (Baud rate control)  
        .equ SPI2_MSTR_Shift, 2   @ bitWidth 1 (Master selection)  
        .equ SPI2_CPOL_Shift, 1   @ bitWidth 1 (Clock polarity)  
        .equ SPI2_CPHA_Shift, 0   @ bitWidth 1 (Clock phase)  
 
    .equ SPI2_CR2, SPI2_BASE + 0x4 @ (control register 2) 
        .equ SPI2_TXEIE_Shift, 7   @ bitWidth 1 (Tx buffer empty interrupt  enable)  
        .equ SPI2_RXNEIE_Shift, 6   @ bitWidth 1 (RX buffer not empty interrupt  enable)  
        .equ SPI2_ERRIE_Shift, 5   @ bitWidth 1 (Error interrupt enable)  
        .equ SPI2_SSOE_Shift, 2   @ bitWidth 1 (SS output enable)  
        .equ SPI2_TXDMAEN_Shift, 1   @ bitWidth 1 (Tx buffer DMA enable)  
        .equ SPI2_RXDMAEN_Shift, 0   @ bitWidth 1 (Rx buffer DMA enable)  
 
    .equ SPI2_SR, SPI2_BASE + 0x8 @ (status register) 
        .equ SPI2_BSY_Shift, 7   @ bitWidth 1 (Busy flag)  
        .equ SPI2_OVR_Shift, 6   @ bitWidth 1 (Overrun flag)  
        .equ SPI2_MODF_Shift, 5   @ bitWidth 1 (Mode fault)  
        .equ SPI2_CRCERR_Shift, 4   @ bitWidth 1 (CRC error flag)  
        .equ SPI2_UDR_Shift, 3   @ bitWidth 1 (Underrun flag)  
        .equ SPI2_CHSIDE_Shift, 2   @ bitWidth 1 (Channel side)  
        .equ SPI2_TXE_Shift, 1   @ bitWidth 1 (Transmit buffer empty)  
        .equ SPI2_RXNE_Shift, 0   @ bitWidth 1 (Receive buffer not empty)  
 
    .equ SPI2_DR, SPI2_BASE + 0xC @ (data register) 
        .equ SPI2_DR_Shift, 0   @ bitWidth 16 (Data register)  
 
    .equ SPI2_CRCPR, SPI2_BASE + 0x10 @ (CRC polynomial register) 
        .equ SPI2_CRCPOLY_Shift, 0   @ bitWidth 16 (CRC polynomial register)  
 
    .equ SPI2_RXCRCR, SPI2_BASE + 0x14 @ (RX CRC register) 
        .equ SPI2_RxCRC_Shift, 0   @ bitWidth 16 (Rx CRC register)  
 
    .equ SPI2_TXCRCR, SPI2_BASE + 0x18 @ (TX CRC register) 
        .equ SPI2_TxCRC_Shift, 0   @ bitWidth 16 (Tx CRC register)  
 
    .equ SPI2_I2SCFGR, SPI2_BASE + 0x1C @ (I2S configuration register) 
        .equ SPI2_I2SMOD_Shift, 11   @ bitWidth 1 (I2S mode selection)  
        .equ SPI2_I2SE_Shift, 10   @ bitWidth 1 (I2S Enable)  
        .equ SPI2_I2SCFG_Shift, 8   @ bitWidth 2 (I2S configuration mode)  
        .equ SPI2_PCMSYNC_Shift, 7   @ bitWidth 1 (PCM frame synchronization)  
        .equ SPI2_I2SSTD_Shift, 4   @ bitWidth 2 (I2S standard selection)  
        .equ SPI2_CKPOL_Shift, 3   @ bitWidth 1 (Steady state clock  polarity)  
        .equ SPI2_DATLEN_Shift, 1   @ bitWidth 2 (Data length to be  transferred)  
        .equ SPI2_CHLEN_Shift, 0   @ bitWidth 1 (Channel length number of bits per audio  channel)  
 
    .equ SPI2_I2SPR, SPI2_BASE + 0x20 @ (I2S prescaler register) 
        .equ SPI2_MCKOE_Shift, 9   @ bitWidth 1 (Master clock output enable)  
        .equ SPI2_ODD_Shift, 8   @ bitWidth 1 (Odd factor for the  prescaler)  
        .equ SPI2_I2SDIV_Shift, 0   @ bitWidth 8 (I2S Linear prescaler)  
 

@=========================== SPI3 ===========================@
.equ SPI3_BASE, 0x40003C00 @ (Serial peripheral interface) 
    .equ SPI3_CR1, SPI3_BASE + 0x0 @ (control register 1) 
        .equ SPI3_BIDIMODE_Shift, 15   @ bitWidth 1 (Bidirectional data mode  enable)  
        .equ SPI3_BIDIOE_Shift, 14   @ bitWidth 1 (Output enable in bidirectional  mode)  
        .equ SPI3_CRCEN_Shift, 13   @ bitWidth 1 (Hardware CRC calculation  enable)  
        .equ SPI3_CRCNEXT_Shift, 12   @ bitWidth 1 (CRC transfer next)  
        .equ SPI3_DFF_Shift, 11   @ bitWidth 1 (Data frame format)  
        .equ SPI3_RXONLY_Shift, 10   @ bitWidth 1 (Receive only)  
        .equ SPI3_SSM_Shift, 9   @ bitWidth 1 (Software slave management)  
        .equ SPI3_SSI_Shift, 8   @ bitWidth 1 (Internal slave select)  
        .equ SPI3_LSBFIRST_Shift, 7   @ bitWidth 1 (Frame format)  
        .equ SPI3_SPE_Shift, 6   @ bitWidth 1 (SPI enable)  
        .equ SPI3_BR_Shift, 3   @ bitWidth 3 (Baud rate control)  
        .equ SPI3_MSTR_Shift, 2   @ bitWidth 1 (Master selection)  
        .equ SPI3_CPOL_Shift, 1   @ bitWidth 1 (Clock polarity)  
        .equ SPI3_CPHA_Shift, 0   @ bitWidth 1 (Clock phase)  
 
    .equ SPI3_CR2, SPI3_BASE + 0x4 @ (control register 2) 
        .equ SPI3_TXEIE_Shift, 7   @ bitWidth 1 (Tx buffer empty interrupt  enable)  
        .equ SPI3_RXNEIE_Shift, 6   @ bitWidth 1 (RX buffer not empty interrupt  enable)  
        .equ SPI3_ERRIE_Shift, 5   @ bitWidth 1 (Error interrupt enable)  
        .equ SPI3_SSOE_Shift, 2   @ bitWidth 1 (SS output enable)  
        .equ SPI3_TXDMAEN_Shift, 1   @ bitWidth 1 (Tx buffer DMA enable)  
        .equ SPI3_RXDMAEN_Shift, 0   @ bitWidth 1 (Rx buffer DMA enable)  
 
    .equ SPI3_SR, SPI3_BASE + 0x8 @ (status register) 
        .equ SPI3_BSY_Shift, 7   @ bitWidth 1 (Busy flag)  
        .equ SPI3_OVR_Shift, 6   @ bitWidth 1 (Overrun flag)  
        .equ SPI3_MODF_Shift, 5   @ bitWidth 1 (Mode fault)  
        .equ SPI3_CRCERR_Shift, 4   @ bitWidth 1 (CRC error flag)  
        .equ SPI3_UDR_Shift, 3   @ bitWidth 1 (Underrun flag)  
        .equ SPI3_CHSIDE_Shift, 2   @ bitWidth 1 (Channel side)  
        .equ SPI3_TXE_Shift, 1   @ bitWidth 1 (Transmit buffer empty)  
        .equ SPI3_RXNE_Shift, 0   @ bitWidth 1 (Receive buffer not empty)  
 
    .equ SPI3_DR, SPI3_BASE + 0xC @ (data register) 
        .equ SPI3_DR_Shift, 0   @ bitWidth 16 (Data register)  
 
    .equ SPI3_CRCPR, SPI3_BASE + 0x10 @ (CRC polynomial register) 
        .equ SPI3_CRCPOLY_Shift, 0   @ bitWidth 16 (CRC polynomial register)  
 
    .equ SPI3_RXCRCR, SPI3_BASE + 0x14 @ (RX CRC register) 
        .equ SPI3_RxCRC_Shift, 0   @ bitWidth 16 (Rx CRC register)  
 
    .equ SPI3_TXCRCR, SPI3_BASE + 0x18 @ (TX CRC register) 
        .equ SPI3_TxCRC_Shift, 0   @ bitWidth 16 (Tx CRC register)  
 
    .equ SPI3_I2SCFGR, SPI3_BASE + 0x1C @ (I2S configuration register) 
        .equ SPI3_I2SMOD_Shift, 11   @ bitWidth 1 (I2S mode selection)  
        .equ SPI3_I2SE_Shift, 10   @ bitWidth 1 (I2S Enable)  
        .equ SPI3_I2SCFG_Shift, 8   @ bitWidth 2 (I2S configuration mode)  
        .equ SPI3_PCMSYNC_Shift, 7   @ bitWidth 1 (PCM frame synchronization)  
        .equ SPI3_I2SSTD_Shift, 4   @ bitWidth 2 (I2S standard selection)  
        .equ SPI3_CKPOL_Shift, 3   @ bitWidth 1 (Steady state clock  polarity)  
        .equ SPI3_DATLEN_Shift, 1   @ bitWidth 2 (Data length to be  transferred)  
        .equ SPI3_CHLEN_Shift, 0   @ bitWidth 1 (Channel length number of bits per audio  channel)  
 
    .equ SPI3_I2SPR, SPI3_BASE + 0x20 @ (I2S prescaler register) 
        .equ SPI3_MCKOE_Shift, 9   @ bitWidth 1 (Master clock output enable)  
        .equ SPI3_ODD_Shift, 8   @ bitWidth 1 (Odd factor for the  prescaler)  
        .equ SPI3_I2SDIV_Shift, 0   @ bitWidth 8 (I2S Linear prescaler)  
 

@=========================== USART1 ===========================@
.equ USART1_BASE, 0x40013800 @ (Universal synchronous asynchronous receiver  transmitter) 
    .equ USART1_SR, USART1_BASE + 0x0 @ (Status register) 
        .equ USART1_CTS_Shift, 9   @ bitWidth 1 (CTS flag)  
        .equ USART1_LBD_Shift, 8   @ bitWidth 1 (LIN break detection flag)  
        .equ USART1_TXE_Shift, 7   @ bitWidth 1 (Transmit data register  empty)  
        .equ USART1_TC_Shift, 6   @ bitWidth 1 (Transmission complete)  
        .equ USART1_RXNE_Shift, 5   @ bitWidth 1 (Read data register not  empty)  
        .equ USART1_IDLE_Shift, 4   @ bitWidth 1 (IDLE line detected)  
        .equ USART1_ORE_Shift, 3   @ bitWidth 1 (Overrun error)  
        .equ USART1_NE_Shift, 2   @ bitWidth 1 (Noise error flag)  
        .equ USART1_FE_Shift, 1   @ bitWidth 1 (Framing error)  
        .equ USART1_PE_Shift, 0   @ bitWidth 1 (Parity error)  
 
    .equ USART1_DR, USART1_BASE + 0x4 @ (Data register) 
        .equ USART1_DR_Shift, 0   @ bitWidth 9 (Data value)  
 
    .equ USART1_BRR, USART1_BASE + 0x8 @ (Baud rate register) 
        .equ USART1_DIV_Mantissa_Shift, 4   @ bitWidth 12 (mantissa of USARTDIV)  
        .equ USART1_DIV_Fraction_Shift, 0   @ bitWidth 4 (fraction of USARTDIV)  
 
    .equ USART1_CR1, USART1_BASE + 0xC @ (Control register 1) 
        .equ USART1_UE_Shift, 13   @ bitWidth 1 (USART enable)  
        .equ USART1_M_Shift, 12   @ bitWidth 1 (Word length)  
        .equ USART1_WAKE_Shift, 11   @ bitWidth 1 (Wakeup method)  
        .equ USART1_PCE_Shift, 10   @ bitWidth 1 (Parity control enable)  
        .equ USART1_PS_Shift, 9   @ bitWidth 1 (Parity selection)  
        .equ USART1_PEIE_Shift, 8   @ bitWidth 1 (PE interrupt enable)  
        .equ USART1_TXEIE_Shift, 7   @ bitWidth 1 (TXE interrupt enable)  
        .equ USART1_TCIE_Shift, 6   @ bitWidth 1 (Transmission complete interrupt  enable)  
        .equ USART1_RXNEIE_Shift, 5   @ bitWidth 1 (RXNE interrupt enable)  
        .equ USART1_IDLEIE_Shift, 4   @ bitWidth 1 (IDLE interrupt enable)  
        .equ USART1_TE_Shift, 3   @ bitWidth 1 (Transmitter enable)  
        .equ USART1_RE_Shift, 2   @ bitWidth 1 (Receiver enable)  
        .equ USART1_RWU_Shift, 1   @ bitWidth 1 (Receiver wakeup)  
        .equ USART1_SBK_Shift, 0   @ bitWidth 1 (Send break)  
 
    .equ USART1_CR2, USART1_BASE + 0x10 @ (Control register 2) 
        .equ USART1_LINEN_Shift, 14   @ bitWidth 1 (LIN mode enable)  
        .equ USART1_STOP_Shift, 12   @ bitWidth 2 (STOP bits)  
        .equ USART1_CLKEN_Shift, 11   @ bitWidth 1 (Clock enable)  
        .equ USART1_CPOL_Shift, 10   @ bitWidth 1 (Clock polarity)  
        .equ USART1_CPHA_Shift, 9   @ bitWidth 1 (Clock phase)  
        .equ USART1_LBCL_Shift, 8   @ bitWidth 1 (Last bit clock pulse)  
        .equ USART1_LBDIE_Shift, 6   @ bitWidth 1 (LIN break detection interrupt  enable)  
        .equ USART1_LBDL_Shift, 5   @ bitWidth 1 (lin break detection length)  
        .equ USART1_ADD_Shift, 0   @ bitWidth 4 (Address of the USART node)  
 
    .equ USART1_CR3, USART1_BASE + 0x14 @ (Control register 3) 
        .equ USART1_CTSIE_Shift, 10   @ bitWidth 1 (CTS interrupt enable)  
        .equ USART1_CTSE_Shift, 9   @ bitWidth 1 (CTS enable)  
        .equ USART1_RTSE_Shift, 8   @ bitWidth 1 (RTS enable)  
        .equ USART1_DMAT_Shift, 7   @ bitWidth 1 (DMA enable transmitter)  
        .equ USART1_DMAR_Shift, 6   @ bitWidth 1 (DMA enable receiver)  
        .equ USART1_SCEN_Shift, 5   @ bitWidth 1 (Smartcard mode enable)  
        .equ USART1_NACK_Shift, 4   @ bitWidth 1 (Smartcard NACK enable)  
        .equ USART1_HDSEL_Shift, 3   @ bitWidth 1 (Half-duplex selection)  
        .equ USART1_IRLP_Shift, 2   @ bitWidth 1 (IrDA low-power)  
        .equ USART1_IREN_Shift, 1   @ bitWidth 1 (IrDA mode enable)  
        .equ USART1_EIE_Shift, 0   @ bitWidth 1 (Error interrupt enable)  
 
    .equ USART1_GTPR, USART1_BASE + 0x18 @ (Guard time and prescaler  register) 
        .equ USART1_GT_Shift, 8   @ bitWidth 8 (Guard time value)  
        .equ USART1_PSC_Shift, 0   @ bitWidth 8 (Prescaler value)  
 

@=========================== USART2 ===========================@
.equ USART2_BASE, 0x40004400 @ (Universal synchronous asynchronous receiver  transmitter) 
    .equ USART2_SR, USART2_BASE + 0x0 @ (Status register) 
        .equ USART2_CTS_Shift, 9   @ bitWidth 1 (CTS flag)  
        .equ USART2_LBD_Shift, 8   @ bitWidth 1 (LIN break detection flag)  
        .equ USART2_TXE_Shift, 7   @ bitWidth 1 (Transmit data register  empty)  
        .equ USART2_TC_Shift, 6   @ bitWidth 1 (Transmission complete)  
        .equ USART2_RXNE_Shift, 5   @ bitWidth 1 (Read data register not  empty)  
        .equ USART2_IDLE_Shift, 4   @ bitWidth 1 (IDLE line detected)  
        .equ USART2_ORE_Shift, 3   @ bitWidth 1 (Overrun error)  
        .equ USART2_NE_Shift, 2   @ bitWidth 1 (Noise error flag)  
        .equ USART2_FE_Shift, 1   @ bitWidth 1 (Framing error)  
        .equ USART2_PE_Shift, 0   @ bitWidth 1 (Parity error)  
 
    .equ USART2_DR, USART2_BASE + 0x4 @ (Data register) 
        .equ USART2_DR_Shift, 0   @ bitWidth 9 (Data value)  
 
    .equ USART2_BRR, USART2_BASE + 0x8 @ (Baud rate register) 
        .equ USART2_DIV_Mantissa_Shift, 4   @ bitWidth 12 (mantissa of USARTDIV)  
        .equ USART2_DIV_Fraction_Shift, 0   @ bitWidth 4 (fraction of USARTDIV)  
 
    .equ USART2_CR1, USART2_BASE + 0xC @ (Control register 1) 
        .equ USART2_UE_Shift, 13   @ bitWidth 1 (USART enable)  
        .equ USART2_M_Shift, 12   @ bitWidth 1 (Word length)  
        .equ USART2_WAKE_Shift, 11   @ bitWidth 1 (Wakeup method)  
        .equ USART2_PCE_Shift, 10   @ bitWidth 1 (Parity control enable)  
        .equ USART2_PS_Shift, 9   @ bitWidth 1 (Parity selection)  
        .equ USART2_PEIE_Shift, 8   @ bitWidth 1 (PE interrupt enable)  
        .equ USART2_TXEIE_Shift, 7   @ bitWidth 1 (TXE interrupt enable)  
        .equ USART2_TCIE_Shift, 6   @ bitWidth 1 (Transmission complete interrupt  enable)  
        .equ USART2_RXNEIE_Shift, 5   @ bitWidth 1 (RXNE interrupt enable)  
        .equ USART2_IDLEIE_Shift, 4   @ bitWidth 1 (IDLE interrupt enable)  
        .equ USART2_TE_Shift, 3   @ bitWidth 1 (Transmitter enable)  
        .equ USART2_RE_Shift, 2   @ bitWidth 1 (Receiver enable)  
        .equ USART2_RWU_Shift, 1   @ bitWidth 1 (Receiver wakeup)  
        .equ USART2_SBK_Shift, 0   @ bitWidth 1 (Send break)  
 
    .equ USART2_CR2, USART2_BASE + 0x10 @ (Control register 2) 
        .equ USART2_LINEN_Shift, 14   @ bitWidth 1 (LIN mode enable)  
        .equ USART2_STOP_Shift, 12   @ bitWidth 2 (STOP bits)  
        .equ USART2_CLKEN_Shift, 11   @ bitWidth 1 (Clock enable)  
        .equ USART2_CPOL_Shift, 10   @ bitWidth 1 (Clock polarity)  
        .equ USART2_CPHA_Shift, 9   @ bitWidth 1 (Clock phase)  
        .equ USART2_LBCL_Shift, 8   @ bitWidth 1 (Last bit clock pulse)  
        .equ USART2_LBDIE_Shift, 6   @ bitWidth 1 (LIN break detection interrupt  enable)  
        .equ USART2_LBDL_Shift, 5   @ bitWidth 1 (lin break detection length)  
        .equ USART2_ADD_Shift, 0   @ bitWidth 4 (Address of the USART node)  
 
    .equ USART2_CR3, USART2_BASE + 0x14 @ (Control register 3) 
        .equ USART2_CTSIE_Shift, 10   @ bitWidth 1 (CTS interrupt enable)  
        .equ USART2_CTSE_Shift, 9   @ bitWidth 1 (CTS enable)  
        .equ USART2_RTSE_Shift, 8   @ bitWidth 1 (RTS enable)  
        .equ USART2_DMAT_Shift, 7   @ bitWidth 1 (DMA enable transmitter)  
        .equ USART2_DMAR_Shift, 6   @ bitWidth 1 (DMA enable receiver)  
        .equ USART2_SCEN_Shift, 5   @ bitWidth 1 (Smartcard mode enable)  
        .equ USART2_NACK_Shift, 4   @ bitWidth 1 (Smartcard NACK enable)  
        .equ USART2_HDSEL_Shift, 3   @ bitWidth 1 (Half-duplex selection)  
        .equ USART2_IRLP_Shift, 2   @ bitWidth 1 (IrDA low-power)  
        .equ USART2_IREN_Shift, 1   @ bitWidth 1 (IrDA mode enable)  
        .equ USART2_EIE_Shift, 0   @ bitWidth 1 (Error interrupt enable)  
 
    .equ USART2_GTPR, USART2_BASE + 0x18 @ (Guard time and prescaler  register) 
        .equ USART2_GT_Shift, 8   @ bitWidth 8 (Guard time value)  
        .equ USART2_PSC_Shift, 0   @ bitWidth 8 (Prescaler value)  
 

@=========================== USART3 ===========================@
.equ USART3_BASE, 0x40004800 @ (Universal synchronous asynchronous receiver  transmitter) 
    .equ USART3_SR, USART3_BASE + 0x0 @ (Status register) 
        .equ USART3_CTS_Shift, 9   @ bitWidth 1 (CTS flag)  
        .equ USART3_LBD_Shift, 8   @ bitWidth 1 (LIN break detection flag)  
        .equ USART3_TXE_Shift, 7   @ bitWidth 1 (Transmit data register  empty)  
        .equ USART3_TC_Shift, 6   @ bitWidth 1 (Transmission complete)  
        .equ USART3_RXNE_Shift, 5   @ bitWidth 1 (Read data register not  empty)  
        .equ USART3_IDLE_Shift, 4   @ bitWidth 1 (IDLE line detected)  
        .equ USART3_ORE_Shift, 3   @ bitWidth 1 (Overrun error)  
        .equ USART3_NE_Shift, 2   @ bitWidth 1 (Noise error flag)  
        .equ USART3_FE_Shift, 1   @ bitWidth 1 (Framing error)  
        .equ USART3_PE_Shift, 0   @ bitWidth 1 (Parity error)  
 
    .equ USART3_DR, USART3_BASE + 0x4 @ (Data register) 
        .equ USART3_DR_Shift, 0   @ bitWidth 9 (Data value)  
 
    .equ USART3_BRR, USART3_BASE + 0x8 @ (Baud rate register) 
        .equ USART3_DIV_Mantissa_Shift, 4   @ bitWidth 12 (mantissa of USARTDIV)  
        .equ USART3_DIV_Fraction_Shift, 0   @ bitWidth 4 (fraction of USARTDIV)  
 
    .equ USART3_CR1, USART3_BASE + 0xC @ (Control register 1) 
        .equ USART3_UE_Shift, 13   @ bitWidth 1 (USART enable)  
        .equ USART3_M_Shift, 12   @ bitWidth 1 (Word length)  
        .equ USART3_WAKE_Shift, 11   @ bitWidth 1 (Wakeup method)  
        .equ USART3_PCE_Shift, 10   @ bitWidth 1 (Parity control enable)  
        .equ USART3_PS_Shift, 9   @ bitWidth 1 (Parity selection)  
        .equ USART3_PEIE_Shift, 8   @ bitWidth 1 (PE interrupt enable)  
        .equ USART3_TXEIE_Shift, 7   @ bitWidth 1 (TXE interrupt enable)  
        .equ USART3_TCIE_Shift, 6   @ bitWidth 1 (Transmission complete interrupt  enable)  
        .equ USART3_RXNEIE_Shift, 5   @ bitWidth 1 (RXNE interrupt enable)  
        .equ USART3_IDLEIE_Shift, 4   @ bitWidth 1 (IDLE interrupt enable)  
        .equ USART3_TE_Shift, 3   @ bitWidth 1 (Transmitter enable)  
        .equ USART3_RE_Shift, 2   @ bitWidth 1 (Receiver enable)  
        .equ USART3_RWU_Shift, 1   @ bitWidth 1 (Receiver wakeup)  
        .equ USART3_SBK_Shift, 0   @ bitWidth 1 (Send break)  
 
    .equ USART3_CR2, USART3_BASE + 0x10 @ (Control register 2) 
        .equ USART3_LINEN_Shift, 14   @ bitWidth 1 (LIN mode enable)  
        .equ USART3_STOP_Shift, 12   @ bitWidth 2 (STOP bits)  
        .equ USART3_CLKEN_Shift, 11   @ bitWidth 1 (Clock enable)  
        .equ USART3_CPOL_Shift, 10   @ bitWidth 1 (Clock polarity)  
        .equ USART3_CPHA_Shift, 9   @ bitWidth 1 (Clock phase)  
        .equ USART3_LBCL_Shift, 8   @ bitWidth 1 (Last bit clock pulse)  
        .equ USART3_LBDIE_Shift, 6   @ bitWidth 1 (LIN break detection interrupt  enable)  
        .equ USART3_LBDL_Shift, 5   @ bitWidth 1 (lin break detection length)  
        .equ USART3_ADD_Shift, 0   @ bitWidth 4 (Address of the USART node)  
 
    .equ USART3_CR3, USART3_BASE + 0x14 @ (Control register 3) 
        .equ USART3_CTSIE_Shift, 10   @ bitWidth 1 (CTS interrupt enable)  
        .equ USART3_CTSE_Shift, 9   @ bitWidth 1 (CTS enable)  
        .equ USART3_RTSE_Shift, 8   @ bitWidth 1 (RTS enable)  
        .equ USART3_DMAT_Shift, 7   @ bitWidth 1 (DMA enable transmitter)  
        .equ USART3_DMAR_Shift, 6   @ bitWidth 1 (DMA enable receiver)  
        .equ USART3_SCEN_Shift, 5   @ bitWidth 1 (Smartcard mode enable)  
        .equ USART3_NACK_Shift, 4   @ bitWidth 1 (Smartcard NACK enable)  
        .equ USART3_HDSEL_Shift, 3   @ bitWidth 1 (Half-duplex selection)  
        .equ USART3_IRLP_Shift, 2   @ bitWidth 1 (IrDA low-power)  
        .equ USART3_IREN_Shift, 1   @ bitWidth 1 (IrDA mode enable)  
        .equ USART3_EIE_Shift, 0   @ bitWidth 1 (Error interrupt enable)  
 
    .equ USART3_GTPR, USART3_BASE + 0x18 @ (Guard time and prescaler  register) 
        .equ USART3_GT_Shift, 8   @ bitWidth 8 (Guard time value)  
        .equ USART3_PSC_Shift, 0   @ bitWidth 8 (Prescaler value)  
 

@=========================== ADC1 ===========================@
.equ ADC1_BASE, 0x40012400 @ (Analog to digital converter) 
    .equ ADC1_SR, ADC1_BASE + 0x0 @ (status register) 
        .equ ADC1_STRT_Shift, 4   @ bitWidth 1 (Regular channel start flag)  
        .equ ADC1_JSTRT_Shift, 3   @ bitWidth 1 (Injected channel start  flag)  
        .equ ADC1_JEOC_Shift, 2   @ bitWidth 1 (Injected channel end of  conversion)  
        .equ ADC1_EOC_Shift, 1   @ bitWidth 1 (Regular channel end of  conversion)  
        .equ ADC1_AWD_Shift, 0   @ bitWidth 1 (Analog watchdog flag)  
 
    .equ ADC1_CR1, ADC1_BASE + 0x4 @ (control register 1) 
        .equ ADC1_AWDEN_Shift, 23   @ bitWidth 1 (Analog watchdog enable on regular  channels)  
        .equ ADC1_JAWDEN_Shift, 22   @ bitWidth 1 (Analog watchdog enable on injected  channels)  
        .equ ADC1_DUALMOD_Shift, 16   @ bitWidth 4 (Dual mode selection)  
        .equ ADC1_DISCNUM_Shift, 13   @ bitWidth 3 (Discontinuous mode channel  count)  
        .equ ADC1_JDISCEN_Shift, 12   @ bitWidth 1 (Discontinuous mode on injected  channels)  
        .equ ADC1_DISCEN_Shift, 11   @ bitWidth 1 (Discontinuous mode on regular  channels)  
        .equ ADC1_JAUTO_Shift, 10   @ bitWidth 1 (Automatic injected group  conversion)  
        .equ ADC1_AWDSGL_Shift, 9   @ bitWidth 1 (Enable the watchdog on a single channel  in scan mode)  
        .equ ADC1_SCAN_Shift, 8   @ bitWidth 1 (Scan mode)  
        .equ ADC1_JEOCIE_Shift, 7   @ bitWidth 1 (Interrupt enable for injected  channels)  
        .equ ADC1_AWDIE_Shift, 6   @ bitWidth 1 (Analog watchdog interrupt  enable)  
        .equ ADC1_EOCIE_Shift, 5   @ bitWidth 1 (Interrupt enable for EOC)  
        .equ ADC1_AWDCH_Shift, 0   @ bitWidth 5 (Analog watchdog channel select  bits)  
 
    .equ ADC1_CR2, ADC1_BASE + 0x8 @ (control register 2) 
        .equ ADC1_TSVREFE_Shift, 23   @ bitWidth 1 (Temperature sensor and VREFINT  enable)  
        .equ ADC1_SWSTART_Shift, 22   @ bitWidth 1 (Start conversion of regular  channels)  
        .equ ADC1_JSWSTART_Shift, 21   @ bitWidth 1 (Start conversion of injected  channels)  
        .equ ADC1_EXTTRIG_Shift, 20   @ bitWidth 1 (External trigger conversion mode for  regular channels)  
        .equ ADC1_EXTSEL_Shift, 17   @ bitWidth 3 (External event select for regular  group)  
        .equ ADC1_JEXTTRIG_Shift, 15   @ bitWidth 1 (External trigger conversion mode for  injected channels)  
        .equ ADC1_JEXTSEL_Shift, 12   @ bitWidth 3 (External event select for injected  group)  
        .equ ADC1_ALIGN_Shift, 11   @ bitWidth 1 (Data alignment)  
        .equ ADC1_DMA_Shift, 8   @ bitWidth 1 (Direct memory access mode)  
        .equ ADC1_RSTCAL_Shift, 3   @ bitWidth 1 (Reset calibration)  
        .equ ADC1_CAL_Shift, 2   @ bitWidth 1 (A/D calibration)  
        .equ ADC1_CONT_Shift, 1   @ bitWidth 1 (Continuous conversion)  
        .equ ADC1_ADON_Shift, 0   @ bitWidth 1 (A/D converter ON / OFF)  
 
    .equ ADC1_SMPR1, ADC1_BASE + 0xC @ (sample time register 1) 
        .equ ADC1_SMP10_Shift, 0   @ bitWidth 3 (Channel 10 sample time  selection)  
        .equ ADC1_SMP11_Shift, 3   @ bitWidth 3 (Channel 11 sample time  selection)  
        .equ ADC1_SMP12_Shift, 6   @ bitWidth 3 (Channel 12 sample time  selection)  
        .equ ADC1_SMP13_Shift, 9   @ bitWidth 3 (Channel 13 sample time  selection)  
        .equ ADC1_SMP14_Shift, 12   @ bitWidth 3 (Channel 14 sample time  selection)  
        .equ ADC1_SMP15_Shift, 15   @ bitWidth 3 (Channel 15 sample time  selection)  
        .equ ADC1_SMP16_Shift, 18   @ bitWidth 3 (Channel 16 sample time  selection)  
        .equ ADC1_SMP17_Shift, 21   @ bitWidth 3 (Channel 17 sample time  selection)  
 
    .equ ADC1_SMPR2, ADC1_BASE + 0x10 @ (sample time register 2) 
        .equ ADC1_SMP0_Shift, 0   @ bitWidth 3 (Channel 0 sample time  selection)  
        .equ ADC1_SMP1_Shift, 3   @ bitWidth 3 (Channel 1 sample time  selection)  
        .equ ADC1_SMP2_Shift, 6   @ bitWidth 3 (Channel 2 sample time  selection)  
        .equ ADC1_SMP3_Shift, 9   @ bitWidth 3 (Channel 3 sample time  selection)  
        .equ ADC1_SMP4_Shift, 12   @ bitWidth 3 (Channel 4 sample time  selection)  
        .equ ADC1_SMP5_Shift, 15   @ bitWidth 3 (Channel 5 sample time  selection)  
        .equ ADC1_SMP6_Shift, 18   @ bitWidth 3 (Channel 6 sample time  selection)  
        .equ ADC1_SMP7_Shift, 21   @ bitWidth 3 (Channel 7 sample time  selection)  
        .equ ADC1_SMP8_Shift, 24   @ bitWidth 3 (Channel 8 sample time  selection)  
        .equ ADC1_SMP9_Shift, 27   @ bitWidth 3 (Channel 9 sample time  selection)  
 
    .equ ADC1_JOFR1, ADC1_BASE + 0x14 @ (injected channel data offset register  x) 
        .equ ADC1_JOFFSET1_Shift, 0   @ bitWidth 12 (Data offset for injected channel  x)  
 
    .equ ADC1_JOFR2, ADC1_BASE + 0x18 @ (injected channel data offset register  x) 
        .equ ADC1_JOFFSET2_Shift, 0   @ bitWidth 12 (Data offset for injected channel  x)  
 
    .equ ADC1_JOFR3, ADC1_BASE + 0x1C @ (injected channel data offset register  x) 
        .equ ADC1_JOFFSET3_Shift, 0   @ bitWidth 12 (Data offset for injected channel  x)  
 
    .equ ADC1_JOFR4, ADC1_BASE + 0x20 @ (injected channel data offset register  x) 
        .equ ADC1_JOFFSET4_Shift, 0   @ bitWidth 12 (Data offset for injected channel  x)  
 
    .equ ADC1_HTR, ADC1_BASE + 0x24 @ (watchdog higher threshold  register) 
        .equ ADC1_HT_Shift, 0   @ bitWidth 12 (Analog watchdog higher  threshold)  
 
    .equ ADC1_LTR, ADC1_BASE + 0x28 @ (watchdog lower threshold  register) 
        .equ ADC1_LT_Shift, 0   @ bitWidth 12 (Analog watchdog lower  threshold)  
 
    .equ ADC1_SQR1, ADC1_BASE + 0x2C @ (regular sequence register 1) 
        .equ ADC1_L_Shift, 20   @ bitWidth 4 (Regular channel sequence  length)  
        .equ ADC1_SQ16_Shift, 15   @ bitWidth 5 (16th conversion in regular  sequence)  
        .equ ADC1_SQ15_Shift, 10   @ bitWidth 5 (15th conversion in regular  sequence)  
        .equ ADC1_SQ14_Shift, 5   @ bitWidth 5 (14th conversion in regular  sequence)  
        .equ ADC1_SQ13_Shift, 0   @ bitWidth 5 (13th conversion in regular  sequence)  
 
    .equ ADC1_SQR2, ADC1_BASE + 0x30 @ (regular sequence register 2) 
        .equ ADC1_SQ12_Shift, 25   @ bitWidth 5 (12th conversion in regular  sequence)  
        .equ ADC1_SQ11_Shift, 20   @ bitWidth 5 (11th conversion in regular  sequence)  
        .equ ADC1_SQ10_Shift, 15   @ bitWidth 5 (10th conversion in regular  sequence)  
        .equ ADC1_SQ9_Shift, 10   @ bitWidth 5 (9th conversion in regular  sequence)  
        .equ ADC1_SQ8_Shift, 5   @ bitWidth 5 (8th conversion in regular  sequence)  
        .equ ADC1_SQ7_Shift, 0   @ bitWidth 5 (7th conversion in regular  sequence)  
 
    .equ ADC1_SQR3, ADC1_BASE + 0x34 @ (regular sequence register 3) 
        .equ ADC1_SQ6_Shift, 25   @ bitWidth 5 (6th conversion in regular  sequence)  
        .equ ADC1_SQ5_Shift, 20   @ bitWidth 5 (5th conversion in regular  sequence)  
        .equ ADC1_SQ4_Shift, 15   @ bitWidth 5 (4th conversion in regular  sequence)  
        .equ ADC1_SQ3_Shift, 10   @ bitWidth 5 (3rd conversion in regular  sequence)  
        .equ ADC1_SQ2_Shift, 5   @ bitWidth 5 (2nd conversion in regular  sequence)  
        .equ ADC1_SQ1_Shift, 0   @ bitWidth 5 (1st conversion in regular  sequence)  
 
    .equ ADC1_JSQR, ADC1_BASE + 0x38 @ (injected sequence register) 
        .equ ADC1_JL_Shift, 20   @ bitWidth 2 (Injected sequence length)  
        .equ ADC1_JSQ4_Shift, 15   @ bitWidth 5 (4th conversion in injected  sequence)  
        .equ ADC1_JSQ3_Shift, 10   @ bitWidth 5 (3rd conversion in injected  sequence)  
        .equ ADC1_JSQ2_Shift, 5   @ bitWidth 5 (2nd conversion in injected  sequence)  
        .equ ADC1_JSQ1_Shift, 0   @ bitWidth 5 (1st conversion in injected  sequence)  
 
    .equ ADC1_JDR1, ADC1_BASE + 0x3C @ (injected data register x) 
        .equ ADC1_JDATA_Shift, 0   @ bitWidth 16 (Injected data)  
 
    .equ ADC1_JDR2, ADC1_BASE + 0x40 @ (injected data register x) 
        .equ ADC1_JDATA_Shift, 0   @ bitWidth 16 (Injected data)  
 
    .equ ADC1_JDR3, ADC1_BASE + 0x44 @ (injected data register x) 
        .equ ADC1_JDATA_Shift, 0   @ bitWidth 16 (Injected data)  
 
    .equ ADC1_JDR4, ADC1_BASE + 0x48 @ (injected data register x) 
        .equ ADC1_JDATA_Shift, 0   @ bitWidth 16 (Injected data)  
 
    .equ ADC1_DR, ADC1_BASE + 0x4C @ (regular data register) 
        .equ ADC1_DATA_Shift, 0   @ bitWidth 16 (Regular data)  
        .equ ADC1_ADC2DATA_Shift, 16   @ bitWidth 16 (ADC2 data)  
 

@=========================== ADC2 ===========================@
.equ ADC2_BASE, 0x40012800 @ (Analog to digital converter) 
    .equ ADC2_SR, ADC2_BASE + 0x0 @ (status register) 
        .equ ADC2_STRT_Shift, 4   @ bitWidth 1 (Regular channel start flag)  
        .equ ADC2_JSTRT_Shift, 3   @ bitWidth 1 (Injected channel start  flag)  
        .equ ADC2_JEOC_Shift, 2   @ bitWidth 1 (Injected channel end of  conversion)  
        .equ ADC2_EOC_Shift, 1   @ bitWidth 1 (Regular channel end of  conversion)  
        .equ ADC2_AWD_Shift, 0   @ bitWidth 1 (Analog watchdog flag)  
 
    .equ ADC2_CR1, ADC2_BASE + 0x4 @ (control register 1) 
        .equ ADC2_AWDEN_Shift, 23   @ bitWidth 1 (Analog watchdog enable on regular  channels)  
        .equ ADC2_JAWDEN_Shift, 22   @ bitWidth 1 (Analog watchdog enable on injected  channels)  
        .equ ADC2_DISCNUM_Shift, 13   @ bitWidth 3 (Discontinuous mode channel  count)  
        .equ ADC2_JDISCEN_Shift, 12   @ bitWidth 1 (Discontinuous mode on injected  channels)  
        .equ ADC2_DISCEN_Shift, 11   @ bitWidth 1 (Discontinuous mode on regular  channels)  
        .equ ADC2_JAUTO_Shift, 10   @ bitWidth 1 (Automatic injected group  conversion)  
        .equ ADC2_AWDSGL_Shift, 9   @ bitWidth 1 (Enable the watchdog on a single channel  in scan mode)  
        .equ ADC2_SCAN_Shift, 8   @ bitWidth 1 (Scan mode)  
        .equ ADC2_JEOCIE_Shift, 7   @ bitWidth 1 (Interrupt enable for injected  channels)  
        .equ ADC2_AWDIE_Shift, 6   @ bitWidth 1 (Analog watchdog interrupt  enable)  
        .equ ADC2_EOCIE_Shift, 5   @ bitWidth 1 (Interrupt enable for EOC)  
        .equ ADC2_AWDCH_Shift, 0   @ bitWidth 5 (Analog watchdog channel select  bits)  
 
    .equ ADC2_CR2, ADC2_BASE + 0x8 @ (control register 2) 
        .equ ADC2_TSVREFE_Shift, 23   @ bitWidth 1 (Temperature sensor and VREFINT  enable)  
        .equ ADC2_SWSTART_Shift, 22   @ bitWidth 1 (Start conversion of regular  channels)  
        .equ ADC2_JSWSTART_Shift, 21   @ bitWidth 1 (Start conversion of injected  channels)  
        .equ ADC2_EXTTRIG_Shift, 20   @ bitWidth 1 (External trigger conversion mode for  regular channels)  
        .equ ADC2_EXTSEL_Shift, 17   @ bitWidth 3 (External event select for regular  group)  
        .equ ADC2_JEXTTRIG_Shift, 15   @ bitWidth 1 (External trigger conversion mode for  injected channels)  
        .equ ADC2_JEXTSEL_Shift, 12   @ bitWidth 3 (External event select for injected  group)  
        .equ ADC2_ALIGN_Shift, 11   @ bitWidth 1 (Data alignment)  
        .equ ADC2_DMA_Shift, 8   @ bitWidth 1 (Direct memory access mode)  
        .equ ADC2_RSTCAL_Shift, 3   @ bitWidth 1 (Reset calibration)  
        .equ ADC2_CAL_Shift, 2   @ bitWidth 1 (A/D calibration)  
        .equ ADC2_CONT_Shift, 1   @ bitWidth 1 (Continuous conversion)  
        .equ ADC2_ADON_Shift, 0   @ bitWidth 1 (A/D converter ON / OFF)  
 
    .equ ADC2_SMPR1, ADC2_BASE + 0xC @ (sample time register 1) 
        .equ ADC2_SMP10_Shift, 0   @ bitWidth 3 (Channel 10 sample time  selection)  
        .equ ADC2_SMP11_Shift, 3   @ bitWidth 3 (Channel 11 sample time  selection)  
        .equ ADC2_SMP12_Shift, 6   @ bitWidth 3 (Channel 12 sample time  selection)  
        .equ ADC2_SMP13_Shift, 9   @ bitWidth 3 (Channel 13 sample time  selection)  
        .equ ADC2_SMP14_Shift, 12   @ bitWidth 3 (Channel 14 sample time  selection)  
        .equ ADC2_SMP15_Shift, 15   @ bitWidth 3 (Channel 15 sample time  selection)  
        .equ ADC2_SMP16_Shift, 18   @ bitWidth 3 (Channel 16 sample time  selection)  
        .equ ADC2_SMP17_Shift, 21   @ bitWidth 3 (Channel 17 sample time  selection)  
 
    .equ ADC2_SMPR2, ADC2_BASE + 0x10 @ (sample time register 2) 
        .equ ADC2_SMP0_Shift, 0   @ bitWidth 3 (Channel 0 sample time  selection)  
        .equ ADC2_SMP1_Shift, 3   @ bitWidth 3 (Channel 1 sample time  selection)  
        .equ ADC2_SMP2_Shift, 6   @ bitWidth 3 (Channel 2 sample time  selection)  
        .equ ADC2_SMP3_Shift, 9   @ bitWidth 3 (Channel 3 sample time  selection)  
        .equ ADC2_SMP4_Shift, 12   @ bitWidth 3 (Channel 4 sample time  selection)  
        .equ ADC2_SMP5_Shift, 15   @ bitWidth 3 (Channel 5 sample time  selection)  
        .equ ADC2_SMP6_Shift, 18   @ bitWidth 3 (Channel 6 sample time  selection)  
        .equ ADC2_SMP7_Shift, 21   @ bitWidth 3 (Channel 7 sample time  selection)  
        .equ ADC2_SMP8_Shift, 24   @ bitWidth 3 (Channel 8 sample time  selection)  
        .equ ADC2_SMP9_Shift, 27   @ bitWidth 3 (Channel 9 sample time  selection)  
 
    .equ ADC2_JOFR1, ADC2_BASE + 0x14 @ (injected channel data offset register  x) 
        .equ ADC2_JOFFSET1_Shift, 0   @ bitWidth 12 (Data offset for injected channel  x)  
 
    .equ ADC2_JOFR2, ADC2_BASE + 0x18 @ (injected channel data offset register  x) 
        .equ ADC2_JOFFSET2_Shift, 0   @ bitWidth 12 (Data offset for injected channel  x)  
 
    .equ ADC2_JOFR3, ADC2_BASE + 0x1C @ (injected channel data offset register  x) 
        .equ ADC2_JOFFSET3_Shift, 0   @ bitWidth 12 (Data offset for injected channel  x)  
 
    .equ ADC2_JOFR4, ADC2_BASE + 0x20 @ (injected channel data offset register  x) 
        .equ ADC2_JOFFSET4_Shift, 0   @ bitWidth 12 (Data offset for injected channel  x)  
 
    .equ ADC2_HTR, ADC2_BASE + 0x24 @ (watchdog higher threshold  register) 
        .equ ADC2_HT_Shift, 0   @ bitWidth 12 (Analog watchdog higher  threshold)  
 
    .equ ADC2_LTR, ADC2_BASE + 0x28 @ (watchdog lower threshold  register) 
        .equ ADC2_LT_Shift, 0   @ bitWidth 12 (Analog watchdog lower  threshold)  
 
    .equ ADC2_SQR1, ADC2_BASE + 0x2C @ (regular sequence register 1) 
        .equ ADC2_L_Shift, 20   @ bitWidth 4 (Regular channel sequence  length)  
        .equ ADC2_SQ16_Shift, 15   @ bitWidth 5 (16th conversion in regular  sequence)  
        .equ ADC2_SQ15_Shift, 10   @ bitWidth 5 (15th conversion in regular  sequence)  
        .equ ADC2_SQ14_Shift, 5   @ bitWidth 5 (14th conversion in regular  sequence)  
        .equ ADC2_SQ13_Shift, 0   @ bitWidth 5 (13th conversion in regular  sequence)  
 
    .equ ADC2_SQR2, ADC2_BASE + 0x30 @ (regular sequence register 2) 
        .equ ADC2_SQ12_Shift, 25   @ bitWidth 5 (12th conversion in regular  sequence)  
        .equ ADC2_SQ11_Shift, 20   @ bitWidth 5 (11th conversion in regular  sequence)  
        .equ ADC2_SQ10_Shift, 15   @ bitWidth 5 (10th conversion in regular  sequence)  
        .equ ADC2_SQ9_Shift, 10   @ bitWidth 5 (9th conversion in regular  sequence)  
        .equ ADC2_SQ8_Shift, 5   @ bitWidth 5 (8th conversion in regular  sequence)  
        .equ ADC2_SQ7_Shift, 0   @ bitWidth 5 (7th conversion in regular  sequence)  
 
    .equ ADC2_SQR3, ADC2_BASE + 0x34 @ (regular sequence register 3) 
        .equ ADC2_SQ6_Shift, 25   @ bitWidth 5 (6th conversion in regular  sequence)  
        .equ ADC2_SQ5_Shift, 20   @ bitWidth 5 (5th conversion in regular  sequence)  
        .equ ADC2_SQ4_Shift, 15   @ bitWidth 5 (4th conversion in regular  sequence)  
        .equ ADC2_SQ3_Shift, 10   @ bitWidth 5 (3rd conversion in regular  sequence)  
        .equ ADC2_SQ2_Shift, 5   @ bitWidth 5 (2nd conversion in regular  sequence)  
        .equ ADC2_SQ1_Shift, 0   @ bitWidth 5 (1st conversion in regular  sequence)  
 
    .equ ADC2_JSQR, ADC2_BASE + 0x38 @ (injected sequence register) 
        .equ ADC2_JL_Shift, 20   @ bitWidth 2 (Injected sequence length)  
        .equ ADC2_JSQ4_Shift, 15   @ bitWidth 5 (4th conversion in injected  sequence)  
        .equ ADC2_JSQ3_Shift, 10   @ bitWidth 5 (3rd conversion in injected  sequence)  
        .equ ADC2_JSQ2_Shift, 5   @ bitWidth 5 (2nd conversion in injected  sequence)  
        .equ ADC2_JSQ1_Shift, 0   @ bitWidth 5 (1st conversion in injected  sequence)  
 
    .equ ADC2_JDR1, ADC2_BASE + 0x3C @ (injected data register x) 
        .equ ADC2_JDATA_Shift, 0   @ bitWidth 16 (Injected data)  
 
    .equ ADC2_JDR2, ADC2_BASE + 0x40 @ (injected data register x) 
        .equ ADC2_JDATA_Shift, 0   @ bitWidth 16 (Injected data)  
 
    .equ ADC2_JDR3, ADC2_BASE + 0x44 @ (injected data register x) 
        .equ ADC2_JDATA_Shift, 0   @ bitWidth 16 (Injected data)  
 
    .equ ADC2_JDR4, ADC2_BASE + 0x48 @ (injected data register x) 
        .equ ADC2_JDATA_Shift, 0   @ bitWidth 16 (Injected data)  
 
    .equ ADC2_DR, ADC2_BASE + 0x4C @ (regular data register) 
        .equ ADC2_DATA_Shift, 0   @ bitWidth 16 (Regular data)  
 

@=========================== ADC3 ===========================@
.equ ADC3_BASE, 0x40013C00 @ (Analog to digital converter) 
    .equ ADC3_SR, ADC3_BASE + 0x0 @ (status register) 
        .equ ADC3_STRT_Shift, 4   @ bitWidth 1 (Regular channel start flag)  
        .equ ADC3_JSTRT_Shift, 3   @ bitWidth 1 (Injected channel start  flag)  
        .equ ADC3_JEOC_Shift, 2   @ bitWidth 1 (Injected channel end of  conversion)  
        .equ ADC3_EOC_Shift, 1   @ bitWidth 1 (Regular channel end of  conversion)  
        .equ ADC3_AWD_Shift, 0   @ bitWidth 1 (Analog watchdog flag)  
 
    .equ ADC3_CR1, ADC3_BASE + 0x4 @ (control register 1) 
        .equ ADC3_AWDEN_Shift, 23   @ bitWidth 1 (Analog watchdog enable on regular  channels)  
        .equ ADC3_JAWDEN_Shift, 22   @ bitWidth 1 (Analog watchdog enable on injected  channels)  
        .equ ADC3_DISCNUM_Shift, 13   @ bitWidth 3 (Discontinuous mode channel  count)  
        .equ ADC3_JDISCEN_Shift, 12   @ bitWidth 1 (Discontinuous mode on injected  channels)  
        .equ ADC3_DISCEN_Shift, 11   @ bitWidth 1 (Discontinuous mode on regular  channels)  
        .equ ADC3_JAUTO_Shift, 10   @ bitWidth 1 (Automatic injected group  conversion)  
        .equ ADC3_AWDSGL_Shift, 9   @ bitWidth 1 (Enable the watchdog on a single channel  in scan mode)  
        .equ ADC3_SCAN_Shift, 8   @ bitWidth 1 (Scan mode)  
        .equ ADC3_JEOCIE_Shift, 7   @ bitWidth 1 (Interrupt enable for injected  channels)  
        .equ ADC3_AWDIE_Shift, 6   @ bitWidth 1 (Analog watchdog interrupt  enable)  
        .equ ADC3_EOCIE_Shift, 5   @ bitWidth 1 (Interrupt enable for EOC)  
        .equ ADC3_AWDCH_Shift, 0   @ bitWidth 5 (Analog watchdog channel select  bits)  
 
    .equ ADC3_CR2, ADC3_BASE + 0x8 @ (control register 2) 
        .equ ADC3_TSVREFE_Shift, 23   @ bitWidth 1 (Temperature sensor and VREFINT  enable)  
        .equ ADC3_SWSTART_Shift, 22   @ bitWidth 1 (Start conversion of regular  channels)  
        .equ ADC3_JSWSTART_Shift, 21   @ bitWidth 1 (Start conversion of injected  channels)  
        .equ ADC3_EXTTRIG_Shift, 20   @ bitWidth 1 (External trigger conversion mode for  regular channels)  
        .equ ADC3_EXTSEL_Shift, 17   @ bitWidth 3 (External event select for regular  group)  
        .equ ADC3_JEXTTRIG_Shift, 15   @ bitWidth 1 (External trigger conversion mode for  injected channels)  
        .equ ADC3_JEXTSEL_Shift, 12   @ bitWidth 3 (External event select for injected  group)  
        .equ ADC3_ALIGN_Shift, 11   @ bitWidth 1 (Data alignment)  
        .equ ADC3_DMA_Shift, 8   @ bitWidth 1 (Direct memory access mode)  
        .equ ADC3_RSTCAL_Shift, 3   @ bitWidth 1 (Reset calibration)  
        .equ ADC3_CAL_Shift, 2   @ bitWidth 1 (A/D calibration)  
        .equ ADC3_CONT_Shift, 1   @ bitWidth 1 (Continuous conversion)  
        .equ ADC3_ADON_Shift, 0   @ bitWidth 1 (A/D converter ON / OFF)  
 
    .equ ADC3_SMPR1, ADC3_BASE + 0xC @ (sample time register 1) 
        .equ ADC3_SMP10_Shift, 0   @ bitWidth 3 (Channel 10 sample time  selection)  
        .equ ADC3_SMP11_Shift, 3   @ bitWidth 3 (Channel 11 sample time  selection)  
        .equ ADC3_SMP12_Shift, 6   @ bitWidth 3 (Channel 12 sample time  selection)  
        .equ ADC3_SMP13_Shift, 9   @ bitWidth 3 (Channel 13 sample time  selection)  
        .equ ADC3_SMP14_Shift, 12   @ bitWidth 3 (Channel 14 sample time  selection)  
        .equ ADC3_SMP15_Shift, 15   @ bitWidth 3 (Channel 15 sample time  selection)  
        .equ ADC3_SMP16_Shift, 18   @ bitWidth 3 (Channel 16 sample time  selection)  
        .equ ADC3_SMP17_Shift, 21   @ bitWidth 3 (Channel 17 sample time  selection)  
 
    .equ ADC3_SMPR2, ADC3_BASE + 0x10 @ (sample time register 2) 
        .equ ADC3_SMP0_Shift, 0   @ bitWidth 3 (Channel 0 sample time  selection)  
        .equ ADC3_SMP1_Shift, 3   @ bitWidth 3 (Channel 1 sample time  selection)  
        .equ ADC3_SMP2_Shift, 6   @ bitWidth 3 (Channel 2 sample time  selection)  
        .equ ADC3_SMP3_Shift, 9   @ bitWidth 3 (Channel 3 sample time  selection)  
        .equ ADC3_SMP4_Shift, 12   @ bitWidth 3 (Channel 4 sample time  selection)  
        .equ ADC3_SMP5_Shift, 15   @ bitWidth 3 (Channel 5 sample time  selection)  
        .equ ADC3_SMP6_Shift, 18   @ bitWidth 3 (Channel 6 sample time  selection)  
        .equ ADC3_SMP7_Shift, 21   @ bitWidth 3 (Channel 7 sample time  selection)  
        .equ ADC3_SMP8_Shift, 24   @ bitWidth 3 (Channel 8 sample time  selection)  
        .equ ADC3_SMP9_Shift, 27   @ bitWidth 3 (Channel 9 sample time  selection)  
 
    .equ ADC3_JOFR1, ADC3_BASE + 0x14 @ (injected channel data offset register  x) 
        .equ ADC3_JOFFSET1_Shift, 0   @ bitWidth 12 (Data offset for injected channel  x)  
 
    .equ ADC3_JOFR2, ADC3_BASE + 0x18 @ (injected channel data offset register  x) 
        .equ ADC3_JOFFSET2_Shift, 0   @ bitWidth 12 (Data offset for injected channel  x)  
 
    .equ ADC3_JOFR3, ADC3_BASE + 0x1C @ (injected channel data offset register  x) 
        .equ ADC3_JOFFSET3_Shift, 0   @ bitWidth 12 (Data offset for injected channel  x)  
 
    .equ ADC3_JOFR4, ADC3_BASE + 0x20 @ (injected channel data offset register  x) 
        .equ ADC3_JOFFSET4_Shift, 0   @ bitWidth 12 (Data offset for injected channel  x)  
 
    .equ ADC3_HTR, ADC3_BASE + 0x24 @ (watchdog higher threshold  register) 
        .equ ADC3_HT_Shift, 0   @ bitWidth 12 (Analog watchdog higher  threshold)  
 
    .equ ADC3_LTR, ADC3_BASE + 0x28 @ (watchdog lower threshold  register) 
        .equ ADC3_LT_Shift, 0   @ bitWidth 12 (Analog watchdog lower  threshold)  
 
    .equ ADC3_SQR1, ADC3_BASE + 0x2C @ (regular sequence register 1) 
        .equ ADC3_L_Shift, 20   @ bitWidth 4 (Regular channel sequence  length)  
        .equ ADC3_SQ16_Shift, 15   @ bitWidth 5 (16th conversion in regular  sequence)  
        .equ ADC3_SQ15_Shift, 10   @ bitWidth 5 (15th conversion in regular  sequence)  
        .equ ADC3_SQ14_Shift, 5   @ bitWidth 5 (14th conversion in regular  sequence)  
        .equ ADC3_SQ13_Shift, 0   @ bitWidth 5 (13th conversion in regular  sequence)  
 
    .equ ADC3_SQR2, ADC3_BASE + 0x30 @ (regular sequence register 2) 
        .equ ADC3_SQ12_Shift, 25   @ bitWidth 5 (12th conversion in regular  sequence)  
        .equ ADC3_SQ11_Shift, 20   @ bitWidth 5 (11th conversion in regular  sequence)  
        .equ ADC3_SQ10_Shift, 15   @ bitWidth 5 (10th conversion in regular  sequence)  
        .equ ADC3_SQ9_Shift, 10   @ bitWidth 5 (9th conversion in regular  sequence)  
        .equ ADC3_SQ8_Shift, 5   @ bitWidth 5 (8th conversion in regular  sequence)  
        .equ ADC3_SQ7_Shift, 0   @ bitWidth 5 (7th conversion in regular  sequence)  
 
    .equ ADC3_SQR3, ADC3_BASE + 0x34 @ (regular sequence register 3) 
        .equ ADC3_SQ6_Shift, 25   @ bitWidth 5 (6th conversion in regular  sequence)  
        .equ ADC3_SQ5_Shift, 20   @ bitWidth 5 (5th conversion in regular  sequence)  
        .equ ADC3_SQ4_Shift, 15   @ bitWidth 5 (4th conversion in regular  sequence)  
        .equ ADC3_SQ3_Shift, 10   @ bitWidth 5 (3rd conversion in regular  sequence)  
        .equ ADC3_SQ2_Shift, 5   @ bitWidth 5 (2nd conversion in regular  sequence)  
        .equ ADC3_SQ1_Shift, 0   @ bitWidth 5 (1st conversion in regular  sequence)  
 
    .equ ADC3_JSQR, ADC3_BASE + 0x38 @ (injected sequence register) 
        .equ ADC3_JL_Shift, 20   @ bitWidth 2 (Injected sequence length)  
        .equ ADC3_JSQ4_Shift, 15   @ bitWidth 5 (4th conversion in injected  sequence)  
        .equ ADC3_JSQ3_Shift, 10   @ bitWidth 5 (3rd conversion in injected  sequence)  
        .equ ADC3_JSQ2_Shift, 5   @ bitWidth 5 (2nd conversion in injected  sequence)  
        .equ ADC3_JSQ1_Shift, 0   @ bitWidth 5 (1st conversion in injected  sequence)  
 
    .equ ADC3_JDR1, ADC3_BASE + 0x3C @ (injected data register x) 
        .equ ADC3_JDATA_Shift, 0   @ bitWidth 16 (Injected data)  
 
    .equ ADC3_JDR2, ADC3_BASE + 0x40 @ (injected data register x) 
        .equ ADC3_JDATA_Shift, 0   @ bitWidth 16 (Injected data)  
 
    .equ ADC3_JDR3, ADC3_BASE + 0x44 @ (injected data register x) 
        .equ ADC3_JDATA_Shift, 0   @ bitWidth 16 (Injected data)  
 
    .equ ADC3_JDR4, ADC3_BASE + 0x48 @ (injected data register x) 
        .equ ADC3_JDATA_Shift, 0   @ bitWidth 16 (Injected data)  
 
    .equ ADC3_DR, ADC3_BASE + 0x4C @ (regular data register) 
        .equ ADC3_DATA_Shift, 0   @ bitWidth 16 (Regular data)  
 

@=========================== CAN ===========================@
.equ CAN_BASE, 0x40006400 @ (Controller area network) 
    .equ CAN_CAN_MCR, CAN_BASE + 0x0 @ (CAN_MCR) 
        .equ CAN_DBF_Shift, 16   @ bitWidth 1 (DBF)  
        .equ CAN_RESET_Shift, 15   @ bitWidth 1 (RESET)  
        .equ CAN_TTCM_Shift, 7   @ bitWidth 1 (TTCM)  
        .equ CAN_ABOM_Shift, 6   @ bitWidth 1 (ABOM)  
        .equ CAN_AWUM_Shift, 5   @ bitWidth 1 (AWUM)  
        .equ CAN_NART_Shift, 4   @ bitWidth 1 (NART)  
        .equ CAN_RFLM_Shift, 3   @ bitWidth 1 (RFLM)  
        .equ CAN_TXFP_Shift, 2   @ bitWidth 1 (TXFP)  
        .equ CAN_SLEEP_Shift, 1   @ bitWidth 1 (SLEEP)  
        .equ CAN_INRQ_Shift, 0   @ bitWidth 1 (INRQ)  
 
    .equ CAN_CAN_MSR, CAN_BASE + 0x4 @ (CAN_MSR) 
        .equ CAN_RX_Shift, 11   @ bitWidth 1 (RX)  
        .equ CAN_SAMP_Shift, 10   @ bitWidth 1 (SAMP)  
        .equ CAN_RXM_Shift, 9   @ bitWidth 1 (RXM)  
        .equ CAN_TXM_Shift, 8   @ bitWidth 1 (TXM)  
        .equ CAN_SLAKI_Shift, 4   @ bitWidth 1 (SLAKI)  
        .equ CAN_WKUI_Shift, 3   @ bitWidth 1 (WKUI)  
        .equ CAN_ERRI_Shift, 2   @ bitWidth 1 (ERRI)  
        .equ CAN_SLAK_Shift, 1   @ bitWidth 1 (SLAK)  
        .equ CAN_INAK_Shift, 0   @ bitWidth 1 (INAK)  
 
    .equ CAN_CAN_TSR, CAN_BASE + 0x8 @ (CAN_TSR) 
        .equ CAN_LOW2_Shift, 31   @ bitWidth 1 (Lowest priority flag for mailbox  2)  
        .equ CAN_LOW1_Shift, 30   @ bitWidth 1 (Lowest priority flag for mailbox  1)  
        .equ CAN_LOW0_Shift, 29   @ bitWidth 1 (Lowest priority flag for mailbox  0)  
        .equ CAN_TME2_Shift, 28   @ bitWidth 1 (Lowest priority flag for mailbox  2)  
        .equ CAN_TME1_Shift, 27   @ bitWidth 1 (Lowest priority flag for mailbox  1)  
        .equ CAN_TME0_Shift, 26   @ bitWidth 1 (Lowest priority flag for mailbox  0)  
        .equ CAN_CODE_Shift, 24   @ bitWidth 2 (CODE)  
        .equ CAN_ABRQ2_Shift, 23   @ bitWidth 1 (ABRQ2)  
        .equ CAN_TERR2_Shift, 19   @ bitWidth 1 (TERR2)  
        .equ CAN_ALST2_Shift, 18   @ bitWidth 1 (ALST2)  
        .equ CAN_TXOK2_Shift, 17   @ bitWidth 1 (TXOK2)  
        .equ CAN_RQCP2_Shift, 16   @ bitWidth 1 (RQCP2)  
        .equ CAN_ABRQ1_Shift, 15   @ bitWidth 1 (ABRQ1)  
        .equ CAN_TERR1_Shift, 11   @ bitWidth 1 (TERR1)  
        .equ CAN_ALST1_Shift, 10   @ bitWidth 1 (ALST1)  
        .equ CAN_TXOK1_Shift, 9   @ bitWidth 1 (TXOK1)  
        .equ CAN_RQCP1_Shift, 8   @ bitWidth 1 (RQCP1)  
        .equ CAN_ABRQ0_Shift, 7   @ bitWidth 1 (ABRQ0)  
        .equ CAN_TERR0_Shift, 3   @ bitWidth 1 (TERR0)  
        .equ CAN_ALST0_Shift, 2   @ bitWidth 1 (ALST0)  
        .equ CAN_TXOK0_Shift, 1   @ bitWidth 1 (TXOK0)  
        .equ CAN_RQCP0_Shift, 0   @ bitWidth 1 (RQCP0)  
 
    .equ CAN_CAN_RF0R, CAN_BASE + 0xC @ (CAN_RF0R) 
        .equ CAN_RFOM0_Shift, 5   @ bitWidth 1 (RFOM0)  
        .equ CAN_FOVR0_Shift, 4   @ bitWidth 1 (FOVR0)  
        .equ CAN_FULL0_Shift, 3   @ bitWidth 1 (FULL0)  
        .equ CAN_FMP0_Shift, 0   @ bitWidth 2 (FMP0)  
 
    .equ CAN_CAN_RF1R, CAN_BASE + 0x10 @ (CAN_RF1R) 
        .equ CAN_RFOM1_Shift, 5   @ bitWidth 1 (RFOM1)  
        .equ CAN_FOVR1_Shift, 4   @ bitWidth 1 (FOVR1)  
        .equ CAN_FULL1_Shift, 3   @ bitWidth 1 (FULL1)  
        .equ CAN_FMP1_Shift, 0   @ bitWidth 2 (FMP1)  
 
    .equ CAN_CAN_IER, CAN_BASE + 0x14 @ (CAN_IER) 
        .equ CAN_SLKIE_Shift, 17   @ bitWidth 1 (SLKIE)  
        .equ CAN_WKUIE_Shift, 16   @ bitWidth 1 (WKUIE)  
        .equ CAN_ERRIE_Shift, 15   @ bitWidth 1 (ERRIE)  
        .equ CAN_LECIE_Shift, 11   @ bitWidth 1 (LECIE)  
        .equ CAN_BOFIE_Shift, 10   @ bitWidth 1 (BOFIE)  
        .equ CAN_EPVIE_Shift, 9   @ bitWidth 1 (EPVIE)  
        .equ CAN_EWGIE_Shift, 8   @ bitWidth 1 (EWGIE)  
        .equ CAN_FOVIE1_Shift, 6   @ bitWidth 1 (FOVIE1)  
        .equ CAN_FFIE1_Shift, 5   @ bitWidth 1 (FFIE1)  
        .equ CAN_FMPIE1_Shift, 4   @ bitWidth 1 (FMPIE1)  
        .equ CAN_FOVIE0_Shift, 3   @ bitWidth 1 (FOVIE0)  
        .equ CAN_FFIE0_Shift, 2   @ bitWidth 1 (FFIE0)  
        .equ CAN_FMPIE0_Shift, 1   @ bitWidth 1 (FMPIE0)  
        .equ CAN_TMEIE_Shift, 0   @ bitWidth 1 (TMEIE)  
 
    .equ CAN_CAN_ESR, CAN_BASE + 0x18 @ (CAN_ESR) 
        .equ CAN_REC_Shift, 24   @ bitWidth 8 (REC)  
        .equ CAN_TEC_Shift, 16   @ bitWidth 8 (TEC)  
        .equ CAN_LEC_Shift, 4   @ bitWidth 3 (LEC)  
        .equ CAN_BOFF_Shift, 2   @ bitWidth 1 (BOFF)  
        .equ CAN_EPVF_Shift, 1   @ bitWidth 1 (EPVF)  
        .equ CAN_EWGF_Shift, 0   @ bitWidth 1 (EWGF)  
 
    .equ CAN_CAN_BTR, CAN_BASE + 0x1C @ (CAN_BTR) 
        .equ CAN_SILM_Shift, 31   @ bitWidth 1 (SILM)  
        .equ CAN_LBKM_Shift, 30   @ bitWidth 1 (LBKM)  
        .equ CAN_SJW_Shift, 24   @ bitWidth 2 (SJW)  
        .equ CAN_TS2_Shift, 20   @ bitWidth 3 (TS2)  
        .equ CAN_TS1_Shift, 16   @ bitWidth 4 (TS1)  
        .equ CAN_BRP_Shift, 0   @ bitWidth 10 (BRP)  
 
    .equ CAN_CAN_TI0R, CAN_BASE + 0x180 @ (CAN_TI0R) 
        .equ CAN_STID_Shift, 21   @ bitWidth 11 (STID)  
        .equ CAN_EXID_Shift, 3   @ bitWidth 18 (EXID)  
        .equ CAN_IDE_Shift, 2   @ bitWidth 1 (IDE)  
        .equ CAN_RTR_Shift, 1   @ bitWidth 1 (RTR)  
        .equ CAN_TXRQ_Shift, 0   @ bitWidth 1 (TXRQ)  
 
    .equ CAN_CAN_TDT0R, CAN_BASE + 0x184 @ (CAN_TDT0R) 
        .equ CAN_TIME_Shift, 16   @ bitWidth 16 (TIME)  
        .equ CAN_TGT_Shift, 8   @ bitWidth 1 (TGT)  
        .equ CAN_DLC_Shift, 0   @ bitWidth 4 (DLC)  
 
    .equ CAN_CAN_TDL0R, CAN_BASE + 0x188 @ (CAN_TDL0R) 
        .equ CAN_DATA3_Shift, 24   @ bitWidth 8 (DATA3)  
        .equ CAN_DATA2_Shift, 16   @ bitWidth 8 (DATA2)  
        .equ CAN_DATA1_Shift, 8   @ bitWidth 8 (DATA1)  
        .equ CAN_DATA0_Shift, 0   @ bitWidth 8 (DATA0)  
 
    .equ CAN_CAN_TDH0R, CAN_BASE + 0x18C @ (CAN_TDH0R) 
        .equ CAN_DATA7_Shift, 24   @ bitWidth 8 (DATA7)  
        .equ CAN_DATA6_Shift, 16   @ bitWidth 8 (DATA6)  
        .equ CAN_DATA5_Shift, 8   @ bitWidth 8 (DATA5)  
        .equ CAN_DATA4_Shift, 0   @ bitWidth 8 (DATA4)  
 
    .equ CAN_CAN_TI1R, CAN_BASE + 0x190 @ (CAN_TI1R) 
        .equ CAN_STID_Shift, 21   @ bitWidth 11 (STID)  
        .equ CAN_EXID_Shift, 3   @ bitWidth 18 (EXID)  
        .equ CAN_IDE_Shift, 2   @ bitWidth 1 (IDE)  
        .equ CAN_RTR_Shift, 1   @ bitWidth 1 (RTR)  
        .equ CAN_TXRQ_Shift, 0   @ bitWidth 1 (TXRQ)  
 
    .equ CAN_CAN_TDT1R, CAN_BASE + 0x194 @ (CAN_TDT1R) 
        .equ CAN_TIME_Shift, 16   @ bitWidth 16 (TIME)  
        .equ CAN_TGT_Shift, 8   @ bitWidth 1 (TGT)  
        .equ CAN_DLC_Shift, 0   @ bitWidth 4 (DLC)  
 
    .equ CAN_CAN_TDL1R, CAN_BASE + 0x198 @ (CAN_TDL1R) 
        .equ CAN_DATA3_Shift, 24   @ bitWidth 8 (DATA3)  
        .equ CAN_DATA2_Shift, 16   @ bitWidth 8 (DATA2)  
        .equ CAN_DATA1_Shift, 8   @ bitWidth 8 (DATA1)  
        .equ CAN_DATA0_Shift, 0   @ bitWidth 8 (DATA0)  
 
    .equ CAN_CAN_TDH1R, CAN_BASE + 0x19C @ (CAN_TDH1R) 
        .equ CAN_DATA7_Shift, 24   @ bitWidth 8 (DATA7)  
        .equ CAN_DATA6_Shift, 16   @ bitWidth 8 (DATA6)  
        .equ CAN_DATA5_Shift, 8   @ bitWidth 8 (DATA5)  
        .equ CAN_DATA4_Shift, 0   @ bitWidth 8 (DATA4)  
 
    .equ CAN_CAN_TI2R, CAN_BASE + 0x1A0 @ (CAN_TI2R) 
        .equ CAN_STID_Shift, 21   @ bitWidth 11 (STID)  
        .equ CAN_EXID_Shift, 3   @ bitWidth 18 (EXID)  
        .equ CAN_IDE_Shift, 2   @ bitWidth 1 (IDE)  
        .equ CAN_RTR_Shift, 1   @ bitWidth 1 (RTR)  
        .equ CAN_TXRQ_Shift, 0   @ bitWidth 1 (TXRQ)  
 
    .equ CAN_CAN_TDT2R, CAN_BASE + 0x1A4 @ (CAN_TDT2R) 
        .equ CAN_TIME_Shift, 16   @ bitWidth 16 (TIME)  
        .equ CAN_TGT_Shift, 8   @ bitWidth 1 (TGT)  
        .equ CAN_DLC_Shift, 0   @ bitWidth 4 (DLC)  
 
    .equ CAN_CAN_TDL2R, CAN_BASE + 0x1A8 @ (CAN_TDL2R) 
        .equ CAN_DATA3_Shift, 24   @ bitWidth 8 (DATA3)  
        .equ CAN_DATA2_Shift, 16   @ bitWidth 8 (DATA2)  
        .equ CAN_DATA1_Shift, 8   @ bitWidth 8 (DATA1)  
        .equ CAN_DATA0_Shift, 0   @ bitWidth 8 (DATA0)  
 
    .equ CAN_CAN_TDH2R, CAN_BASE + 0x1AC @ (CAN_TDH2R) 
        .equ CAN_DATA7_Shift, 24   @ bitWidth 8 (DATA7)  
        .equ CAN_DATA6_Shift, 16   @ bitWidth 8 (DATA6)  
        .equ CAN_DATA5_Shift, 8   @ bitWidth 8 (DATA5)  
        .equ CAN_DATA4_Shift, 0   @ bitWidth 8 (DATA4)  
 
    .equ CAN_CAN_RI0R, CAN_BASE + 0x1B0 @ (CAN_RI0R) 
        .equ CAN_STID_Shift, 21   @ bitWidth 11 (STID)  
        .equ CAN_EXID_Shift, 3   @ bitWidth 18 (EXID)  
        .equ CAN_IDE_Shift, 2   @ bitWidth 1 (IDE)  
        .equ CAN_RTR_Shift, 1   @ bitWidth 1 (RTR)  
 
    .equ CAN_CAN_RDT0R, CAN_BASE + 0x1B4 @ (CAN_RDT0R) 
        .equ CAN_TIME_Shift, 16   @ bitWidth 16 (TIME)  
        .equ CAN_FMI_Shift, 8   @ bitWidth 8 (FMI)  
        .equ CAN_DLC_Shift, 0   @ bitWidth 4 (DLC)  
 
    .equ CAN_CAN_RDL0R, CAN_BASE + 0x1B8 @ (CAN_RDL0R) 
        .equ CAN_DATA3_Shift, 24   @ bitWidth 8 (DATA3)  
        .equ CAN_DATA2_Shift, 16   @ bitWidth 8 (DATA2)  
        .equ CAN_DATA1_Shift, 8   @ bitWidth 8 (DATA1)  
        .equ CAN_DATA0_Shift, 0   @ bitWidth 8 (DATA0)  
 
    .equ CAN_CAN_RDH0R, CAN_BASE + 0x1BC @ (CAN_RDH0R) 
        .equ CAN_DATA7_Shift, 24   @ bitWidth 8 (DATA7)  
        .equ CAN_DATA6_Shift, 16   @ bitWidth 8 (DATA6)  
        .equ CAN_DATA5_Shift, 8   @ bitWidth 8 (DATA5)  
        .equ CAN_DATA4_Shift, 0   @ bitWidth 8 (DATA4)  
 
    .equ CAN_CAN_RI1R, CAN_BASE + 0x1C0 @ (CAN_RI1R) 
        .equ CAN_STID_Shift, 21   @ bitWidth 11 (STID)  
        .equ CAN_EXID_Shift, 3   @ bitWidth 18 (EXID)  
        .equ CAN_IDE_Shift, 2   @ bitWidth 1 (IDE)  
        .equ CAN_RTR_Shift, 1   @ bitWidth 1 (RTR)  
 
    .equ CAN_CAN_RDT1R, CAN_BASE + 0x1C4 @ (CAN_RDT1R) 
        .equ CAN_TIME_Shift, 16   @ bitWidth 16 (TIME)  
        .equ CAN_FMI_Shift, 8   @ bitWidth 8 (FMI)  
        .equ CAN_DLC_Shift, 0   @ bitWidth 4 (DLC)  
 
    .equ CAN_CAN_RDL1R, CAN_BASE + 0x1C8 @ (CAN_RDL1R) 
        .equ CAN_DATA3_Shift, 24   @ bitWidth 8 (DATA3)  
        .equ CAN_DATA2_Shift, 16   @ bitWidth 8 (DATA2)  
        .equ CAN_DATA1_Shift, 8   @ bitWidth 8 (DATA1)  
        .equ CAN_DATA0_Shift, 0   @ bitWidth 8 (DATA0)  
 
    .equ CAN_CAN_RDH1R, CAN_BASE + 0x1CC @ (CAN_RDH1R) 
        .equ CAN_DATA7_Shift, 24   @ bitWidth 8 (DATA7)  
        .equ CAN_DATA6_Shift, 16   @ bitWidth 8 (DATA6)  
        .equ CAN_DATA5_Shift, 8   @ bitWidth 8 (DATA5)  
        .equ CAN_DATA4_Shift, 0   @ bitWidth 8 (DATA4)  
 
    .equ CAN_CAN_FMR, CAN_BASE + 0x200 @ (CAN_FMR) 
        .equ CAN_FINIT_Shift, 0   @ bitWidth 1 (FINIT)  
 
    .equ CAN_CAN_FM1R, CAN_BASE + 0x204 @ (CAN_FM1R) 
        .equ CAN_FBM0_Shift, 0   @ bitWidth 1 (Filter mode)  
        .equ CAN_FBM1_Shift, 1   @ bitWidth 1 (Filter mode)  
        .equ CAN_FBM2_Shift, 2   @ bitWidth 1 (Filter mode)  
        .equ CAN_FBM3_Shift, 3   @ bitWidth 1 (Filter mode)  
        .equ CAN_FBM4_Shift, 4   @ bitWidth 1 (Filter mode)  
        .equ CAN_FBM5_Shift, 5   @ bitWidth 1 (Filter mode)  
        .equ CAN_FBM6_Shift, 6   @ bitWidth 1 (Filter mode)  
        .equ CAN_FBM7_Shift, 7   @ bitWidth 1 (Filter mode)  
        .equ CAN_FBM8_Shift, 8   @ bitWidth 1 (Filter mode)  
        .equ CAN_FBM9_Shift, 9   @ bitWidth 1 (Filter mode)  
        .equ CAN_FBM10_Shift, 10   @ bitWidth 1 (Filter mode)  
        .equ CAN_FBM11_Shift, 11   @ bitWidth 1 (Filter mode)  
        .equ CAN_FBM12_Shift, 12   @ bitWidth 1 (Filter mode)  
        .equ CAN_FBM13_Shift, 13   @ bitWidth 1 (Filter mode)  
 
    .equ CAN_CAN_FS1R, CAN_BASE + 0x20C @ (CAN_FS1R) 
        .equ CAN_FSC0_Shift, 0   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN_FSC1_Shift, 1   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN_FSC2_Shift, 2   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN_FSC3_Shift, 3   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN_FSC4_Shift, 4   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN_FSC5_Shift, 5   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN_FSC6_Shift, 6   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN_FSC7_Shift, 7   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN_FSC8_Shift, 8   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN_FSC9_Shift, 9   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN_FSC10_Shift, 10   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN_FSC11_Shift, 11   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN_FSC12_Shift, 12   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN_FSC13_Shift, 13   @ bitWidth 1 (Filter scale configuration)  
 
    .equ CAN_CAN_FFA1R, CAN_BASE + 0x214 @ (CAN_FFA1R) 
        .equ CAN_FFA0_Shift, 0   @ bitWidth 1 (Filter FIFO assignment for filter  0)  
        .equ CAN_FFA1_Shift, 1   @ bitWidth 1 (Filter FIFO assignment for filter  1)  
        .equ CAN_FFA2_Shift, 2   @ bitWidth 1 (Filter FIFO assignment for filter  2)  
        .equ CAN_FFA3_Shift, 3   @ bitWidth 1 (Filter FIFO assignment for filter  3)  
        .equ CAN_FFA4_Shift, 4   @ bitWidth 1 (Filter FIFO assignment for filter  4)  
        .equ CAN_FFA5_Shift, 5   @ bitWidth 1 (Filter FIFO assignment for filter  5)  
        .equ CAN_FFA6_Shift, 6   @ bitWidth 1 (Filter FIFO assignment for filter  6)  
        .equ CAN_FFA7_Shift, 7   @ bitWidth 1 (Filter FIFO assignment for filter  7)  
        .equ CAN_FFA8_Shift, 8   @ bitWidth 1 (Filter FIFO assignment for filter  8)  
        .equ CAN_FFA9_Shift, 9   @ bitWidth 1 (Filter FIFO assignment for filter  9)  
        .equ CAN_FFA10_Shift, 10   @ bitWidth 1 (Filter FIFO assignment for filter  10)  
        .equ CAN_FFA11_Shift, 11   @ bitWidth 1 (Filter FIFO assignment for filter  11)  
        .equ CAN_FFA12_Shift, 12   @ bitWidth 1 (Filter FIFO assignment for filter  12)  
        .equ CAN_FFA13_Shift, 13   @ bitWidth 1 (Filter FIFO assignment for filter  13)  
 
    .equ CAN_CAN_FA1R, CAN_BASE + 0x21C @ (CAN_FA1R) 
        .equ CAN_FACT0_Shift, 0   @ bitWidth 1 (Filter active)  
        .equ CAN_FACT1_Shift, 1   @ bitWidth 1 (Filter active)  
        .equ CAN_FACT2_Shift, 2   @ bitWidth 1 (Filter active)  
        .equ CAN_FACT3_Shift, 3   @ bitWidth 1 (Filter active)  
        .equ CAN_FACT4_Shift, 4   @ bitWidth 1 (Filter active)  
        .equ CAN_FACT5_Shift, 5   @ bitWidth 1 (Filter active)  
        .equ CAN_FACT6_Shift, 6   @ bitWidth 1 (Filter active)  
        .equ CAN_FACT7_Shift, 7   @ bitWidth 1 (Filter active)  
        .equ CAN_FACT8_Shift, 8   @ bitWidth 1 (Filter active)  
        .equ CAN_FACT9_Shift, 9   @ bitWidth 1 (Filter active)  
        .equ CAN_FACT10_Shift, 10   @ bitWidth 1 (Filter active)  
        .equ CAN_FACT11_Shift, 11   @ bitWidth 1 (Filter active)  
        .equ CAN_FACT12_Shift, 12   @ bitWidth 1 (Filter active)  
        .equ CAN_FACT13_Shift, 13   @ bitWidth 1 (Filter active)  
 
    .equ CAN_F0R1, CAN_BASE + 0x240 @ (Filter bank 0 register 1) 
        .equ CAN_FB0_Shift, 0   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB1_Shift, 1   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB2_Shift, 2   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB3_Shift, 3   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB4_Shift, 4   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB5_Shift, 5   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB6_Shift, 6   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB7_Shift, 7   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB8_Shift, 8   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB9_Shift, 9   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB10_Shift, 10   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB11_Shift, 11   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB12_Shift, 12   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB13_Shift, 13   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB14_Shift, 14   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB15_Shift, 15   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB16_Shift, 16   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB17_Shift, 17   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB18_Shift, 18   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB19_Shift, 19   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB20_Shift, 20   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB21_Shift, 21   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB22_Shift, 22   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB23_Shift, 23   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB24_Shift, 24   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB25_Shift, 25   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB26_Shift, 26   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB27_Shift, 27   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB28_Shift, 28   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB29_Shift, 29   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB30_Shift, 30   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB31_Shift, 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN_F0R2, CAN_BASE + 0x244 @ (Filter bank 0 register 2) 
        .equ CAN_FB0_Shift, 0   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB1_Shift, 1   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB2_Shift, 2   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB3_Shift, 3   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB4_Shift, 4   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB5_Shift, 5   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB6_Shift, 6   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB7_Shift, 7   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB8_Shift, 8   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB9_Shift, 9   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB10_Shift, 10   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB11_Shift, 11   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB12_Shift, 12   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB13_Shift, 13   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB14_Shift, 14   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB15_Shift, 15   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB16_Shift, 16   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB17_Shift, 17   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB18_Shift, 18   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB19_Shift, 19   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB20_Shift, 20   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB21_Shift, 21   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB22_Shift, 22   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB23_Shift, 23   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB24_Shift, 24   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB25_Shift, 25   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB26_Shift, 26   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB27_Shift, 27   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB28_Shift, 28   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB29_Shift, 29   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB30_Shift, 30   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB31_Shift, 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN_F1R1, CAN_BASE + 0x248 @ (Filter bank 1 register 1) 
        .equ CAN_FB0_Shift, 0   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB1_Shift, 1   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB2_Shift, 2   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB3_Shift, 3   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB4_Shift, 4   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB5_Shift, 5   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB6_Shift, 6   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB7_Shift, 7   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB8_Shift, 8   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB9_Shift, 9   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB10_Shift, 10   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB11_Shift, 11   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB12_Shift, 12   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB13_Shift, 13   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB14_Shift, 14   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB15_Shift, 15   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB16_Shift, 16   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB17_Shift, 17   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB18_Shift, 18   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB19_Shift, 19   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB20_Shift, 20   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB21_Shift, 21   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB22_Shift, 22   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB23_Shift, 23   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB24_Shift, 24   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB25_Shift, 25   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB26_Shift, 26   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB27_Shift, 27   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB28_Shift, 28   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB29_Shift, 29   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB30_Shift, 30   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB31_Shift, 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN_F1R2, CAN_BASE + 0x24C @ (Filter bank 1 register 2) 
        .equ CAN_FB0_Shift, 0   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB1_Shift, 1   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB2_Shift, 2   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB3_Shift, 3   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB4_Shift, 4   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB5_Shift, 5   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB6_Shift, 6   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB7_Shift, 7   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB8_Shift, 8   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB9_Shift, 9   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB10_Shift, 10   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB11_Shift, 11   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB12_Shift, 12   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB13_Shift, 13   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB14_Shift, 14   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB15_Shift, 15   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB16_Shift, 16   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB17_Shift, 17   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB18_Shift, 18   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB19_Shift, 19   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB20_Shift, 20   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB21_Shift, 21   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB22_Shift, 22   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB23_Shift, 23   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB24_Shift, 24   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB25_Shift, 25   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB26_Shift, 26   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB27_Shift, 27   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB28_Shift, 28   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB29_Shift, 29   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB30_Shift, 30   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB31_Shift, 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN_F2R1, CAN_BASE + 0x250 @ (Filter bank 2 register 1) 
        .equ CAN_FB0_Shift, 0   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB1_Shift, 1   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB2_Shift, 2   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB3_Shift, 3   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB4_Shift, 4   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB5_Shift, 5   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB6_Shift, 6   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB7_Shift, 7   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB8_Shift, 8   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB9_Shift, 9   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB10_Shift, 10   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB11_Shift, 11   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB12_Shift, 12   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB13_Shift, 13   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB14_Shift, 14   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB15_Shift, 15   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB16_Shift, 16   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB17_Shift, 17   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB18_Shift, 18   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB19_Shift, 19   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB20_Shift, 20   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB21_Shift, 21   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB22_Shift, 22   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB23_Shift, 23   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB24_Shift, 24   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB25_Shift, 25   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB26_Shift, 26   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB27_Shift, 27   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB28_Shift, 28   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB29_Shift, 29   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB30_Shift, 30   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB31_Shift, 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN_F2R2, CAN_BASE + 0x254 @ (Filter bank 2 register 2) 
        .equ CAN_FB0_Shift, 0   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB1_Shift, 1   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB2_Shift, 2   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB3_Shift, 3   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB4_Shift, 4   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB5_Shift, 5   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB6_Shift, 6   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB7_Shift, 7   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB8_Shift, 8   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB9_Shift, 9   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB10_Shift, 10   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB11_Shift, 11   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB12_Shift, 12   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB13_Shift, 13   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB14_Shift, 14   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB15_Shift, 15   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB16_Shift, 16   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB17_Shift, 17   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB18_Shift, 18   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB19_Shift, 19   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB20_Shift, 20   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB21_Shift, 21   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB22_Shift, 22   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB23_Shift, 23   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB24_Shift, 24   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB25_Shift, 25   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB26_Shift, 26   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB27_Shift, 27   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB28_Shift, 28   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB29_Shift, 29   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB30_Shift, 30   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB31_Shift, 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN_F3R1, CAN_BASE + 0x258 @ (Filter bank 3 register 1) 
        .equ CAN_FB0_Shift, 0   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB1_Shift, 1   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB2_Shift, 2   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB3_Shift, 3   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB4_Shift, 4   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB5_Shift, 5   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB6_Shift, 6   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB7_Shift, 7   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB8_Shift, 8   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB9_Shift, 9   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB10_Shift, 10   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB11_Shift, 11   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB12_Shift, 12   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB13_Shift, 13   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB14_Shift, 14   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB15_Shift, 15   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB16_Shift, 16   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB17_Shift, 17   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB18_Shift, 18   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB19_Shift, 19   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB20_Shift, 20   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB21_Shift, 21   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB22_Shift, 22   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB23_Shift, 23   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB24_Shift, 24   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB25_Shift, 25   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB26_Shift, 26   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB27_Shift, 27   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB28_Shift, 28   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB29_Shift, 29   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB30_Shift, 30   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB31_Shift, 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN_F3R2, CAN_BASE + 0x25C @ (Filter bank 3 register 2) 
        .equ CAN_FB0_Shift, 0   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB1_Shift, 1   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB2_Shift, 2   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB3_Shift, 3   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB4_Shift, 4   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB5_Shift, 5   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB6_Shift, 6   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB7_Shift, 7   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB8_Shift, 8   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB9_Shift, 9   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB10_Shift, 10   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB11_Shift, 11   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB12_Shift, 12   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB13_Shift, 13   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB14_Shift, 14   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB15_Shift, 15   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB16_Shift, 16   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB17_Shift, 17   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB18_Shift, 18   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB19_Shift, 19   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB20_Shift, 20   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB21_Shift, 21   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB22_Shift, 22   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB23_Shift, 23   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB24_Shift, 24   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB25_Shift, 25   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB26_Shift, 26   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB27_Shift, 27   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB28_Shift, 28   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB29_Shift, 29   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB30_Shift, 30   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB31_Shift, 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN_F4R1, CAN_BASE + 0x260 @ (Filter bank 4 register 1) 
        .equ CAN_FB0_Shift, 0   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB1_Shift, 1   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB2_Shift, 2   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB3_Shift, 3   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB4_Shift, 4   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB5_Shift, 5   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB6_Shift, 6   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB7_Shift, 7   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB8_Shift, 8   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB9_Shift, 9   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB10_Shift, 10   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB11_Shift, 11   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB12_Shift, 12   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB13_Shift, 13   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB14_Shift, 14   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB15_Shift, 15   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB16_Shift, 16   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB17_Shift, 17   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB18_Shift, 18   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB19_Shift, 19   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB20_Shift, 20   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB21_Shift, 21   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB22_Shift, 22   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB23_Shift, 23   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB24_Shift, 24   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB25_Shift, 25   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB26_Shift, 26   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB27_Shift, 27   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB28_Shift, 28   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB29_Shift, 29   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB30_Shift, 30   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB31_Shift, 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN_F4R2, CAN_BASE + 0x264 @ (Filter bank 4 register 2) 
        .equ CAN_FB0_Shift, 0   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB1_Shift, 1   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB2_Shift, 2   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB3_Shift, 3   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB4_Shift, 4   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB5_Shift, 5   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB6_Shift, 6   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB7_Shift, 7   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB8_Shift, 8   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB9_Shift, 9   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB10_Shift, 10   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB11_Shift, 11   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB12_Shift, 12   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB13_Shift, 13   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB14_Shift, 14   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB15_Shift, 15   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB16_Shift, 16   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB17_Shift, 17   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB18_Shift, 18   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB19_Shift, 19   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB20_Shift, 20   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB21_Shift, 21   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB22_Shift, 22   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB23_Shift, 23   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB24_Shift, 24   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB25_Shift, 25   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB26_Shift, 26   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB27_Shift, 27   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB28_Shift, 28   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB29_Shift, 29   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB30_Shift, 30   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB31_Shift, 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN_F5R1, CAN_BASE + 0x268 @ (Filter bank 5 register 1) 
        .equ CAN_FB0_Shift, 0   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB1_Shift, 1   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB2_Shift, 2   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB3_Shift, 3   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB4_Shift, 4   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB5_Shift, 5   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB6_Shift, 6   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB7_Shift, 7   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB8_Shift, 8   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB9_Shift, 9   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB10_Shift, 10   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB11_Shift, 11   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB12_Shift, 12   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB13_Shift, 13   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB14_Shift, 14   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB15_Shift, 15   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB16_Shift, 16   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB17_Shift, 17   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB18_Shift, 18   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB19_Shift, 19   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB20_Shift, 20   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB21_Shift, 21   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB22_Shift, 22   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB23_Shift, 23   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB24_Shift, 24   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB25_Shift, 25   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB26_Shift, 26   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB27_Shift, 27   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB28_Shift, 28   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB29_Shift, 29   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB30_Shift, 30   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB31_Shift, 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN_F5R2, CAN_BASE + 0x26C @ (Filter bank 5 register 2) 
        .equ CAN_FB0_Shift, 0   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB1_Shift, 1   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB2_Shift, 2   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB3_Shift, 3   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB4_Shift, 4   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB5_Shift, 5   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB6_Shift, 6   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB7_Shift, 7   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB8_Shift, 8   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB9_Shift, 9   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB10_Shift, 10   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB11_Shift, 11   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB12_Shift, 12   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB13_Shift, 13   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB14_Shift, 14   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB15_Shift, 15   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB16_Shift, 16   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB17_Shift, 17   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB18_Shift, 18   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB19_Shift, 19   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB20_Shift, 20   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB21_Shift, 21   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB22_Shift, 22   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB23_Shift, 23   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB24_Shift, 24   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB25_Shift, 25   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB26_Shift, 26   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB27_Shift, 27   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB28_Shift, 28   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB29_Shift, 29   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB30_Shift, 30   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB31_Shift, 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN_F6R1, CAN_BASE + 0x270 @ (Filter bank 6 register 1) 
        .equ CAN_FB0_Shift, 0   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB1_Shift, 1   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB2_Shift, 2   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB3_Shift, 3   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB4_Shift, 4   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB5_Shift, 5   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB6_Shift, 6   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB7_Shift, 7   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB8_Shift, 8   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB9_Shift, 9   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB10_Shift, 10   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB11_Shift, 11   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB12_Shift, 12   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB13_Shift, 13   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB14_Shift, 14   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB15_Shift, 15   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB16_Shift, 16   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB17_Shift, 17   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB18_Shift, 18   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB19_Shift, 19   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB20_Shift, 20   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB21_Shift, 21   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB22_Shift, 22   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB23_Shift, 23   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB24_Shift, 24   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB25_Shift, 25   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB26_Shift, 26   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB27_Shift, 27   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB28_Shift, 28   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB29_Shift, 29   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB30_Shift, 30   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB31_Shift, 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN_F6R2, CAN_BASE + 0x274 @ (Filter bank 6 register 2) 
        .equ CAN_FB0_Shift, 0   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB1_Shift, 1   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB2_Shift, 2   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB3_Shift, 3   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB4_Shift, 4   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB5_Shift, 5   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB6_Shift, 6   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB7_Shift, 7   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB8_Shift, 8   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB9_Shift, 9   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB10_Shift, 10   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB11_Shift, 11   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB12_Shift, 12   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB13_Shift, 13   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB14_Shift, 14   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB15_Shift, 15   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB16_Shift, 16   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB17_Shift, 17   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB18_Shift, 18   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB19_Shift, 19   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB20_Shift, 20   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB21_Shift, 21   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB22_Shift, 22   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB23_Shift, 23   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB24_Shift, 24   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB25_Shift, 25   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB26_Shift, 26   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB27_Shift, 27   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB28_Shift, 28   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB29_Shift, 29   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB30_Shift, 30   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB31_Shift, 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN_F7R1, CAN_BASE + 0x278 @ (Filter bank 7 register 1) 
        .equ CAN_FB0_Shift, 0   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB1_Shift, 1   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB2_Shift, 2   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB3_Shift, 3   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB4_Shift, 4   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB5_Shift, 5   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB6_Shift, 6   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB7_Shift, 7   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB8_Shift, 8   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB9_Shift, 9   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB10_Shift, 10   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB11_Shift, 11   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB12_Shift, 12   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB13_Shift, 13   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB14_Shift, 14   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB15_Shift, 15   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB16_Shift, 16   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB17_Shift, 17   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB18_Shift, 18   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB19_Shift, 19   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB20_Shift, 20   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB21_Shift, 21   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB22_Shift, 22   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB23_Shift, 23   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB24_Shift, 24   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB25_Shift, 25   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB26_Shift, 26   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB27_Shift, 27   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB28_Shift, 28   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB29_Shift, 29   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB30_Shift, 30   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB31_Shift, 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN_F7R2, CAN_BASE + 0x27C @ (Filter bank 7 register 2) 
        .equ CAN_FB0_Shift, 0   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB1_Shift, 1   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB2_Shift, 2   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB3_Shift, 3   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB4_Shift, 4   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB5_Shift, 5   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB6_Shift, 6   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB7_Shift, 7   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB8_Shift, 8   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB9_Shift, 9   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB10_Shift, 10   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB11_Shift, 11   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB12_Shift, 12   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB13_Shift, 13   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB14_Shift, 14   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB15_Shift, 15   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB16_Shift, 16   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB17_Shift, 17   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB18_Shift, 18   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB19_Shift, 19   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB20_Shift, 20   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB21_Shift, 21   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB22_Shift, 22   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB23_Shift, 23   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB24_Shift, 24   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB25_Shift, 25   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB26_Shift, 26   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB27_Shift, 27   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB28_Shift, 28   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB29_Shift, 29   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB30_Shift, 30   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB31_Shift, 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN_F8R1, CAN_BASE + 0x280 @ (Filter bank 8 register 1) 
        .equ CAN_FB0_Shift, 0   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB1_Shift, 1   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB2_Shift, 2   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB3_Shift, 3   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB4_Shift, 4   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB5_Shift, 5   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB6_Shift, 6   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB7_Shift, 7   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB8_Shift, 8   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB9_Shift, 9   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB10_Shift, 10   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB11_Shift, 11   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB12_Shift, 12   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB13_Shift, 13   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB14_Shift, 14   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB15_Shift, 15   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB16_Shift, 16   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB17_Shift, 17   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB18_Shift, 18   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB19_Shift, 19   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB20_Shift, 20   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB21_Shift, 21   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB22_Shift, 22   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB23_Shift, 23   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB24_Shift, 24   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB25_Shift, 25   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB26_Shift, 26   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB27_Shift, 27   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB28_Shift, 28   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB29_Shift, 29   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB30_Shift, 30   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB31_Shift, 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN_F8R2, CAN_BASE + 0x284 @ (Filter bank 8 register 2) 
        .equ CAN_FB0_Shift, 0   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB1_Shift, 1   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB2_Shift, 2   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB3_Shift, 3   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB4_Shift, 4   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB5_Shift, 5   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB6_Shift, 6   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB7_Shift, 7   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB8_Shift, 8   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB9_Shift, 9   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB10_Shift, 10   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB11_Shift, 11   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB12_Shift, 12   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB13_Shift, 13   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB14_Shift, 14   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB15_Shift, 15   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB16_Shift, 16   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB17_Shift, 17   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB18_Shift, 18   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB19_Shift, 19   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB20_Shift, 20   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB21_Shift, 21   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB22_Shift, 22   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB23_Shift, 23   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB24_Shift, 24   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB25_Shift, 25   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB26_Shift, 26   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB27_Shift, 27   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB28_Shift, 28   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB29_Shift, 29   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB30_Shift, 30   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB31_Shift, 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN_F9R1, CAN_BASE + 0x288 @ (Filter bank 9 register 1) 
        .equ CAN_FB0_Shift, 0   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB1_Shift, 1   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB2_Shift, 2   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB3_Shift, 3   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB4_Shift, 4   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB5_Shift, 5   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB6_Shift, 6   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB7_Shift, 7   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB8_Shift, 8   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB9_Shift, 9   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB10_Shift, 10   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB11_Shift, 11   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB12_Shift, 12   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB13_Shift, 13   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB14_Shift, 14   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB15_Shift, 15   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB16_Shift, 16   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB17_Shift, 17   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB18_Shift, 18   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB19_Shift, 19   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB20_Shift, 20   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB21_Shift, 21   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB22_Shift, 22   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB23_Shift, 23   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB24_Shift, 24   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB25_Shift, 25   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB26_Shift, 26   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB27_Shift, 27   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB28_Shift, 28   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB29_Shift, 29   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB30_Shift, 30   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB31_Shift, 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN_F9R2, CAN_BASE + 0x28C @ (Filter bank 9 register 2) 
        .equ CAN_FB0_Shift, 0   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB1_Shift, 1   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB2_Shift, 2   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB3_Shift, 3   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB4_Shift, 4   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB5_Shift, 5   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB6_Shift, 6   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB7_Shift, 7   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB8_Shift, 8   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB9_Shift, 9   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB10_Shift, 10   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB11_Shift, 11   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB12_Shift, 12   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB13_Shift, 13   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB14_Shift, 14   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB15_Shift, 15   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB16_Shift, 16   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB17_Shift, 17   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB18_Shift, 18   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB19_Shift, 19   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB20_Shift, 20   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB21_Shift, 21   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB22_Shift, 22   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB23_Shift, 23   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB24_Shift, 24   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB25_Shift, 25   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB26_Shift, 26   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB27_Shift, 27   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB28_Shift, 28   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB29_Shift, 29   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB30_Shift, 30   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB31_Shift, 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN_F10R1, CAN_BASE + 0x290 @ (Filter bank 10 register 1) 
        .equ CAN_FB0_Shift, 0   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB1_Shift, 1   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB2_Shift, 2   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB3_Shift, 3   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB4_Shift, 4   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB5_Shift, 5   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB6_Shift, 6   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB7_Shift, 7   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB8_Shift, 8   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB9_Shift, 9   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB10_Shift, 10   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB11_Shift, 11   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB12_Shift, 12   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB13_Shift, 13   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB14_Shift, 14   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB15_Shift, 15   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB16_Shift, 16   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB17_Shift, 17   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB18_Shift, 18   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB19_Shift, 19   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB20_Shift, 20   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB21_Shift, 21   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB22_Shift, 22   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB23_Shift, 23   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB24_Shift, 24   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB25_Shift, 25   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB26_Shift, 26   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB27_Shift, 27   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB28_Shift, 28   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB29_Shift, 29   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB30_Shift, 30   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB31_Shift, 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN_F10R2, CAN_BASE + 0x294 @ (Filter bank 10 register 2) 
        .equ CAN_FB0_Shift, 0   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB1_Shift, 1   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB2_Shift, 2   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB3_Shift, 3   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB4_Shift, 4   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB5_Shift, 5   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB6_Shift, 6   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB7_Shift, 7   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB8_Shift, 8   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB9_Shift, 9   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB10_Shift, 10   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB11_Shift, 11   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB12_Shift, 12   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB13_Shift, 13   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB14_Shift, 14   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB15_Shift, 15   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB16_Shift, 16   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB17_Shift, 17   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB18_Shift, 18   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB19_Shift, 19   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB20_Shift, 20   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB21_Shift, 21   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB22_Shift, 22   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB23_Shift, 23   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB24_Shift, 24   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB25_Shift, 25   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB26_Shift, 26   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB27_Shift, 27   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB28_Shift, 28   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB29_Shift, 29   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB30_Shift, 30   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB31_Shift, 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN_F11R1, CAN_BASE + 0x298 @ (Filter bank 11 register 1) 
        .equ CAN_FB0_Shift, 0   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB1_Shift, 1   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB2_Shift, 2   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB3_Shift, 3   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB4_Shift, 4   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB5_Shift, 5   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB6_Shift, 6   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB7_Shift, 7   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB8_Shift, 8   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB9_Shift, 9   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB10_Shift, 10   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB11_Shift, 11   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB12_Shift, 12   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB13_Shift, 13   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB14_Shift, 14   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB15_Shift, 15   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB16_Shift, 16   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB17_Shift, 17   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB18_Shift, 18   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB19_Shift, 19   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB20_Shift, 20   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB21_Shift, 21   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB22_Shift, 22   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB23_Shift, 23   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB24_Shift, 24   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB25_Shift, 25   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB26_Shift, 26   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB27_Shift, 27   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB28_Shift, 28   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB29_Shift, 29   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB30_Shift, 30   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB31_Shift, 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN_F11R2, CAN_BASE + 0x29C @ (Filter bank 11 register 2) 
        .equ CAN_FB0_Shift, 0   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB1_Shift, 1   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB2_Shift, 2   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB3_Shift, 3   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB4_Shift, 4   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB5_Shift, 5   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB6_Shift, 6   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB7_Shift, 7   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB8_Shift, 8   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB9_Shift, 9   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB10_Shift, 10   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB11_Shift, 11   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB12_Shift, 12   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB13_Shift, 13   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB14_Shift, 14   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB15_Shift, 15   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB16_Shift, 16   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB17_Shift, 17   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB18_Shift, 18   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB19_Shift, 19   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB20_Shift, 20   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB21_Shift, 21   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB22_Shift, 22   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB23_Shift, 23   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB24_Shift, 24   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB25_Shift, 25   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB26_Shift, 26   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB27_Shift, 27   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB28_Shift, 28   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB29_Shift, 29   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB30_Shift, 30   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB31_Shift, 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN_F12R1, CAN_BASE + 0x2A0 @ (Filter bank 4 register 1) 
        .equ CAN_FB0_Shift, 0   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB1_Shift, 1   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB2_Shift, 2   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB3_Shift, 3   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB4_Shift, 4   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB5_Shift, 5   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB6_Shift, 6   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB7_Shift, 7   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB8_Shift, 8   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB9_Shift, 9   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB10_Shift, 10   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB11_Shift, 11   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB12_Shift, 12   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB13_Shift, 13   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB14_Shift, 14   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB15_Shift, 15   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB16_Shift, 16   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB17_Shift, 17   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB18_Shift, 18   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB19_Shift, 19   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB20_Shift, 20   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB21_Shift, 21   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB22_Shift, 22   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB23_Shift, 23   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB24_Shift, 24   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB25_Shift, 25   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB26_Shift, 26   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB27_Shift, 27   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB28_Shift, 28   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB29_Shift, 29   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB30_Shift, 30   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB31_Shift, 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN_F12R2, CAN_BASE + 0x2A4 @ (Filter bank 12 register 2) 
        .equ CAN_FB0_Shift, 0   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB1_Shift, 1   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB2_Shift, 2   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB3_Shift, 3   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB4_Shift, 4   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB5_Shift, 5   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB6_Shift, 6   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB7_Shift, 7   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB8_Shift, 8   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB9_Shift, 9   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB10_Shift, 10   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB11_Shift, 11   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB12_Shift, 12   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB13_Shift, 13   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB14_Shift, 14   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB15_Shift, 15   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB16_Shift, 16   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB17_Shift, 17   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB18_Shift, 18   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB19_Shift, 19   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB20_Shift, 20   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB21_Shift, 21   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB22_Shift, 22   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB23_Shift, 23   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB24_Shift, 24   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB25_Shift, 25   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB26_Shift, 26   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB27_Shift, 27   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB28_Shift, 28   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB29_Shift, 29   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB30_Shift, 30   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB31_Shift, 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN_F13R1, CAN_BASE + 0x2A8 @ (Filter bank 13 register 1) 
        .equ CAN_FB0_Shift, 0   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB1_Shift, 1   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB2_Shift, 2   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB3_Shift, 3   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB4_Shift, 4   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB5_Shift, 5   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB6_Shift, 6   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB7_Shift, 7   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB8_Shift, 8   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB9_Shift, 9   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB10_Shift, 10   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB11_Shift, 11   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB12_Shift, 12   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB13_Shift, 13   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB14_Shift, 14   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB15_Shift, 15   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB16_Shift, 16   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB17_Shift, 17   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB18_Shift, 18   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB19_Shift, 19   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB20_Shift, 20   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB21_Shift, 21   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB22_Shift, 22   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB23_Shift, 23   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB24_Shift, 24   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB25_Shift, 25   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB26_Shift, 26   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB27_Shift, 27   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB28_Shift, 28   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB29_Shift, 29   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB30_Shift, 30   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB31_Shift, 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN_F13R2, CAN_BASE + 0x2AC @ (Filter bank 13 register 2) 
        .equ CAN_FB0_Shift, 0   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB1_Shift, 1   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB2_Shift, 2   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB3_Shift, 3   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB4_Shift, 4   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB5_Shift, 5   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB6_Shift, 6   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB7_Shift, 7   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB8_Shift, 8   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB9_Shift, 9   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB10_Shift, 10   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB11_Shift, 11   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB12_Shift, 12   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB13_Shift, 13   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB14_Shift, 14   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB15_Shift, 15   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB16_Shift, 16   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB17_Shift, 17   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB18_Shift, 18   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB19_Shift, 19   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB20_Shift, 20   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB21_Shift, 21   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB22_Shift, 22   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB23_Shift, 23   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB24_Shift, 24   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB25_Shift, 25   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB26_Shift, 26   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB27_Shift, 27   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB28_Shift, 28   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB29_Shift, 29   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB30_Shift, 30   @ bitWidth 1 (Filter bits)  
        .equ CAN_FB31_Shift, 31   @ bitWidth 1 (Filter bits)  
 

@=========================== DAC ===========================@
.equ DAC_BASE, 0x40007400 @ (Digital to analog converter) 
    .equ DAC_CR, DAC_BASE + 0x0 @ (Control register DAC_CR) 
        .equ DAC_EN1_Shift, 0   @ bitWidth 1 (DAC channel1 enable)  
        .equ DAC_BOFF1_Shift, 1   @ bitWidth 1 (DAC channel1 output buffer  disable)  
        .equ DAC_TEN1_Shift, 2   @ bitWidth 1 (DAC channel1 trigger  enable)  
        .equ DAC_TSEL1_Shift, 3   @ bitWidth 3 (DAC channel1 trigger  selection)  
        .equ DAC_WAVE1_Shift, 6   @ bitWidth 2 (DAC channel1 noise/triangle wave  generation enable)  
        .equ DAC_MAMP1_Shift, 8   @ bitWidth 4 (DAC channel1 mask/amplitude  selector)  
        .equ DAC_DMAEN1_Shift, 12   @ bitWidth 1 (DAC channel1 DMA enable)  
        .equ DAC_EN2_Shift, 16   @ bitWidth 1 (DAC channel2 enable)  
        .equ DAC_BOFF2_Shift, 17   @ bitWidth 1 (DAC channel2 output buffer  disable)  
        .equ DAC_TEN2_Shift, 18   @ bitWidth 1 (DAC channel2 trigger  enable)  
        .equ DAC_TSEL2_Shift, 19   @ bitWidth 3 (DAC channel2 trigger  selection)  
        .equ DAC_WAVE2_Shift, 22   @ bitWidth 2 (DAC channel2 noise/triangle wave  generation enable)  
        .equ DAC_MAMP2_Shift, 24   @ bitWidth 4 (DAC channel2 mask/amplitude  selector)  
        .equ DAC_DMAEN2_Shift, 28   @ bitWidth 1 (DAC channel2 DMA enable)  
 
    .equ DAC_SWTRIGR, DAC_BASE + 0x4 @ (DAC software trigger register  DAC_SWTRIGR) 
        .equ DAC_SWTRIG1_Shift, 0   @ bitWidth 1 (DAC channel1 software  trigger)  
        .equ DAC_SWTRIG2_Shift, 1   @ bitWidth 1 (DAC channel2 software  trigger)  
 
    .equ DAC_DHR12R1, DAC_BASE + 0x8 @ (DAC channel1 12-bit right-aligned data  holding registerDAC_DHR12R1) 
        .equ DAC_DACC1DHR_Shift, 0   @ bitWidth 12 (DAC channel1 12-bit right-aligned  data)  
 
    .equ DAC_DHR12L1, DAC_BASE + 0xC @ (DAC channel1 12-bit left aligned data  holding register DAC_DHR12L1) 
        .equ DAC_DACC1DHR_Shift, 4   @ bitWidth 12 (DAC channel1 12-bit left-aligned  data)  
 
    .equ DAC_DHR8R1, DAC_BASE + 0x10 @ (DAC channel1 8-bit right aligned data  holding register DAC_DHR8R1) 
        .equ DAC_DACC1DHR_Shift, 0   @ bitWidth 8 (DAC channel1 8-bit right-aligned  data)  
 
    .equ DAC_DHR12R2, DAC_BASE + 0x14 @ (DAC channel2 12-bit right aligned data  holding register DAC_DHR12R2) 
        .equ DAC_DACC2DHR_Shift, 0   @ bitWidth 12 (DAC channel2 12-bit right-aligned  data)  
 
    .equ DAC_DHR12L2, DAC_BASE + 0x18 @ (DAC channel2 12-bit left aligned data  holding register DAC_DHR12L2) 
        .equ DAC_DACC2DHR_Shift, 4   @ bitWidth 12 (DAC channel2 12-bit left-aligned  data)  
 
    .equ DAC_DHR8R2, DAC_BASE + 0x1C @ (DAC channel2 8-bit right-aligned data  holding register DAC_DHR8R2) 
        .equ DAC_DACC2DHR_Shift, 0   @ bitWidth 8 (DAC channel2 8-bit right-aligned  data)  
 
    .equ DAC_DHR12RD, DAC_BASE + 0x20 @ (Dual DAC 12-bit right-aligned data holding  register DAC_DHR12RD, Bits 31:28 Reserved, Bits 15:12  Reserved) 
        .equ DAC_DACC1DHR_Shift, 0   @ bitWidth 12 (DAC channel1 12-bit right-aligned  data)  
        .equ DAC_DACC2DHR_Shift, 16   @ bitWidth 12 (DAC channel2 12-bit right-aligned  data)  
 
    .equ DAC_DHR12LD, DAC_BASE + 0x24 @ (DUAL DAC 12-bit left aligned data holding  register DAC_DHR12LD, Bits 19:16 Reserved, Bits 3:0  Reserved) 
        .equ DAC_DACC1DHR_Shift, 4   @ bitWidth 12 (DAC channel1 12-bit left-aligned  data)  
        .equ DAC_DACC2DHR_Shift, 20   @ bitWidth 12 (DAC channel2 12-bit right-aligned  data)  
 
    .equ DAC_DHR8RD, DAC_BASE + 0x28 @ (DUAL DAC 8-bit right aligned data holding  register DAC_DHR8RD, Bits 31:16 Reserved) 
        .equ DAC_DACC1DHR_Shift, 0   @ bitWidth 8 (DAC channel1 8-bit right-aligned  data)  
        .equ DAC_DACC2DHR_Shift, 8   @ bitWidth 8 (DAC channel2 8-bit right-aligned  data)  
 
    .equ DAC_DOR1, DAC_BASE + 0x2C @ (DAC channel1 data output register  DAC_DOR1) 
        .equ DAC_DACC1DOR_Shift, 0   @ bitWidth 12 (DAC channel1 data output)  
 
    .equ DAC_DOR2, DAC_BASE + 0x30 @ (DAC channel2 data output register  DAC_DOR2) 
        .equ DAC_DACC2DOR_Shift, 0   @ bitWidth 12 (DAC channel2 data output)  
 

@=========================== DBG ===========================@
.equ DBG_BASE, 0xE0042000 @ (Debug support) 
    .equ DBG_IDCODE, DBG_BASE + 0x0 @ (DBGMCU_IDCODE) 
        .equ DBG_DEV_ID_Shift, 0   @ bitWidth 12 (DEV_ID)  
        .equ DBG_REV_ID_Shift, 16   @ bitWidth 16 (REV_ID)  
 
    .equ DBG_CR, DBG_BASE + 0x4 @ (DBGMCU_CR) 
        .equ DBG_DBG_SLEEP_Shift, 0   @ bitWidth 1 (DBG_SLEEP)  
        .equ DBG_DBG_STOP_Shift, 1   @ bitWidth 1 (DBG_STOP)  
        .equ DBG_DBG_STANDBY_Shift, 2   @ bitWidth 1 (DBG_STANDBY)  
        .equ DBG_TRACE_IOEN_Shift, 5   @ bitWidth 1 (TRACE_IOEN)  
        .equ DBG_TRACE_MODE_Shift, 6   @ bitWidth 2 (TRACE_MODE)  
        .equ DBG_DBG_IWDG_STOP_Shift, 8   @ bitWidth 1 (DBG_IWDG_STOP)  
        .equ DBG_DBG_WWDG_STOP_Shift, 9   @ bitWidth 1 (DBG_WWDG_STOP)  
        .equ DBG_DBG_TIM1_STOP_Shift, 10   @ bitWidth 1 (DBG_TIM1_STOP)  
        .equ DBG_DBG_TIM2_STOP_Shift, 11   @ bitWidth 1 (DBG_TIM2_STOP)  
        .equ DBG_DBG_TIM3_STOP_Shift, 12   @ bitWidth 1 (DBG_TIM3_STOP)  
        .equ DBG_DBG_TIM4_STOP_Shift, 13   @ bitWidth 1 (DBG_TIM4_STOP)  
        .equ DBG_DBG_CAN1_STOP_Shift, 14   @ bitWidth 1 (DBG_CAN1_STOP)  
        .equ DBG_DBG_I2C1_SMBUS_TIMEOUT_Shift, 15   @ bitWidth 1 (DBG_I2C1_SMBUS_TIMEOUT)  
        .equ DBG_DBG_I2C2_SMBUS_TIMEOUT_Shift, 16   @ bitWidth 1 (DBG_I2C2_SMBUS_TIMEOUT)  
        .equ DBG_DBG_TIM8_STOP_Shift, 17   @ bitWidth 1 (DBG_TIM8_STOP)  
        .equ DBG_DBG_TIM5_STOP_Shift, 18   @ bitWidth 1 (DBG_TIM5_STOP)  
        .equ DBG_DBG_TIM6_STOP_Shift, 19   @ bitWidth 1 (DBG_TIM6_STOP)  
        .equ DBG_DBG_TIM7_STOP_Shift, 20   @ bitWidth 1 (DBG_TIM7_STOP)  
        .equ DBG_DBG_CAN2_STOP_Shift, 21   @ bitWidth 1 (DBG_CAN2_STOP)  
 

@=========================== UART4 ===========================@
.equ UART4_BASE, 0x40004C00 @ (Universal asynchronous receiver  transmitter) 
    .equ UART4_SR, UART4_BASE + 0x0 @ (UART4_SR) 
        .equ UART4_PE_Shift, 0   @ bitWidth 1 (Parity error)  
        .equ UART4_FE_Shift, 1   @ bitWidth 1 (Framing error)  
        .equ UART4_NE_Shift, 2   @ bitWidth 1 (Noise error flag)  
        .equ UART4_ORE_Shift, 3   @ bitWidth 1 (Overrun error)  
        .equ UART4_IDLE_Shift, 4   @ bitWidth 1 (IDLE line detected)  
        .equ UART4_RXNE_Shift, 5   @ bitWidth 1 (Read data register not  empty)  
        .equ UART4_TC_Shift, 6   @ bitWidth 1 (Transmission complete)  
        .equ UART4_TXE_Shift, 7   @ bitWidth 1 (Transmit data register  empty)  
        .equ UART4_LBD_Shift, 8   @ bitWidth 1 (LIN break detection flag)  
 
    .equ UART4_DR, UART4_BASE + 0x4 @ (UART4_DR) 
        .equ UART4_DR_Shift, 0   @ bitWidth 9 (DR)  
 
    .equ UART4_BRR, UART4_BASE + 0x8 @ (UART4_BRR) 
        .equ UART4_DIV_Fraction_Shift, 0   @ bitWidth 4 (DIV_Fraction)  
        .equ UART4_DIV_Mantissa_Shift, 4   @ bitWidth 12 (DIV_Mantissa)  
 
    .equ UART4_CR1, UART4_BASE + 0xC @ (UART4_CR1) 
        .equ UART4_SBK_Shift, 0   @ bitWidth 1 (Send break)  
        .equ UART4_RWU_Shift, 1   @ bitWidth 1 (Receiver wakeup)  
        .equ UART4_RE_Shift, 2   @ bitWidth 1 (Receiver enable)  
        .equ UART4_TE_Shift, 3   @ bitWidth 1 (Transmitter enable)  
        .equ UART4_IDLEIE_Shift, 4   @ bitWidth 1 (IDLE interrupt enable)  
        .equ UART4_RXNEIE_Shift, 5   @ bitWidth 1 (RXNE interrupt enable)  
        .equ UART4_TCIE_Shift, 6   @ bitWidth 1 (Transmission complete interrupt  enable)  
        .equ UART4_TXEIE_Shift, 7   @ bitWidth 1 (TXE interrupt enable)  
        .equ UART4_PEIE_Shift, 8   @ bitWidth 1 (PE interrupt enable)  
        .equ UART4_PS_Shift, 9   @ bitWidth 1 (Parity selection)  
        .equ UART4_PCE_Shift, 10   @ bitWidth 1 (Parity control enable)  
        .equ UART4_WAKE_Shift, 11   @ bitWidth 1 (Wakeup method)  
        .equ UART4_M_Shift, 12   @ bitWidth 1 (Word length)  
        .equ UART4_UE_Shift, 13   @ bitWidth 1 (USART enable)  
 
    .equ UART4_CR2, UART4_BASE + 0x10 @ (UART4_CR2) 
        .equ UART4_ADD_Shift, 0   @ bitWidth 4 (Address of the USART node)  
        .equ UART4_LBDL_Shift, 5   @ bitWidth 1 (lin break detection length)  
        .equ UART4_LBDIE_Shift, 6   @ bitWidth 1 (LIN break detection interrupt  enable)  
        .equ UART4_STOP_Shift, 12   @ bitWidth 2 (STOP bits)  
        .equ UART4_LINEN_Shift, 14   @ bitWidth 1 (LIN mode enable)  
 
    .equ UART4_CR3, UART4_BASE + 0x14 @ (UART4_CR3) 
        .equ UART4_EIE_Shift, 0   @ bitWidth 1 (Error interrupt enable)  
        .equ UART4_IREN_Shift, 1   @ bitWidth 1 (IrDA mode enable)  
        .equ UART4_IRLP_Shift, 2   @ bitWidth 1 (IrDA low-power)  
        .equ UART4_HDSEL_Shift, 3   @ bitWidth 1 (Half-duplex selection)  
        .equ UART4_DMAR_Shift, 6   @ bitWidth 1 (DMA enable receiver)  
        .equ UART4_DMAT_Shift, 7   @ bitWidth 1 (DMA enable transmitter)  
 

@=========================== UART5 ===========================@
.equ UART5_BASE, 0x40005000 @ (Universal asynchronous receiver  transmitter) 
    .equ UART5_SR, UART5_BASE + 0x0 @ (UART4_SR) 
        .equ UART5_PE_Shift, 0   @ bitWidth 1 (PE)  
        .equ UART5_FE_Shift, 1   @ bitWidth 1 (FE)  
        .equ UART5_NE_Shift, 2   @ bitWidth 1 (NE)  
        .equ UART5_ORE_Shift, 3   @ bitWidth 1 (ORE)  
        .equ UART5_IDLE_Shift, 4   @ bitWidth 1 (IDLE)  
        .equ UART5_RXNE_Shift, 5   @ bitWidth 1 (RXNE)  
        .equ UART5_TC_Shift, 6   @ bitWidth 1 (TC)  
        .equ UART5_TXE_Shift, 7   @ bitWidth 1 (TXE)  
        .equ UART5_LBD_Shift, 8   @ bitWidth 1 (LBD)  
 
    .equ UART5_DR, UART5_BASE + 0x4 @ (UART4_DR) 
        .equ UART5_DR_Shift, 0   @ bitWidth 9 (DR)  
 
    .equ UART5_BRR, UART5_BASE + 0x8 @ (UART4_BRR) 
        .equ UART5_DIV_Fraction_Shift, 0   @ bitWidth 4 (DIV_Fraction)  
        .equ UART5_DIV_Mantissa_Shift, 4   @ bitWidth 12 (DIV_Mantissa)  
 
    .equ UART5_CR1, UART5_BASE + 0xC @ (UART4_CR1) 
        .equ UART5_SBK_Shift, 0   @ bitWidth 1 (SBK)  
        .equ UART5_RWU_Shift, 1   @ bitWidth 1 (RWU)  
        .equ UART5_RE_Shift, 2   @ bitWidth 1 (RE)  
        .equ UART5_TE_Shift, 3   @ bitWidth 1 (TE)  
        .equ UART5_IDLEIE_Shift, 4   @ bitWidth 1 (IDLEIE)  
        .equ UART5_RXNEIE_Shift, 5   @ bitWidth 1 (RXNEIE)  
        .equ UART5_TCIE_Shift, 6   @ bitWidth 1 (TCIE)  
        .equ UART5_TXEIE_Shift, 7   @ bitWidth 1 (TXEIE)  
        .equ UART5_PEIE_Shift, 8   @ bitWidth 1 (PEIE)  
        .equ UART5_PS_Shift, 9   @ bitWidth 1 (PS)  
        .equ UART5_PCE_Shift, 10   @ bitWidth 1 (PCE)  
        .equ UART5_WAKE_Shift, 11   @ bitWidth 1 (WAKE)  
        .equ UART5_M_Shift, 12   @ bitWidth 1 (M)  
        .equ UART5_UE_Shift, 13   @ bitWidth 1 (UE)  
 
    .equ UART5_CR2, UART5_BASE + 0x10 @ (UART4_CR2) 
        .equ UART5_ADD_Shift, 0   @ bitWidth 4 (ADD)  
        .equ UART5_LBDL_Shift, 5   @ bitWidth 1 (LBDL)  
        .equ UART5_LBDIE_Shift, 6   @ bitWidth 1 (LBDIE)  
        .equ UART5_STOP_Shift, 12   @ bitWidth 2 (STOP)  
        .equ UART5_LINEN_Shift, 14   @ bitWidth 1 (LINEN)  
 
    .equ UART5_CR3, UART5_BASE + 0x14 @ (UART4_CR3) 
        .equ UART5_EIE_Shift, 0   @ bitWidth 1 (Error interrupt enable)  
        .equ UART5_IREN_Shift, 1   @ bitWidth 1 (IrDA mode enable)  
        .equ UART5_IRLP_Shift, 2   @ bitWidth 1 (IrDA low-power)  
        .equ UART5_HDSEL_Shift, 3   @ bitWidth 1 (Half-duplex selection)  
        .equ UART5_DMAT_Shift, 7   @ bitWidth 1 (DMA enable transmitter)  
 

@=========================== CRC ===========================@
.equ CRC_BASE, 0x40023000 @ (CRC calculation unit) 
    .equ CRC_DR, CRC_BASE + 0x0 @ (Data register) 
        .equ CRC_DR_Shift, 0   @ bitWidth 32 (Data Register)  
 
    .equ CRC_IDR, CRC_BASE + 0x4 @ (Independent Data register) 
        .equ CRC_IDR_Shift, 0   @ bitWidth 8 (Independent Data register)  
 
    .equ CRC_CR, CRC_BASE + 0x8 @ (Control register) 
        .equ CRC_RESET_Shift, 0   @ bitWidth 1 (Reset bit)  
 

@=========================== FLASH ===========================@
.equ FLASH_BASE, 0x40022000 @ (FLASH) 
    .equ FLASH_ACR, FLASH_BASE + 0x0 @ (Flash access control register) 
        .equ FLASH_LATENCY_Shift, 0   @ bitWidth 3 (Latency)  
        .equ FLASH_HLFCYA_Shift, 3   @ bitWidth 1 (Flash half cycle access  enable)  
        .equ FLASH_PRFTBE_Shift, 4   @ bitWidth 1 (Prefetch buffer enable)  
        .equ FLASH_PRFTBS_Shift, 5   @ bitWidth 1 (Prefetch buffer status)  
 
    .equ FLASH_KEYR, FLASH_BASE + 0x4 @ (Flash key register) 
        .equ FLASH_KEY_Shift, 0   @ bitWidth 32 (FPEC key)  
 
    .equ FLASH_OPTKEYR, FLASH_BASE + 0x8 @ (Flash option key register) 
        .equ FLASH_OPTKEY_Shift, 0   @ bitWidth 32 (Option byte key)  
 
    .equ FLASH_SR, FLASH_BASE + 0xC @ (Status register) 
        .equ FLASH_EOP_Shift, 5   @ bitWidth 1 (End of operation)  
        .equ FLASH_WRPRTERR_Shift, 4   @ bitWidth 1 (Write protection error)  
        .equ FLASH_PGERR_Shift, 2   @ bitWidth 1 (Programming error)  
        .equ FLASH_BSY_Shift, 0   @ bitWidth 1 (Busy)  
 
    .equ FLASH_CR, FLASH_BASE + 0x10 @ (Control register) 
        .equ FLASH_PG_Shift, 0   @ bitWidth 1 (Programming)  
        .equ FLASH_PER_Shift, 1   @ bitWidth 1 (Page Erase)  
        .equ FLASH_MER_Shift, 2   @ bitWidth 1 (Mass Erase)  
        .equ FLASH_OPTPG_Shift, 4   @ bitWidth 1 (Option byte programming)  
        .equ FLASH_OPTER_Shift, 5   @ bitWidth 1 (Option byte erase)  
        .equ FLASH_STRT_Shift, 6   @ bitWidth 1 (Start)  
        .equ FLASH_LOCK_Shift, 7   @ bitWidth 1 (Lock)  
        .equ FLASH_OPTWRE_Shift, 9   @ bitWidth 1 (Option bytes write enable)  
        .equ FLASH_ERRIE_Shift, 10   @ bitWidth 1 (Error interrupt enable)  
        .equ FLASH_EOPIE_Shift, 12   @ bitWidth 1 (End of operation interrupt  enable)  
 
    .equ FLASH_AR, FLASH_BASE + 0x14 @ (Flash address register) 
        .equ FLASH_FAR_Shift, 0   @ bitWidth 32 (Flash Address)  
 
    .equ FLASH_OBR, FLASH_BASE + 0x1C @ (Option byte register) 
        .equ FLASH_OPTERR_Shift, 0   @ bitWidth 1 (Option byte error)  
        .equ FLASH_RDPRT_Shift, 1   @ bitWidth 1 (Read protection)  
        .equ FLASH_WDG_SW_Shift, 2   @ bitWidth 1 (WDG_SW)  
        .equ FLASH_nRST_STOP_Shift, 3   @ bitWidth 1 (nRST_STOP)  
        .equ FLASH_nRST_STDBY_Shift, 4   @ bitWidth 1 (nRST_STDBY)  
        .equ FLASH_Data0_Shift, 10   @ bitWidth 8 (Data0)  
        .equ FLASH_Data1_Shift, 18   @ bitWidth 8 (Data1)  
 
    .equ FLASH_WRPR, FLASH_BASE + 0x20 @ (Write protection register) 
        .equ FLASH_WRP_Shift, 0   @ bitWidth 32 (Write protect)  
 

@=========================== NVIC ===========================@
.equ NVIC_BASE, 0xE000E000 @ (Nested Vectored Interrupt  Controller) 
    .equ NVIC_ICTR, NVIC_BASE + 0x4 @ (Interrupt Controller Type  Register) 
        .equ NVIC_INTLINESNUM_Shift, 0   @ bitWidth 4 (Total number of interrupt lines in  groups)  
 
    .equ NVIC_STIR, NVIC_BASE + 0xF00 @ (Software Triggered Interrupt  Register) 
        .equ NVIC_INTID_Shift, 0   @ bitWidth 9 (interrupt to be triggered)  
 
    .equ NVIC_ISER0, NVIC_BASE + 0x100 @ (Interrupt Set-Enable Register) 
        .equ NVIC_SETENA_Shift, 0   @ bitWidth 32 (SETENA)  
 
    .equ NVIC_ISER1, NVIC_BASE + 0x104 @ (Interrupt Set-Enable Register) 
        .equ NVIC_SETENA_Shift, 0   @ bitWidth 32 (SETENA)  
 
    .equ NVIC_ICER0, NVIC_BASE + 0x180 @ (Interrupt Clear-Enable  Register) 
        .equ NVIC_CLRENA_Shift, 0   @ bitWidth 32 (CLRENA)  
 
    .equ NVIC_ICER1, NVIC_BASE + 0x184 @ (Interrupt Clear-Enable  Register) 
        .equ NVIC_CLRENA_Shift, 0   @ bitWidth 32 (CLRENA)  
 
    .equ NVIC_ISPR0, NVIC_BASE + 0x200 @ (Interrupt Set-Pending Register) 
        .equ NVIC_SETPEND_Shift, 0   @ bitWidth 32 (SETPEND)  
 
    .equ NVIC_ISPR1, NVIC_BASE + 0x204 @ (Interrupt Set-Pending Register) 
        .equ NVIC_SETPEND_Shift, 0   @ bitWidth 32 (SETPEND)  
 
    .equ NVIC_ICPR0, NVIC_BASE + 0x280 @ (Interrupt Clear-Pending  Register) 
        .equ NVIC_CLRPEND_Shift, 0   @ bitWidth 32 (CLRPEND)  
 
    .equ NVIC_ICPR1, NVIC_BASE + 0x284 @ (Interrupt Clear-Pending  Register) 
        .equ NVIC_CLRPEND_Shift, 0   @ bitWidth 32 (CLRPEND)  
 
    .equ NVIC_IABR0, NVIC_BASE + 0x300 @ (Interrupt Active Bit Register) 
        .equ NVIC_ACTIVE_Shift, 0   @ bitWidth 32 (ACTIVE)  
 
    .equ NVIC_IABR1, NVIC_BASE + 0x304 @ (Interrupt Active Bit Register) 
        .equ NVIC_ACTIVE_Shift, 0   @ bitWidth 32 (ACTIVE)  
 
    .equ NVIC_IPR0, NVIC_BASE + 0x400 @ (Interrupt Priority Register) 
        .equ NVIC_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR1, NVIC_BASE + 0x404 @ (Interrupt Priority Register) 
        .equ NVIC_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR2, NVIC_BASE + 0x408 @ (Interrupt Priority Register) 
        .equ NVIC_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR3, NVIC_BASE + 0x40C @ (Interrupt Priority Register) 
        .equ NVIC_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR4, NVIC_BASE + 0x410 @ (Interrupt Priority Register) 
        .equ NVIC_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR5, NVIC_BASE + 0x414 @ (Interrupt Priority Register) 
        .equ NVIC_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR6, NVIC_BASE + 0x418 @ (Interrupt Priority Register) 
        .equ NVIC_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR7, NVIC_BASE + 0x41C @ (Interrupt Priority Register) 
        .equ NVIC_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR8, NVIC_BASE + 0x420 @ (Interrupt Priority Register) 
        .equ NVIC_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR9, NVIC_BASE + 0x424 @ (Interrupt Priority Register) 
        .equ NVIC_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR10, NVIC_BASE + 0x428 @ (Interrupt Priority Register) 
        .equ NVIC_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR11, NVIC_BASE + 0x42C @ (Interrupt Priority Register) 
        .equ NVIC_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR12, NVIC_BASE + 0x430 @ (Interrupt Priority Register) 
        .equ NVIC_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR13, NVIC_BASE + 0x434 @ (Interrupt Priority Register) 
        .equ NVIC_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR14, NVIC_BASE + 0x438 @ (Interrupt Priority Register) 
        .equ NVIC_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 

@=========================== USB ===========================@
.equ USB_BASE, 0x40005C00 @ (Universal serial bus full-speed device  interface) 
    .equ USB_EP0R, USB_BASE + 0x0 @ (endpoint 0 register) 
        .equ USB_EA_Shift, 0   @ bitWidth 4 (Endpoint address)  
        .equ USB_STAT_TX_Shift, 4   @ bitWidth 2 (Status bits, for transmission  transfers)  
        .equ USB_DTOG_TX_Shift, 6   @ bitWidth 1 (Data Toggle, for transmission  transfers)  
        .equ USB_CTR_TX_Shift, 7   @ bitWidth 1 (Correct Transfer for  transmission)  
        .equ USB_EP_KIND_Shift, 8   @ bitWidth 1 (Endpoint kind)  
        .equ USB_EP_TYPE_Shift, 9   @ bitWidth 2 (Endpoint type)  
        .equ USB_SETUP_Shift, 11   @ bitWidth 1 (Setup transaction  completed)  
        .equ USB_STAT_RX_Shift, 12   @ bitWidth 2 (Status bits, for reception  transfers)  
        .equ USB_DTOG_RX_Shift, 14   @ bitWidth 1 (Data Toggle, for reception  transfers)  
        .equ USB_CTR_RX_Shift, 15   @ bitWidth 1 (Correct transfer for  reception)  
 
    .equ USB_EP1R, USB_BASE + 0x4 @ (endpoint 1 register) 
        .equ USB_EA_Shift, 0   @ bitWidth 4 (Endpoint address)  
        .equ USB_STAT_TX_Shift, 4   @ bitWidth 2 (Status bits, for transmission  transfers)  
        .equ USB_DTOG_TX_Shift, 6   @ bitWidth 1 (Data Toggle, for transmission  transfers)  
        .equ USB_CTR_TX_Shift, 7   @ bitWidth 1 (Correct Transfer for  transmission)  
        .equ USB_EP_KIND_Shift, 8   @ bitWidth 1 (Endpoint kind)  
        .equ USB_EP_TYPE_Shift, 9   @ bitWidth 2 (Endpoint type)  
        .equ USB_SETUP_Shift, 11   @ bitWidth 1 (Setup transaction  completed)  
        .equ USB_STAT_RX_Shift, 12   @ bitWidth 2 (Status bits, for reception  transfers)  
        .equ USB_DTOG_RX_Shift, 14   @ bitWidth 1 (Data Toggle, for reception  transfers)  
        .equ USB_CTR_RX_Shift, 15   @ bitWidth 1 (Correct transfer for  reception)  
 
    .equ USB_EP2R, USB_BASE + 0x8 @ (endpoint 2 register) 
        .equ USB_EA_Shift, 0   @ bitWidth 4 (Endpoint address)  
        .equ USB_STAT_TX_Shift, 4   @ bitWidth 2 (Status bits, for transmission  transfers)  
        .equ USB_DTOG_TX_Shift, 6   @ bitWidth 1 (Data Toggle, for transmission  transfers)  
        .equ USB_CTR_TX_Shift, 7   @ bitWidth 1 (Correct Transfer for  transmission)  
        .equ USB_EP_KIND_Shift, 8   @ bitWidth 1 (Endpoint kind)  
        .equ USB_EP_TYPE_Shift, 9   @ bitWidth 2 (Endpoint type)  
        .equ USB_SETUP_Shift, 11   @ bitWidth 1 (Setup transaction  completed)  
        .equ USB_STAT_RX_Shift, 12   @ bitWidth 2 (Status bits, for reception  transfers)  
        .equ USB_DTOG_RX_Shift, 14   @ bitWidth 1 (Data Toggle, for reception  transfers)  
        .equ USB_CTR_RX_Shift, 15   @ bitWidth 1 (Correct transfer for  reception)  
 
    .equ USB_EP3R, USB_BASE + 0xC @ (endpoint 3 register) 
        .equ USB_EA_Shift, 0   @ bitWidth 4 (Endpoint address)  
        .equ USB_STAT_TX_Shift, 4   @ bitWidth 2 (Status bits, for transmission  transfers)  
        .equ USB_DTOG_TX_Shift, 6   @ bitWidth 1 (Data Toggle, for transmission  transfers)  
        .equ USB_CTR_TX_Shift, 7   @ bitWidth 1 (Correct Transfer for  transmission)  
        .equ USB_EP_KIND_Shift, 8   @ bitWidth 1 (Endpoint kind)  
        .equ USB_EP_TYPE_Shift, 9   @ bitWidth 2 (Endpoint type)  
        .equ USB_SETUP_Shift, 11   @ bitWidth 1 (Setup transaction  completed)  
        .equ USB_STAT_RX_Shift, 12   @ bitWidth 2 (Status bits, for reception  transfers)  
        .equ USB_DTOG_RX_Shift, 14   @ bitWidth 1 (Data Toggle, for reception  transfers)  
        .equ USB_CTR_RX_Shift, 15   @ bitWidth 1 (Correct transfer for  reception)  
 
    .equ USB_EP4R, USB_BASE + 0x10 @ (endpoint 4 register) 
        .equ USB_EA_Shift, 0   @ bitWidth 4 (Endpoint address)  
        .equ USB_STAT_TX_Shift, 4   @ bitWidth 2 (Status bits, for transmission  transfers)  
        .equ USB_DTOG_TX_Shift, 6   @ bitWidth 1 (Data Toggle, for transmission  transfers)  
        .equ USB_CTR_TX_Shift, 7   @ bitWidth 1 (Correct Transfer for  transmission)  
        .equ USB_EP_KIND_Shift, 8   @ bitWidth 1 (Endpoint kind)  
        .equ USB_EP_TYPE_Shift, 9   @ bitWidth 2 (Endpoint type)  
        .equ USB_SETUP_Shift, 11   @ bitWidth 1 (Setup transaction  completed)  
        .equ USB_STAT_RX_Shift, 12   @ bitWidth 2 (Status bits, for reception  transfers)  
        .equ USB_DTOG_RX_Shift, 14   @ bitWidth 1 (Data Toggle, for reception  transfers)  
        .equ USB_CTR_RX_Shift, 15   @ bitWidth 1 (Correct transfer for  reception)  
 
    .equ USB_EP5R, USB_BASE + 0x14 @ (endpoint 5 register) 
        .equ USB_EA_Shift, 0   @ bitWidth 4 (Endpoint address)  
        .equ USB_STAT_TX_Shift, 4   @ bitWidth 2 (Status bits, for transmission  transfers)  
        .equ USB_DTOG_TX_Shift, 6   @ bitWidth 1 (Data Toggle, for transmission  transfers)  
        .equ USB_CTR_TX_Shift, 7   @ bitWidth 1 (Correct Transfer for  transmission)  
        .equ USB_EP_KIND_Shift, 8   @ bitWidth 1 (Endpoint kind)  
        .equ USB_EP_TYPE_Shift, 9   @ bitWidth 2 (Endpoint type)  
        .equ USB_SETUP_Shift, 11   @ bitWidth 1 (Setup transaction  completed)  
        .equ USB_STAT_RX_Shift, 12   @ bitWidth 2 (Status bits, for reception  transfers)  
        .equ USB_DTOG_RX_Shift, 14   @ bitWidth 1 (Data Toggle, for reception  transfers)  
        .equ USB_CTR_RX_Shift, 15   @ bitWidth 1 (Correct transfer for  reception)  
 
    .equ USB_EP6R, USB_BASE + 0x18 @ (endpoint 6 register) 
        .equ USB_EA_Shift, 0   @ bitWidth 4 (Endpoint address)  
        .equ USB_STAT_TX_Shift, 4   @ bitWidth 2 (Status bits, for transmission  transfers)  
        .equ USB_DTOG_TX_Shift, 6   @ bitWidth 1 (Data Toggle, for transmission  transfers)  
        .equ USB_CTR_TX_Shift, 7   @ bitWidth 1 (Correct Transfer for  transmission)  
        .equ USB_EP_KIND_Shift, 8   @ bitWidth 1 (Endpoint kind)  
        .equ USB_EP_TYPE_Shift, 9   @ bitWidth 2 (Endpoint type)  
        .equ USB_SETUP_Shift, 11   @ bitWidth 1 (Setup transaction  completed)  
        .equ USB_STAT_RX_Shift, 12   @ bitWidth 2 (Status bits, for reception  transfers)  
        .equ USB_DTOG_RX_Shift, 14   @ bitWidth 1 (Data Toggle, for reception  transfers)  
        .equ USB_CTR_RX_Shift, 15   @ bitWidth 1 (Correct transfer for  reception)  
 
    .equ USB_EP7R, USB_BASE + 0x1C @ (endpoint 7 register) 
        .equ USB_EA_Shift, 0   @ bitWidth 4 (Endpoint address)  
        .equ USB_STAT_TX_Shift, 4   @ bitWidth 2 (Status bits, for transmission  transfers)  
        .equ USB_DTOG_TX_Shift, 6   @ bitWidth 1 (Data Toggle, for transmission  transfers)  
        .equ USB_CTR_TX_Shift, 7   @ bitWidth 1 (Correct Transfer for  transmission)  
        .equ USB_EP_KIND_Shift, 8   @ bitWidth 1 (Endpoint kind)  
        .equ USB_EP_TYPE_Shift, 9   @ bitWidth 2 (Endpoint type)  
        .equ USB_SETUP_Shift, 11   @ bitWidth 1 (Setup transaction  completed)  
        .equ USB_STAT_RX_Shift, 12   @ bitWidth 2 (Status bits, for reception  transfers)  
        .equ USB_DTOG_RX_Shift, 14   @ bitWidth 1 (Data Toggle, for reception  transfers)  
        .equ USB_CTR_RX_Shift, 15   @ bitWidth 1 (Correct transfer for  reception)  
 
    .equ USB_CNTR, USB_BASE + 0x40 @ (control register) 
        .equ USB_FRES_Shift, 0   @ bitWidth 1 (Force USB Reset)  
        .equ USB_PDWN_Shift, 1   @ bitWidth 1 (Power down)  
        .equ USB_LPMODE_Shift, 2   @ bitWidth 1 (Low-power mode)  
        .equ USB_FSUSP_Shift, 3   @ bitWidth 1 (Force suspend)  
        .equ USB_RESUME_Shift, 4   @ bitWidth 1 (Resume request)  
        .equ USB_ESOFM_Shift, 8   @ bitWidth 1 (Expected start of frame interrupt  mask)  
        .equ USB_SOFM_Shift, 9   @ bitWidth 1 (Start of frame interrupt  mask)  
        .equ USB_RESETM_Shift, 10   @ bitWidth 1 (USB reset interrupt mask)  
        .equ USB_SUSPM_Shift, 11   @ bitWidth 1 (Suspend mode interrupt  mask)  
        .equ USB_WKUPM_Shift, 12   @ bitWidth 1 (Wakeup interrupt mask)  
        .equ USB_ERRM_Shift, 13   @ bitWidth 1 (Error interrupt mask)  
        .equ USB_PMAOVRM_Shift, 14   @ bitWidth 1 (Packet memory area over / underrun  interrupt mask)  
        .equ USB_CTRM_Shift, 15   @ bitWidth 1 (Correct transfer interrupt  mask)  
 
    .equ USB_ISTR, USB_BASE + 0x44 @ (interrupt status register) 
        .equ USB_EP_ID_Shift, 0   @ bitWidth 4 (Endpoint Identifier)  
        .equ USB_DIR_Shift, 4   @ bitWidth 1 (Direction of transaction)  
        .equ USB_ESOF_Shift, 8   @ bitWidth 1 (Expected start frame)  
        .equ USB_SOF_Shift, 9   @ bitWidth 1 (start of frame)  
        .equ USB_RESET_Shift, 10   @ bitWidth 1 (reset request)  
        .equ USB_SUSP_Shift, 11   @ bitWidth 1 (Suspend mode request)  
        .equ USB_WKUP_Shift, 12   @ bitWidth 1 (Wakeup)  
        .equ USB_ERR_Shift, 13   @ bitWidth 1 (Error)  
        .equ USB_PMAOVR_Shift, 14   @ bitWidth 1 (Packet memory area over /  underrun)  
        .equ USB_CTR_Shift, 15   @ bitWidth 1 (Correct transfer)  
 
    .equ USB_FNR, USB_BASE + 0x48 @ (frame number register) 
        .equ USB_FN_Shift, 0   @ bitWidth 11 (Frame number)  
        .equ USB_LSOF_Shift, 11   @ bitWidth 2 (Lost SOF)  
        .equ USB_LCK_Shift, 13   @ bitWidth 1 (Locked)  
        .equ USB_RXDM_Shift, 14   @ bitWidth 1 (Receive data - line status)  
        .equ USB_RXDP_Shift, 15   @ bitWidth 1 (Receive data + line status)  
 
    .equ USB_DADDR, USB_BASE + 0x4C @ (device address) 
        .equ USB_ADD_Shift, 0   @ bitWidth 7 (Device address)  
        .equ USB_EF_Shift, 7   @ bitWidth 1 (Enable function)  
 
    .equ USB_BTABLE, USB_BASE + 0x50 @ (Buffer table address) 
        .equ USB_BTABLE_Shift, 3   @ bitWidth 13 (Buffer table)  
 
